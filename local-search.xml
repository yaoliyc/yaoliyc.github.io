<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>iOS AltStore侧载工具使用教程</title>
    <link href="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS-AltStore侧载工具使用教程"><a href="#iOS-AltStore侧载工具使用教程" class="headerlink" title="iOS AltStore侧载工具使用教程"></a>iOS AltStore侧载工具使用教程</h1><hr><ul><li><strong>iOS AltStore侧载工具使用教程</strong></li></ul><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/IMG_4839.jpeg.webp"></p><p>终于开始写iOS侧载了（好耶）</p><p>目前网上的教程还是有点乱七八糟的，也不乏那些机翻的教程（不过我个人觉得我的写作风格也有点机翻的味道?）而且有一些AltStore的新功能网上讲的还是有点少。（总之还是以个人整理为主）</p><p>那么就不多逼逼，马上开始介绍。</p><h2 id="Windows食用方法"><a href="#Windows食用方法" class="headerlink" title="Windows食用方法"></a>Windows食用方法</h2><p>“AltStore”虽然是一个在iOS上跑的软件，但是想正常使用还是需要电脑端AltServer的配合。</p><p>首先我们前往<a href="https://altstore.io/">AltStore官网</a>，然后点那个大大的“Get AltStore”：</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE%E7%89%871.webp" alt="Altstore官网"></p><p>话说AltStore网站还更新了</p><p>然后我们选择对应你系统的版本下载：</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE2.webp" alt="AltStore选择不同的版本下载。"></p><p>[warning]AltStore是不支持Windows 7&#x2F;8.x的，虽然可以跑，但是100%会报错。[&#x2F;warning]</p><p>接下来双击打开刚刚下载好的“altinstaller.zip”打开：</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE3.webp" alt="AltStore的Windows安装程序。"></p><p>两个文件的功能是一样的，任意选择一个打开即可。（为了写这篇东西我还特意把AltServer卸了重装?）</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE4.webp" alt="AltServer安装1"> <img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE5.webp" alt="AltServer安装2"></p><p>跟正常安装软件没有区别，一路“Next”就行。</p><p>然后就可以在开始菜单里看到AltServer的图标，点击运行。</p><p>这时候会提示驱动不完整（因为我已经装过驱动了，所以这里给不了图）。我们需要安装iTunes和iCloud。切记不能从Microsoft store下载，需要从苹果官网下载.exe格式的安装包。</p><p>iTunes下载（64位）：<a href="https://www.apple.com/itunes/download/win64">https://www.apple.com/itunes/download/win64</a></p><p>iTunes下载（32位）：<a href="https://www.apple.com/itunes/download/win32">https://www.apple.com/itunes/download/win32</a></p><p>iCloud下载：<a href="https://updates.cdn-apple.com/2020/windows/001-39935-20200911-1A70AA56-F448-11EA-8CC0-99D41950005E/iCloudSetup.exe">https://updates.cdn-apple.com/2020/windows/001-39935-20200911-1A70AA56-F448-11EA-8CC0-99D41950005E/iCloudSetup.exe</a></p><p>然后对话框就消失了。对没错，就消失了。千万不要手贱去疯狂的点开始菜单里的AltServer，否则就会这样：</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE6.webp" alt="一堆AltServer的图标堆在一起。"></p><p>是的没错，这玩意运行之后只会在任务栏的托盘里显示一个logo！现在，连接好你的设备，左键（记得是左键！点右键是没反应的）点一下这个logo，在弹出的窗口里选择“Install AltStore”&gt;你的设备名。</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE7.webp" alt="AltServer菜单。"></p><p>然后会提示输入账号密码，这里输入真实的密码即可。有的老教程会提到App专用密码，现在并不需要创建什么App专用密码，就算开启了双重认证也没有关系。</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE8.webp" alt="AltServer输入账号密码。"></p><p>等待一段时间，就可以看到手机上出现了AltStore的logo，点击运行。这时会提示“未受信任的开发者”，根据提示前往设置按一下“信任”。这时候就可以打开应用了，此时还需要输入一遍账号和密码，必须和电脑端操作时的账号一样，不然会出问题。</p><p>[info]自从iOS 16后，苹果对开发者应用做出了一点点的限制，需要到手机的“设置”&gt;“隐私与安全性”&gt;“开发者模式”里把开发者模式打开。这个选项只有iPhone才有，iPad不需要这一步。[&#x2F;info]</p><p>然后就可以愉快的操作了，找到“My Apps”选项卡，点一下左上角的“+”就可以安装应用了。</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE9.webp" alt="AltStore操作界面。"></p><p>就是左上角那个”+“，另外，记得要先把安装包传到手机上。</p><p>这个过程中全程都需要连接电脑。AltStore官方推荐打开iTunes中“通过Wi-Fi与此设备同步”，不过实际操作下来发现体验不算特别好，电脑关机之后就无法自动连接设备了，还是要先插一次线激活连接。</p><p><img src="/2025/05/18/iOS-AltStore%E4%BE%A7%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%9B%BE10.webp" alt="iTunes配置无线同步。"></p><p>先打开你的设备，然后直接往下滚动就可以找到这个设置</p><p>[info]</p><p>在[iOS侧载：引入]里提到过，如果是免费开发者，那么只能在一台设备上安装三个软件。AltStore可以自动处理这个事情，如果你需要安装三个以上应用，那么AltStore会先提醒你“Deactivate（禁用）”一款软件。</p><p>如果你的设备比较新，但又不是那么新，那么是可以绕开这个限制的，请继续往下看。</p><p>另外，还有一个硬性限制是10个“App ID”的限制。正常来讲，AltStore会用掉两个ID，剩下的软件都会用掉一个ID。这个限制是在云端处理的，所以无法绕开。</p><p>[&#x2F;info]</p><h2 id="macOS食用方法"><a href="#macOS食用方法" class="headerlink" title="macOS食用方法"></a>macOS食用方法</h2><p>Mac的操作方法相对简单，因为不存在驱动的问题。（要是Mac连接不了iPhone那真是闹鬼了?）</p><p>[info]因为我没有合适的Mac，所以下面压根没有截图（还是那句话，那你写个der的教程啊！）[&#x2F;info]</p><p>[warning]AltServer只支持Mac OS X 10.14.4及以上版本，其他版本无法使用。[&#x2F;warning]</p><p>首先还是一样，下载AltServer本体，然后像正常安装软件一样把AltServer拖进Applications文件夹里。</p><p>然后运行AltServer，跟在Windows上一样，只会在任务栏里显示一个图标。</p><p>同样连接好设备，选择“Install AltStore”&gt;你的设备名。这时会弹出要求安装一个邮件插件，按照指示前往“邮件”App安装并启用插件即可。（也就是利用这个插件替代了账号密码的身份验证过程。）</p><p>[info]启用插件的方法：“邮件”&gt;“通用”&gt;“管理插件”。[&#x2F;info]</p><p>然后再次前往AltServer安装AltStore，剩下的过程和Windows一模一样。</p><h2 id="绕开3个App限制的方法"><a href="#绕开3个App限制的方法" class="headerlink" title="绕开3个App限制的方法"></a>绕开3个App限制的方法</h2><p>在iOS 14.0 – 16.1.2（除了15.7.2）有一个漏洞（俗称bug，啊不对，特性?），被称为MacDirtyCow。</p><p>[info]iOS 16.2以及更新的版本修复了这个漏洞，不要有侥幸心理。[&#x2F;info]</p><p>有大神在此基础上开发了一个软件，可以在<a href="https://github.com/zhuowei/WDBRemoveThreeAppLimit/releases">GitHub</a>上下载。（还是那句话，下不下来多试几次，或者科学上网）</p><p>会下载下来一个.ipa格式的安装包，用AltStore把这个软件侧载上去。</p><p>[info]MacDirtyCow是一个漏洞，因此下载下来的文件可能会被报毒。如果被杀毒软件报毒，请添加信任后在下载一次。[&#x2F;info]</p><p>[info]虽然官网的教程写的是iOS 14.0 – 16.1.2，不过这个软件并不支持iOS 14.x。所以又一次没有截图?[&#x2F;info]</p><p>安装好这个软件后，点一下上面的“Go”。然后回到AltStore，找到“Settings”选项卡，先滚动到最底部，然后向上划三次。这时会多出一个选项，叫“Enforce 3 Apps Limit”。如果需要绕开限制，把这个选项关闭即可。</p><p>[warning]依然存在10个App ID的限制，在上面的教程中已经提到过。[&#x2F;warning]</p>]]></content>
    
    
    <categories>
      
      <category>AltStore</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AltStore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql实现按距离排序、范围查找</title>
    <link href="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    <url>/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql实现按距离排序、范围查找"><a href="#Mysql实现按距离排序、范围查找" class="headerlink" title="Mysql实现按距离排序、范围查找"></a>Mysql实现按距离排序、范围查找</h1><p>现在几乎所有的O2O应用中都会存在“按范围搜素、离我最近、显示距离”等等基于位置的交互，那这样的功能是怎么实现的呢？本文提供的实现方式，适用于所有数据库。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现过程主要分为四步：   </p><ol><li>搜索 <br>在数据库中搜索出接近指定范围内的商户，如：搜索出1公里范围内的。   </li><li>过滤 <br>搜索出来的结果可能会存在超过1公里的，需要再次过滤。如果对精度没有严格要求，可以跳过。   </li><li>排序 <br>距离由近到远排序。如果不需要，可以跳过。   </li><li>分页 <br>如果需要2、3步，才需要对分页特殊处理。如果不需要，可以在第1步直接SQL分页。</li></ol><p>第1步数据库完成，后3步应用程序完成。</p><p>为了方便下面说明，先给出一个初始表结构，我使用的是MySQL：</p><p><img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022180821084-1141286440.png"></p><h2 id="step1-搜索"><a href="#step1-搜索" class="headerlink" title="step1 搜索"></a>step1 搜索</h2><p>搜索可以用下面两种方式来实现。</p><h3 id="区间查找"><a href="#区间查找" class="headerlink" title="区间查找"></a>区间查找</h3><p>customer表中使用两个字段存储了经度和纬度，如果提前计算出经纬度的范围，然后在这两个字段上加上索引，那搜索性能会很不错。 <br>那怎么计算出经纬度的范围呢？已知条件是移动设备所在的经纬度，还有满足业务要求的半径，这很像初中的一道平面几何题：给定圆心坐标和半径，求该圆外切正方形四个顶点的坐标。而我们面对的是一个球体，可以使用<a href="https://github.com/locationtech/spatial4j">spatial4j</a>来计算。</p><p><img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022180905021-1403485682.png"></p><p><img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022180929615-603715276.png"></p><p>geohash的原理不讲了，详细可以看<a href="http://www.cnblogs.com/LBSer/p/3310455.html">这篇文章</a>，讲的很详细。geohash算法能把二维的经纬度编码成一维的字符串，它的特点是越相近的经纬度编码后越相似，所以可以通过前缀like的方式去匹配周围的商户。 <br>customer表要增加一个字段，来存储每个商户的geohash编码，并且建立索引。</p><p><img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022180956037-674314141.png"></p><p><img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022181016802-1620997722.png"></p><p> <img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022181042615-564048244.png"></p><p><img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022181202224-1107522791.png"></p><p><img src="/2025/04/16/Mysql%E5%AE%9E%E7%8E%B0%E6%8C%89%E8%B7%9D%E7%A6%BB%E6%8E%92%E5%BA%8F%E3%80%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%20-%20%E5%88%98%E6%9B%99%E5%B0%98%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/1218828-20171022181224537-190479827.png"></p><h2 id="step3-排序"><a href="#step3-排序" class="headerlink" title="step3 排序"></a>step3 排序</h2><p>同样，排序也需要在应用程序中处理。排序基于上面的过滤结果做就可以了<code>Collections.sort(list, comparator)</code>。</p><h2 id="step4-分页"><a href="#step4-分页" class="headerlink" title="step4 分页"></a>step4 分页</h2><p>如果需要2、3步，只能在内存中分页，做法也很简单，可以参考<a href="http://blog.csdn.net/ghsau/article/details/7243540">这篇文章</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>全文的重点都在于搜索如何实现，更好的利用数据库的索引，两种搜索方式以百万数据量为分割线，第一种适用于百万以下，第二种适用于百万以上，<code>未经过严格验证</code>。可能有人会有疑问，过滤和排序都在应用层做，内存占用会不会很严重？这是个潜在问题，但大多数情况下不会。看我们大部分的应用场景，都是单一种类POI(Point Of Interest)的搜索，如酒店、美食、KTV、电影院等等，这种数据密度是很小，1公里内的酒店，能有多少家，50家都算多的，所以最终要看具体业务数据密度。本文没有分析原理，只讲了具体实现，有关分析的文章可以看参考链接。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.infoq.com/cn/articles/depth-study-of-Symfony2">http://www.infoq.com/cn/articles/depth-study-of-Symfony2</a> <br><a href="http://tech.meituan.com/lucene-distance.html">http://tech.meituan.com/lucene-distance.html</a> <br><a href="http://blog.csdn.net/liminlu0314/article/details/8553926">http://blog.csdn.net/liminlu0314/article/details/8553926</a> <br><a href="http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates">http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates</a> <br><a href="http://www.cnblogs.com/LBSer/p/3310455.html">http://www.cnblogs.com/LBSer/p/3310455.html</a> <br><a href="http://cevin.net/geohash/">http://cevin.net/geohash/</a></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>spatial4j</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>spatial4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于mysql做距离筛选的两种方法</title>
    <link href="/2025/04/15/%E5%85%B3%E4%BA%8Emysql%E5%81%9A%E8%B7%9D%E7%A6%BB%E7%AD%9B%E9%80%89%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%20-%20%E9%99%8D%E6%B8%A9%E4%BA%86%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    <url>/2025/04/15/%E5%85%B3%E4%BA%8Emysql%E5%81%9A%E8%B7%9D%E7%A6%BB%E7%AD%9B%E9%80%89%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%20-%20%E9%99%8D%E6%B8%A9%E4%BA%86%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="关于mysql做距离筛选的两种方法-降温了-博客园"><a href="#关于mysql做距离筛选的两种方法-降温了-博客园" class="headerlink" title="关于mysql做距离筛选的两种方法 - 降温了 - 博客园"></a>关于mysql做距离筛选的两种方法 - 降温了 - 博客园</h1><h2 id="使用mysql自带的函数计算距离作为筛选条件"><a href="#使用mysql自带的函数计算距离作为筛选条件" class="headerlink" title="使用mysql自带的函数计算距离作为筛选条件"></a>使用mysql自带的函数计算距离作为筛选条件</h2><ul><li>这种方式是网上比较常见的，缺点很明显，不能使用索引，查询非常的慢，几万条数据量查询都慢的要死</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  @param :lat 纬度</span><br><span class="hljs-comment">*  @param :lon 经度</span><br><span class="hljs-comment">*  @param :dis 距离范围</span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">SELECT</span> a.<span class="hljs-operator">*</span>,ROUND(<span class="hljs-number">6378.138</span> <span class="hljs-operator">*</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-built_in">ASIN</span>(<span class="hljs-built_in">SQRT</span>(POW(<span class="hljs-built_in">SIN</span>((:lat <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <span class="hljs-operator">-</span> a.latitude <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>), <span class="hljs-number">2</span>) <span class="hljs-operator">+</span> <span class="hljs-built_in">COS</span>(:lat <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">*</span> <span class="hljs-built_in">COS</span>(a.latitude <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">*</span> POW(<span class="hljs-built_in">SIN</span>((:lon <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <span class="hljs-operator">-</span> a.longitude <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>), <span class="hljs-number">2</span>))) <span class="hljs-operator">*</span> <span class="hljs-number">1000</span>) <span class="hljs-keyword">AS</span> distance <span class="hljs-keyword">FROM</span> maoyan_cinema a <span class="hljs-keyword">WHERE</span> a.del_flag <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">HAVING</span> distance <span class="hljs-operator">&lt;</span> :dis <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> distance <span class="hljs-keyword">ASC</span><br><br><br></code></pre></td></tr></table></figure><h2 id="使用redis计算距离"><a href="#使用redis计算距离" class="headerlink" title="使用redis计算距离"></a>使用redis计算距离</h2><ul><li>先将数据库里的数据全部导入到redis（经纬度和主键）即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导入到redis部分代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">syncGeo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//查询经度纬度主键id保存在list</span><br>        List&lt;Object[]&gt; list = xxx.getStationPoint();<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(list) || list.size() &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Map&lt;Long, Point&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(hashMapInitialCapacity);<br>        <span class="hljs-keyword">for</span> (Object[] o : list) &#123;<br>            map.put(Long.parseLong(o[<span class="hljs-number">0</span>].toString()), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(Double.parseDouble(o[<span class="hljs-number">2</span>].toString()), Double.parseDouble(o[<span class="hljs-number">1</span>].toString())));<br>        &#125;<br>        <span class="hljs-type">GeoOperations</span> <span class="hljs-variable">geoOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForGeo();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">stations</span> <span class="hljs-operator">=</span> geoOperations.geoAdd(<span class="hljs-string">&quot;redisKeyGeo&quot;</span>, map);<br>        redisTemplate.expire(<span class="hljs-string">&quot;redisKeyGeo&quot;</span>, <span class="hljs-number">2</span>, TimeUnit.DAYS);<br>    &#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>保存完后在redis可视化工具可以看到<br>  <img src="/2025/04/15/%E5%85%B3%E4%BA%8Emysql%E5%81%9A%E8%B7%9D%E7%A6%BB%E7%AD%9B%E9%80%89%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%20-%20%E9%99%8D%E6%B8%A9%E4%BA%86%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/2169095-20220325154323367-42656464.png"></p></li><li><p>也可以使用命令行查看其中的某条记录<br>  <img src="/2025/04/15/%E5%85%B3%E4%BA%8Emysql%E5%81%9A%E8%B7%9D%E7%A6%BB%E7%AD%9B%E9%80%89%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%20-%20%E9%99%8D%E6%B8%A9%E4%BA%86%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/2169095-20220325151107218-966233511.png"></p></li><li><p>geo计算满足距离范围内主键id列表</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-string">&quot;入参经度&quot;</span>, <span class="hljs-string">&quot;入参纬度&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Distance</span>(<span class="hljs-string">&quot;距离范围&quot;</span>, Metrics.KILOMETERS));<br> <span class="hljs-comment">//这里限制1w条，可根据实际业务确定需要多少条数据</span><br> RedisGeoCommands.<span class="hljs-type">GeoRadiusCommandArgs</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().sortAscending().limit(<span class="hljs-number">10000</span>);<br> GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Integer&gt;&gt; results = geoOperations.geoRadius(<span class="hljs-string">&quot;redisKeyGeo&quot;</span>, circle, args);<br> Map&lt;Long, Double&gt; stationIdsAndDistance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br> List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;Integer&gt;&gt;&gt; content = results.getContent();<br><br></code></pre></td></tr></table></figure><ul><li>得到范围内的所有主键id,再使用mysql进行各种条件筛选。这种方式可以用到索引，测试geo计算距离也很快，只需要几毫秒</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>redis</category>
      
      <category>实用操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>redis</tag>
      
      <tag>实用操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经纬度计算距离</title>
    <link href="/2025/04/15/%E7%BB%8F%E7%BA%AC%E5%BA%A6%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%20%20Mophei&#39;s%20blog/"/>
    <url>/2025/04/15/%E7%BB%8F%E7%BA%AC%E5%BA%A6%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%20%20Mophei&#39;s%20blog/</url>
    
    <content type="html"><![CDATA[<h1 id="经纬度计算距离"><a href="#经纬度计算距离" class="headerlink" title="经纬度计算距离"></a>经纬度计算距离</h1><p>根据经纬度计算距离公式</p><p>其中:</p><ol><li><code>(Lng1, lat1)</code> 表示A点经纬度对应弧度，<code>(lng2, lat2)</code>表示B点经纬度对应弧度；</li><li>$a&#x3D;Lat1-Lat2$为两点纬度的弧度之差，$b&#x3D;Lng1-Lng2$为两点经度的弧度之差；</li><li>R为地球半径，$R&#x3D;6378.137km$</li><li>公式计算出来的结果单位为千米。若将半径改以米为单位，则计算的结果单位为米；</li><li>计算经度与谷歌地图的距离经度差不多，相差范围在0.2米以下</li><li>这种计算方式一般都是直线距离</li></ol><p>一般地图上显示的左边顺序为：纬度在前（范围-90 ~ 90），经度在后（范围-180 ~ 180）</p><p>使用SQL计算距离的代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>,<br>       <span class="hljs-number">6378.138</span> <span class="hljs-operator">*</span><span class="hljs-number">1000</span> <span class="hljs-operator">*</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-built_in">ASIN</span>(<span class="hljs-built_in">SQRT</span>(POW(<span class="hljs-built_in">SIN</span>((lat1 <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <span class="hljs-operator">-</span> lat2 <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>), <span class="hljs-number">2</span>) <span class="hljs-operator">+</span> <span class="hljs-built_in">COS</span>(lat1 <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">*</span> <span class="hljs-built_in">COS</span>(lat2 <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">*</span> POW(<span class="hljs-built_in">SIN</span>((lng1 <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <span class="hljs-operator">-</span> lng2 <span class="hljs-operator">*</span> PI() <span class="hljs-operator">/</span> <span class="hljs-number">180</span>) <span class="hljs-operator">/</span> <span class="hljs-number">2</span>), <span class="hljs-number">2</span>))) <span class="hljs-keyword">AS</span> distance<br><span class="hljs-keyword">FROM</span> distance<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> distance <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><p>使用JAVA计算距离的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">double</span> <span class="hljs-variable">EARTH_RADIUS</span> <span class="hljs-operator">=</span> <span class="hljs-number">6378137</span>;<span class="hljs-comment">//赤道半径</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">rad</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span>&#123;<br>    <span class="hljs-keyword">return</span> d * Math.PI / <span class="hljs-number">180.0</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">GetDistance</span><span class="hljs-params">(<span class="hljs-type">double</span> lon1,<span class="hljs-type">double</span> lat1,<span class="hljs-type">double</span> lon2, <span class="hljs-type">double</span> lat2)</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">radLat1</span> <span class="hljs-operator">=</span> rad(lat1);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">radLat2</span> <span class="hljs-operator">=</span> rad(lat2);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> radLat1 - radLat2;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> rad(lon1) - rad(lon2);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> *Math.asin(Math.sqrt(Math.pow(Math.sin(a/<span class="hljs-number">2</span>),<span class="hljs-number">2</span>)+Math.cos(radLat1)*Math.cos(radLat2)*Math.pow(Math.sin(b/<span class="hljs-number">2</span>),<span class="hljs-number">2</span>))); <br>    s = s * EARTH_RADIUS;    <br>   <span class="hljs-keyword">return</span> s;<span class="hljs-comment">//单位米</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Miniconda的安装和使用</title>
    <link href="/2025/03/02/Miniconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/03/02/Miniconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Miniconda的安装和使用"><a href="#Miniconda的安装和使用" class="headerlink" title="Miniconda的安装和使用"></a>Miniconda的安装和使用</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>参考文献 Miniconda Anaconda 简介 Miniconda和Anaconda都是Python环境管理工具，可以用于创建、管理和部署Python环境及其依赖的软件包。它们的主要区别在于其默认安装的软件包和所需空间的大小。 Miniconda 是一个轻量级的Python环境管理工具，仅包括</p></blockquote><hr><blockquote><p><strong>参考文献</strong></p><p><a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda</a> <a href="https://www.anaconda.com/">Anaconda</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介#"></a>简介<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#%E7%AE%80%E4%BB%8B">#</a></h2><p><code>Miniconda</code>和<code>Anaconda</code>都是Python环境管理工具，可以用于创建、管理和部署Python环境及其依赖的软件包。它们的主要区别在于其默认安装的软件包和所需空间的大小。</p><ul><li><p>Miniconda 是一个轻量级的Python环境管理工具，仅包括conda、Python及其所需的基本依赖库。因此，它的安装包大小较小，只有几十兆，相比于Anaconda更加灵活。用户可以根据自己的需要逐步安装所需的软件包，避免不必要的浪费。在需要安装新软件包时，可以使用conda install命令来安装所需的软件包。这使得Miniconda在轻量化、快速安装、定制化、跨平台方面具有优势。</p></li><li><p>Anaconda 是一个包含了数百个预安装软件包的Python环境管理工具，包括Python解释器、各种科学计算和数据分析库、可视化工具、深度学习框架等。Anaconda旨在为数据科学家和研究者提供一个完整的数据科学环境，可以直接安装并使用大量的数据科学工具。这也意味着，Anaconda的安装包非常大，通常需要几个GB的磁盘空间，安装所需的时间也较长。同时，由于默认安装了大量的软件包，如果不需要的话，可能会浪费磁盘空间和内存资源。</p></li></ul><p>综上所述，如果您需要一个灵活、快速、定制化的Python环境管理工具，并且希望自己安装所需的软件包，那么Miniconda可能更适合您。如果您需要一个预装有大量数据科学工具的环境，那么Anaconda可能更适合您。两者安装步骤几乎一致。</p><h2 id="1-安装-Miniconda"><a href="#1-安装-Miniconda" class="headerlink" title="1. 安装 Miniconda#"></a>1. 安装 Miniconda<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#1-%E5%AE%89%E8%A3%85-miniconda">#</a></h2><h3 id="1-1-Windows下安装"><a href="#1-1-Windows下安装" class="headerlink" title="1.1 Windows下安装#"></a>1.1 Windows下安装<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#11-windows%E4%B8%8B%E5%AE%89%E8%A3%85">#</a></h3><p>在 Windows 系统下安装 Miniconda，可以按照以下步骤进行：</p><ul><li><p>首先，从官网下载适合你 Windows 系统的 Miniconda 安装程序：<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>下载完成后，双击安装程序并按照提示进行安装。</p></li><li><p>安装过程中需要阅读并同意许可协议。</p></li><li><p>安装过程中需要选择 Miniconda 的安装路径。默认情况下是在 <code>C:\Users\&lt;username&gt;\Miniconda3</code> 目录下创建一个名为 <code>Miniconda3</code> 的目录。你也可以选择其他路径，根据提示进行选择。</p></li></ul><p>安装完成后，你就可以在终端中使用 conda 命令了，创建环境，安装依赖等操作都可以使用 conda 命令完成。</p><h3 id="1-2-macOS下安装"><a href="#1-2-macOS下安装" class="headerlink" title="1.2 macOS下安装#"></a>1.2 macOS下安装<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#12-macos%E4%B8%8B%E5%AE%89%E8%A3%85">#</a></h3><p>在 macOS 系统下安装 Miniconda，可以按照以下步骤进行：</p><ul><li><p>首先，从官网下载适合你 macOS 系统的 Miniconda 安装程序：<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>下载完成后，双击安装程序并按照提示进行安装。</p></li><li><p>安装过程中需要阅读并同意许可协议。</p></li><li><p>安装过程中需要选择 Miniconda 的安装路径。默认情况下是在用户目录下创建一个名为 <code>miniconda3</code> 的目录。你也可以选择其他路径，根据提示进行选择。</p></li><li><p>安装完成后，需要在终端中运行以下命令，以便 Miniconda 的环境变量生效：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bash_profile<br></code></pre></td></tr></table></figure><p>安装完成后，你就可以在终端中使用 conda 命令了，创建环境，安装依赖等操作都可以使用 conda 命令完成。</p><h3 id="1-3-Linux下安装"><a href="#1-3-Linux下安装" class="headerlink" title="1.3 Linux下安装#"></a>1.3 Linux下安装<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#13-linux%E4%B8%8B%E5%AE%89%E8%A3%85">#</a></h3><p>在 Linux 下安装 Miniconda，可以按照以下步骤进行：</p><ul><li><p>首先，从官网下载适合你 Linux 系统的 Miniconda 安装程序：<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>打开终端，进入下载目录，执行以下命令，安装 Miniconda：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：如果你下载的是不同版本的安装程序，文件名也会有所不同，请根据你下载的版本自行更改文件名。</p></blockquote><ul><li><p>执行安装命令后，会出现 Miniconda 许可协议的信息，按照提示阅读并同意协议，即输入<code>accept</code></p></li><li><p>接下来会提示你选择安装路径，默认情况下是在用户目录下创建一个名为 <code>miniconda3</code> 的目录。你也可以选择其他路径，根据提示进行选择。</p></li><li><p>安装完成后，终端中会出现提示，说明 Miniconda 已经安装成功。需要重新打开终端，以便 Miniconda 的环境变量生效。</p></li></ul><p>安装完成后，你就可以在终端中使用 conda 命令了，创建环境，安装依赖等操作都可以使用 conda 命令完成。</p><h2 id="2-配置-Miniconda"><a href="#2-配置-Miniconda" class="headerlink" title="2. 配置 Miniconda#"></a>2. 配置 Miniconda<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#2-%E9%85%8D%E7%BD%AE-miniconda">#</a></h2><ul><li><p>打开终端或 Anaconda Prompt（Windows 用户）。</p></li><li><p>创建并激活 conda 环境：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --name env_name conda activate env_name<br></code></pre></td></tr></table></figure><p>这里的 <code>env_name</code> 是你想要创建的环境名称。</p><ul><li>安装所需的包和工具：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install package_name<br></code></pre></td></tr></table></figure><p>这里的 package_name 是你想要安装的包名称。</p><ul><li>可以通过修改 .condarc 文件来修改默认的 conda 配置。</li></ul><blockquote><p>conda 配置文件的路径:</p><ul><li><p>Linux&#x2F;macOS: <code>~/.condarc</code> 或 <code>$HOME/.condarc</code></p></li><li><p>Windows: <code>USERPROFILE%.condarc</code> 或 <code>C:\Users\username.condarc</code></p></li></ul><p>其中，<code>%USERPROFILE%</code> 为 Windows 系统环境变量，表示当前用户的主目录路径，<code>username</code> 为当前用户名。</p></blockquote><h2 id="3-常用的-conda-命令"><a href="#3-常用的-conda-命令" class="headerlink" title="3. 常用的 conda 命令#"></a>3. 常用的 conda 命令<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#3-%E5%B8%B8%E7%94%A8%E7%9A%84-conda-%E5%91%BD%E4%BB%A4">#</a></h2><p>conda 是一个用于包管理和环境管理的工具，可以方便地创建、安装、升级和删除不同的软件包和其依赖项。以下是一些常用的 conda 命令：</p><ul><li>创建一个新的环境：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --name env_name<br></code></pre></td></tr></table></figure><p><code>env_name</code> 为你想要创建的环境名称。</p><ul><li>激活一个环境：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate env_name<br></code></pre></td></tr></table></figure><p><code>env_name</code> 为你想要激活的环境名称。</p><ul><li>在激活的环境中安装一个软件包：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install package_name<br></code></pre></td></tr></table></figure><p><code>package_name</code> 为你想要安装的软件包名称。</p><ul><li>列出当前环境中安装的所有软件包：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda list<br></code></pre></td></tr></table></figure><ul><li>列出所有可用的环境：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure><ul><li>更新 conda：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda update conda<br></code></pre></td></tr></table></figure><ul><li>更新所有已安装的软件包：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda update --all<br></code></pre></td></tr></table></figure><ul><li>从环境中删除一个软件包：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda remove package_name<br></code></pre></td></tr></table></figure><p><code>package_name</code> 为你想要删除的软件包名称。</p><blockquote><p>在使用conda创建虚拟环境时，默认会将虚拟环境的文件夹放在Anaconda&#x2F;Miniconda的安装路径下的envs文件夹中，具体路径为：</p><ul><li>Windows系统下：C:\Anaconda3\envs 或 C:\Users\你的用户名\Anaconda3\envs</li><li>Linux&#x2F;Mac系统下：&#x2F;home&#x2F;你的用户名&#x2F;anaconda3&#x2F;envs 或 &#x2F;Users&#x2F;你的用户名&#x2F;anaconda3&#x2F;envs</li></ul></blockquote><p>当然，你也可以使用conda config命令更改默认路径，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --add envs_dirs /path/to/new/envs/folder<br></code></pre></td></tr></table></figure><p>这个命令会在新路径下创建一个名为envs的文件夹，用来存储所有的虚拟环境。</p><h2 id="4-conda-换源"><a href="#4-conda-换源" class="headerlink" title="4. conda 换源#"></a>4. conda 换源<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#4-conda-%E6%8D%A2%E6%BA%90">#</a></h2><p>如果你在使用 conda 时遇到网络问题，可以将 conda 的源换成清华源（<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/%EF%BC%89%E3%80%82%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/）。具体步骤如下：</a></p><ul><li><p>打开终端或 Anaconda Prompt。</p></li><li><p>在命令提示符中输入以下命令：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --show # 显示当前 conda 配置 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ # 添加清华源的免费仓库 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ # 添加清华源的主要仓库 conda config --set show_channel_urls yes # 显示添加的所有仓库地址<br></code></pre></td></tr></table></figure><p>这会将清华源添加到你的 conda 配置文件中。</p><ul><li><p>执行 <code>conda update conda</code> 命令，以确保你的 conda 版本是最新的。</p></li><li><p>如果你要创建新的环境或安装新的软件包，请使用以下命令：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --name env_name package_name<br></code></pre></td></tr></table></figure><p><code>env_name</code> 为你想要创建的环境名称，<code>package_name</code> 为你想要安装的软件包名称。</p><blockquote><p>例如：<code>conda create -n pytorch python==3.8</code> 创建一个 pytorch 环境，pythoon 版本为3.8</p></blockquote><ul><li>如果你需要取消这些换源更改，可以使用以下命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --remove-key channels # 移除添加的仓库地址 conda config --set show_channel_urls no # 不再显示仓库地址<br></code></pre></td></tr></table></figure><p>除了清华源之外，还有不少其他的 conda 镜像源可以使用。以下是一些常用的 conda 镜像源及其地址：</p><ul><li>中科大镜像源：<a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/main/">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</a></li><li>阿里云镜像源：<a href="https://mirrors.aliyun.com/anaconda/pkgs/main/">https://mirrors.aliyun.com/anaconda/pkgs/main/</a></li><li>华为云镜像源：<a href="https://mirrors.huaweicloud.com/repository/anaconda/pkgs/main/">https://mirrors.huaweicloud.com/repository/anaconda/pkgs/main/</a></li><li>中国科学院开源协会镜像源：<a href="https://mirrors.opencas.cn/anaconda/pkgs/main/">https://mirrors.opencas.cn/anaconda/pkgs/main/</a></li><li>豆瓣镜像源：<a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></li></ul><p>如果你想切换到其他镜像源，可以使用类似于切换清华源的方法，将需要的镜像源地址添加到 conda 配置文件中。</p><blockquote><p>需要注意的是，不同的镜像源可能会有不同的速度和可靠性，建议根据自己的网络情况选择合适的镜像源。</p></blockquote><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结#"></a>5. 总结<a href="https://www.cnblogs.com/jijunhao/p/17235904.html#5-%E6%80%BB%E7%BB%93">#</a></h2><p>使用 conda 时，需要注意以下几点：</p><ol><li><strong>环境隔离</strong>：conda 可以创建虚拟环境来隔离不同的 Python 包和版本。在使用 conda 安装包时，需要确保安装在正确的环境中，以免出现冲突或版本不兼容的问题。可以使用 <code>conda env list</code> 查看当前存在的环境，使用 <code>conda activate env_name</code> 激活指定的环境。</li><li><strong>版本管理</strong>：conda 可以安装不同版本的 Python 包和库，并且可以轻松地切换不同版本之间。在安装新包或更新已有包时，需要注意是否与当前环境中的其他包兼容。可以使用 <code>conda search package_name</code> 命令查询指定包的可用版本，使用 <code>conda install package_name=version</code> 命令安装指定版本的包。</li><li><strong>包管理</strong>：conda 不仅可以安装 Python 包和库，还可以安装其他语言的依赖库和系统工具。在使用 conda 安装包时，需要注意包的来源和可靠性，以免下载和安装恶意软件。可以使用官方的 conda-forge 渠道来安装社区维护的包，也可以使用其他可信的镜像源。</li><li><strong>配置管理</strong>：conda 可以通过配置文件来管理镜像源、默认安装路径、自动激活环境等设置。在使用 conda 时，需要注意配置文件是否正确，以免出现安装失败或异常的问题。可以使用 <code>conda config --show</code> 命令查看当前的配置信息，使用 <code>conda config --set key=value</code> 命令修改指定的配置项。</li></ol><p>总之，在使用 conda 时，需要仔细阅读文档，遵循最佳实践，以免出现不必要的问题。以上就是一些常用的 conda 小技巧。</p>]]></content>
    
    
    <categories>
      
      <category>conda</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用好大模型?这5种实用的Prompt框架你一定要看看</title>
    <link href="/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/"/>
    <url>/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/</url>
    
    <content type="html"><![CDATA[<h1 id="用好大模型-这5种实用的Prompt框架你一定要看看"><a href="#用好大模型-这5种实用的Prompt框架你一定要看看" class="headerlink" title="用好大模型?这5种实用的Prompt框架你一定要看看!"></a>用好大模型?这5种实用的Prompt框架你一定要看看!</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大模型正为我们带来前所未有的技术革新，而用好大模型也是有一定技巧的。</p><p>本文主要分享<strong>5种</strong>实用的<code>Prompt</code>对话提示框架，结合自己的实际需求，让你能够灵活使用大模型!</p><h2 id="1-RTF框架"><a href="#1-RTF框架" class="headerlink" title="1.RTF框架"></a>1.RTF框架</h2><p><strong>RTF(Role-Task-Format)框架</strong>是一个非常简单通用的Prompt提示框架，我们和任意大模型对话场景下都可以使用该规范进行改进输出</p><ul><li>**R-Role(角色)**：指定大模型担当固定角色(程序员、数据分析师、讲解员、记者等等)</li><li><strong>T-Task(任务)</strong>: 任务，告诉大模型需要为我们做的事情</li><li>**F-Format(格式)**：大模型最终结果的返回格式(比如：表格、Markdown、英文等等)</li></ul><p>主要优点：</p><ul><li>简单、方便</li><li>指定Role角色，可以让大模型在当前的角色范围内回答知识，这在一些特定的领域中非常有效</li><li>指定Role角色也能让工程上检索知识能够确定边界范围，配合元数据所发挥的威力会更强</li><li>如果结合RAG知识内容检索，那么上下文回答的内容会让用户感觉更加是顺畅</li></ul><p><strong>示例1</strong>: <strong>给出一份Python语言的学习清单</strong></p><blockquote><p>Role：指定大模型角色为Python布道师</p><p>Task：Python语言的学习从基础到进阶清单列表</p><p>Format： 以表格的形式返回</p></blockquote><p><img src="/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/prompt-usecase1.png" alt="图1-实用RTF框架"></p><p>在实际工作的任务中，我通过优化Prompt工程，对于我们的产品改善，对于回答的内容改善也非常明显！</p><blockquote><p>在我司给宁波天一阁开发的AI讲解产品中，我们提供和大模型对话的RAG产品，将天一阁的相关知识导入到系统，借助大模型进行讲解回答</p></blockquote><p>对比以下两个Prompt的区别：</p><p>原Prompt：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">基于以下已知信息，简洁和专业的来回答天一阁相关的的问题。<br>如果无法从中得到答案，请说 <span class="hljs-string">&quot;根据已知信息无法回答该问题&quot;</span> 或 <span class="hljs-string">&quot;没有提供足够的相关信息&quot;</span>，不允许在答案中添加编造成分，答案请使用中文。<br><span class="hljs-section">问题:</span><br>&#123;&#125;<br><span class="hljs-section">已知内容:</span><br>&#123;&#125;<br></code></pre></td></tr></table></figure><p>改进后的Prompt：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">你是宁波天一阁的历史研究员，基于以下已知信息，简洁和专业的来回答天一阁相关的的问题。<br>如果无法从中得到答案，请根据根据实际回答，不要臆测内容，否则请说 <span class="hljs-string">&quot;根据已知信息无法回答该问题&quot;</span> 或 <span class="hljs-string">&quot;没有提供足够的相关信息&quot;</span>，不允许在答案中添加编造成分，答案请使用中文。<br><span class="hljs-section">问题:</span><br>&#123;&#125;<br><span class="hljs-section">已知内容:</span><br>&#123;&#125;<br></code></pre></td></tr></table></figure><p>改进后，大模型回答更加拟人化，如下图：</p><p><img src="/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/image.png" alt="图2-优化后的大模型Prompt"></p><h2 id="2-思考链模式"><a href="#2-思考链模式" class="headerlink" title="2.思考链模式"></a>2.思考链模式</h2><p>通过这种模式来逐步改善大模型的推理能力，非常<strong>适合一些复杂的任务处理</strong>。</p><p>例如：</p><ul><li>分析型或者逻辑推理型的任务</li><li>决策</li><li>解决问题(比如程序员根据错误日志找Bug)</li></ul><p>而要使用这种模式，<strong>只需要在末尾添加”让我们逐步思考”即可</strong>。</p><p><img src="/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/prompt-step.png" alt="图3-逐步推理模式应用"></p><h2 id="3-RISEN框架"><a href="#3-RISEN框架" class="headerlink" title="3. RISEN框架"></a>3. RISEN框架</h2><ul><li><strong>R-Role</strong>:大模型扮演的角色</li><li><strong>I-Instructions</strong>: 指示命令，和<code>Task-任务</code>差不多</li><li><strong>S-Steps</strong>: 步骤</li><li><strong>E-End Goal</strong>: 最终目标</li><li><strong>N-Narrowing(Constraints)</strong>: 缩小范围(约束条件)，和<code>RTF</code>框架中的<code>Format</code>有异曲同工之妙，一个是格式的约束，而这里的约束可以是任意方面，比如回答的内容(特定领域)、字数限制等等方面</li></ul><p>该框架主要适合：</p><ul><li>撰写具有特定约束的任务(例如博客文章)</li><li>有明确指导方针的任务（例如商业计划）</li></ul><p>示例：</p><p><img src="/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/use-prompt-risen.png" alt="图4-RISEN框架示例"></p><h2 id="4-RODES框架"><a href="#4-RODES框架" class="headerlink" title="4.RODES框架"></a>4.RODES框架</h2><ul><li>R-Role: 角色</li><li>O - Objective: 目标</li><li>D - Details: 详细的细节</li><li>E - Examples: 示例</li><li>S - Sense Check: 感官检查</li></ul><p>示例：</p><p><img src="/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/use-prompt-rodes.png" alt="图5-RODES框架示例"></p><h2 id="5-密度链模式"><a href="#5-密度链模式" class="headerlink" title="5.密度链模式"></a>5.密度链模式</h2><p>密度链模式<code>Prompt</code>是Salesforce、麻省理工学院和哥伦比亚大学的研究人员推出的一种新提示，它非常的高效,使用递归来创建越来越好的输出的提示，与普通提示生成的 GPT-4 摘要相比，它生成的摘要更加密集且更适合人们理解。</p><blockquote><p>这种模式在RAG工程中非常实用，想想看你的客户上传的文档知识库(PDF&#x2F;WORD)都是长篇的步骤性的文档,而在RAG召回送给大模型的Context上下文又受限于大模型的Token限制,为了更好的回答用户提问的问题，对于上传的知识库做密度链模式的摘要总结，然后索引整个文章内容召回是非常有必要的，最终能够非常精准的回答用户的问题。</p></blockquote><p>适合：</p><ul><li>总结</li><li>改进您最喜欢的提示</li><li>通过递归生成可用的长格式内容</li></ul><p>密度链模式的<code>Prompt</code>如下：</p><p><img src="/2025/02/25/%E7%94%A8%E5%A5%BD%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%BF%995%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84Prompt%E6%A1%86%E6%9E%B6%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9C%8B%E7%9C%8B!%20%E2%80%94%20%E5%85%AB%E4%B8%80%E8%8F%9C%E5%88%80/prompt-chain-density.png" alt="图6-Chain of Density(Cod)prompt"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br>文章: &#123;ARTICLE&#125;<br><br>您将为上述文章生成越来越简洁、实体密集的摘要。<br><br><br>重复以下2个步骤5次：<br><br><span class="hljs-bullet">- </span>步骤1:从文章中识别出先前生成的摘要中缺少的 1-3 个信息实体（以“;”分隔）。<br><span class="hljs-bullet">- </span>步骤2:写一个新的、长度相同的、更密集的摘要，其中涵盖先前摘要中的每个实体和细节以及缺失的内容实体。<br><br>缺少的实体是:<br><br><span class="hljs-bullet">- </span><span class="hljs-strong">**相关的:**</span>与主要故事相关，<br><span class="hljs-bullet">- </span><span class="hljs-strong">**具体的:**</span>描述具体而简洁（5个字或更少），<br><span class="hljs-bullet">- </span><span class="hljs-strong">**新颖的:**</span>不在之前的摘要中<br><span class="hljs-bullet">- </span><span class="hljs-strong">**务实的:**</span>存在于文章中<br><span class="hljs-bullet">- </span><span class="hljs-strong">**任何地方:**</span> 位于文章中的任何位置<br><br><span class="hljs-strong">**指南:**</span><br><br><span class="hljs-bullet">- </span>第一个摘要应该较长（4-5句，约80个词），但非常不具体，除了标记为缺失的实体外，几乎没有包含其他信息。使用过度冗长的语言和填充词（例如，“本文讨论”）以达到约80个词。<br><span class="hljs-bullet">- </span>让每个词都有意义：重新撰写前一个摘要以改善流畅性，并为额外的实体腾出空间。<br><span class="hljs-bullet">- </span>利用融合、压缩和删除诸如“文章讨论”的无信息短语，腾出空间。<br><span class="hljs-bullet">- </span>摘要应变得非常密集而简洁，但又是自包含的，例如，不需要阅读文章就能容易理解。<br><span class="hljs-bullet">- </span>缺失的实体可以出现在新摘要的任何位置。<br><span class="hljs-bullet">- </span>永远不要删除前一个摘要中的实体。如果无法腾出空间，就添加更少的新实体。<br><br>请记住，对于每个摘要都使用相同数量的词。<br><br>以JSON格式回答。JSON应该是一个字典列表（长度为5），其中键是“Missing_Entities”和“Denser_Summary”。<br><br></code></pre></td></tr></table></figure><p>关于密度链模式的Prompt论文可以参考：<a href="https://arxiv.org/pdf/2309.04269.pdf">https://arxiv.org/pdf/2309.04269.pdf</a></p><p>或者微信公众号回复”cod”获取文件</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Prompt</code>对话提示框架在大模型领域中是非常重要的一环,不管你是在直接使用大模型，还是在做RAG领域的产品开发,<code>Prompt</code>的重要程度都是无可替代的。</p><p>希望大家能根据本文列出的这5种<code>Prompt</code>框架进行举一反三，多多实践～</p><p>对于<code>Prompt</code>工程技术细节，可以阅读员外的这两篇文章:</p><ul><li><a href="https://www.luxiangdong.com/2023/08/08/prompt/">一文讲清楚实用Prompt工程</a></li><li><a href="https://www.luxiangdong.com/2023/08/08/advprompt/">高级prompt工程讲解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>RAG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RAG</tag>
      
      <tag>Prompt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI工程师学习计划</title>
    <link href="/2025/02/25/AI%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <url>/2025/02/25/AI%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="要符合上述AI工程师岗位要求，你需要系统学习以下知识和技能，并推荐相关教程与材料："><a href="#要符合上述AI工程师岗位要求，你需要系统学习以下知识和技能，并推荐相关教程与材料：" class="headerlink" title="要符合上述AI工程师岗位要求，你需要系统学习以下知识和技能，并推荐相关教程与材料："></a>要符合上述AI工程师岗位要求，你需要系统学习以下知识和技能，并推荐相关教程与材料：</h1><h3 id="1-Python编程"><a href="#1-Python编程" class="headerlink" title="1. Python编程"></a><strong>1. Python编程</strong></h3><ul><li><strong>学习内容</strong>：基础语法、数据结构、面向对象编程、常用库（NumPy、Pandas、Scikit-learn）。</li><li><strong>推荐资源</strong>：<ul><li><strong>书籍</strong>：《Python编程：从入门到实践》（Eric Matthes）、《利用Python进行数据分析》（Wes McKinney）。</li><li><strong>课程</strong>：Coursera <a href="https://www.coursera.org/specializations/python">Python for Everybody</a>、廖雪峰Python教程（中文免费）。</li><li><strong>实战</strong>：LeetCode刷题、Kaggle数据分析项目。</li></ul></li></ul><hr><h3 id="2-机器学习与深度学习"><a href="#2-机器学习与深度学习" class="headerlink" title="2. 机器学习与深度学习"></a><strong>2. 机器学习与深度学习</strong></h3><ul><li><strong>学习内容</strong>：监督&#x2F;无监督学习、模型评估、神经网络、CNN&#x2F;RNN、迁移学习等。</li><li><strong>推荐资源</strong>：<ul><li><strong>书籍</strong>：《机器学习》（周志华）、《深度学习》（花书，Ian Goodfellow）。</li><li><strong>课程</strong>：吴恩达 <a href="https://www.coursera.org/learn/machine-learning">Machine Learning</a>（Coursera）、<a href="https://www.coursera.org/specializations/deep-learning">Deep Learning Specialization</a>。</li><li><strong>框架</strong>：PyTorch官方教程（<a href="https://pytorch.org/tutorials/">PyTorch Tutorials</a>）、TensorFlow官方文档（<a href="https://www.tensorflow.org/guide">TF Guide</a>）。</li></ul></li></ul><hr><h3 id="3-NLP与大模型"><a href="#3-NLP与大模型" class="headerlink" title="3. NLP与大模型"></a><strong>3. NLP与大模型</strong></h3><ul><li><strong>学习内容</strong>：文本处理、Transformer架构、BERT&#x2F;GPT模型、Hugging Face库。</li><li><strong>推荐资源</strong>：<ul><li><strong>书籍</strong>：《自然语言处理综论》（Daniel Jurafsky）、《动手学深度学习》（李沐）。</li><li><strong>课程</strong>：Hugging Face <a href="https://huggingface.co/learn">NLP Course</a>、Stanford CS224N（B站有中文字幕）。</li><li><strong>实战</strong>：使用Hugging Face Transformers库复现论文模型，参与NLP竞赛（如Kaggle）。</li></ul></li></ul><hr><h3 id="4-Docker与部署"><a href="#4-Docker与部署" class="headerlink" title="4. Docker与部署"></a><strong>4. Docker与部署</strong></h3><ul><li><strong>学习内容</strong>：容器化原理、镜像构建、Docker Compose。</li><li><strong>推荐资源</strong>：<ul><li><strong>文档</strong>：<a href="https://docs.docker.com/">Docker官方文档</a>。</li><li><strong>实战</strong>：将训练好的模型封装为Docker镜像并部署到云服务器。</li></ul></li></ul><hr><h3 id="5-数据库与SQL"><a href="#5-数据库与SQL" class="headerlink" title="5. 数据库与SQL"></a><strong>5. 数据库与SQL</strong></h3><ul><li><strong>学习内容</strong>：SQL语法、数据库设计（MySQL&#x2F;PostgreSQL）、NoSQL基础。</li><li><strong>推荐资源</strong>：<ul><li><strong>课程</strong>：Coursera <a href="https://www.coursera.org/learn/sql-for-data-science">SQL for Data Science</a>。</li><li><strong>练习</strong>：LeetCode数据库题目、模拟业务场景设计表结构。</li></ul></li></ul><hr><h3 id="6-数据治理与行业知识"><a href="#6-数据治理与行业知识" class="headerlink" title="6. 数据治理与行业知识"></a><strong>6. 数据治理与行业知识</strong></h3><ul><li><strong>学习内容</strong>：数据清洗、数据质量管理、制造业数据特点。</li><li><strong>推荐资源</strong>：<ul><li><strong>书籍</strong>：《数据治理：工业企业数字化转型之道》。</li><li><strong>行业报告</strong>：阅读制造业AI应用案例（如工业4.0、预测性维护）。</li></ul></li></ul><hr><h3 id="7-专利与项目管理"><a href="#7-专利与项目管理" class="headerlink" title="7. 专利与项目管理"></a><strong>7. 专利与项目管理</strong></h3><ul><li><strong>学习内容</strong>：专利申请流程、技术文档撰写、敏捷开发、PMP基础。</li><li><strong>推荐资源</strong>：<ul><li><strong>专利</strong>：国家知识产权局公开课、《专利审查指南》。</li><li><strong>项目管理</strong>：Coursera <a href="https://www.coursera.org/professional-certificates/google-project-management">Google Project Management</a>（含PMP备考内容）。</li></ul></li></ul><hr><h3 id="8-软技能"><a href="#8-软技能" class="headerlink" title="8. 软技能"></a><strong>8. 软技能</strong></h3><ul><li><strong>PPT制作</strong>：学习《用图表说话》（Gene Zelazny），模仿大厂技术分享PPT。</li><li><strong>沟通协作</strong>：参与开源项目或团队项目，锻炼协作能力。</li></ul><hr><h3 id="学习路径建议"><a href="#学习路径建议" class="headerlink" title="学习路径建议"></a><strong>学习路径建议</strong></h3><ol><li><strong>基础阶段</strong>（1-3个月）：Python + 机器学习理论 + SQL。  </li><li><strong>进阶阶段</strong>（3-6个月）：深度学习框架 + NLP + Docker + 实战项目。  </li><li><strong>综合阶段</strong>（6个月+）：行业知识 + 专利&#x2F;项目管理 + 求职冲刺（优化简历和项目经历）。</li></ol><p>通过系统学习与项目实践（如Kaggle竞赛、GitHub开源贡献），逐步满足岗位要求。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rerank——RAG中百尺竿头更进一步的神器，从原理到解决方案</title>
    <link href="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Rerank——RAG中百尺竿头更进一步的神器，从原理到解决方案"><a href="#Rerank——RAG中百尺竿头更进一步的神器，从原理到解决方案" class="headerlink" title="Rerank——RAG中百尺竿头更进一步的神器，从原理到解决方案"></a>Rerank——RAG中百尺竿头更进一步的神器，从原理到解决方案</h1><blockquote><p>本文主要内容：</p><ul><li><p>为什么一般情况下RAG的检索相关性存在问题？</p></li><li><p>Rerank为什么可以解决这个问题？</p></li><li><p>几种常用Rerank组合评测；</p></li><li><p>如何在自己的产品中使用Rerank？</p></li></ul></blockquote><p>检索增强生成（RAG）是解决大语言模型（LLM）实际使用中的一套完整的技术，它可以有效解决LLM的三个主要问题：<strong>数据时效性</strong>、<strong>幻觉</strong>和<strong>数据安全问题</strong>（在我之前的文章《大模型主流应用RAG的介绍——从架构到技术细节》中有详细介绍）。但是随着RAG越来越火热，使用者越来越多，我们也会发现用的好的人&#x2F;团队其实还是不多的。这也是RAG常被人吐槽的一点：<strong>入门简单，用好却非常难！</strong></p><p>对于RAG的效果，我们之前已经做了很多方面的优化了，包括：</p><ul><li><p><strong>优化内容提取的方法</strong>：从源头解决内容提取的有效性，包括文本内容、表格内容（保留制表符）和图片内容（OCR识别）等，可以参看我之前的文章《完全指南——使用python提取PDF中的文本信息（包括表格和图片OCR）》；</p></li><li><p><strong>优化chunking</strong>：从最开始的512固定长度切分，到后面的句切分，再到后面的NLTK和SpaCy，具体可参见我之前写的《最详细的文本分块(Chunking)方法——可以直接影响基于LLM应用效果》；</p></li><li><p><strong>再之后是优化embedding模型</strong>：Embedding模型的选择其实很魔性，我们在优化过程中也会不断否定之前的一些判断。比如我们最开始用m3e，后面用bge，再后面还用了通义千问的embedding模型。总体来说，收费的通义千问还是好一些，但是不明显，有些方面却不如bge。最近一朋友也向我推荐了Jina embedding模型，不过他们的中文模型需要12月份才出来；</p></li><li><p><strong>我们还优化了其他一些过程</strong>：比如prompt模板、关键词摘要、元数据存储等。</p></li></ul><p>这些优化确实给我们带来了非常好的效果，但不够！我们在一些客户的实践过程中，还是发现相关性效果不佳，甚至造成了其中一个客户选择了其他方案（使用RAG+GPT-4的方案）。</p><p>我们还是坚持用国产大模型（如Baichuan2-13B、ChatGLM3-6B和QWen-14B等），毕竟主要服务的还是国内客户，加上现在接触的多数客户其实都有私有化部署的需求。所以我们进行了一段时间的探索，发现我们还有一项很有效的优化没有去做——ReRank。</p><p>所以，虽然Rerank优化我们还在做，但是今天我们可以先聊聊ReRank这个话题。</p><h2 id="为什么需要Rerank"><a href="#为什么需要Rerank" class="headerlink" title="为什么需要Rerank"></a>为什么需要Rerank</h2><p>我们发现，在10月中旬之前，国内外的互联网上很难发现Rerank相关的话题。有少量人提到了，但是基本上都没有提到解决方案。我和小明在讨论Rerank的时候其实是先从提问题开始的。</p><h3 id="Elasticsearch中的相似度检索算法"><a href="#Elasticsearch中的相似度检索算法" class="headerlink" title="Elasticsearch中的相似度检索算法"></a>Elasticsearch中的相似度检索算法</h3><p>前面说了，我们自己的RAG产品之前是存在一些相关性问题的，其他方面能优化的我们觉得也基本上优化的差不多了，除了我们采用的国产大模型在通用能力上和ChatGPT-3.5&#x2F;4是存在差距的。我们发现的最大的问题就是使用elasticsearch的<strong>retrieval</strong>召回的内容相关度有问题，多数情况下score最高的chunk相关度没问题，但是top2-5的相关度就很随机了，这是最影响最终结果的。</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.webp" alt="图片"></p><p>图1：elasticsearch8.4的knn使用方式  </p><p>我们看了elasticsearch的相似度算法，es用的是KNN算法（开始我们以为是暴力搜索），但仔细看了一下，在es8的相似度检索中，用的其实是基于HNSW（分层的最小世界导航算法），HNSW是有能力在几毫秒内从数百万个数据点中找到最近邻的。</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.1.webp" alt="图片"></p><p>图2：elasticsearch实际使用的是HNSW算法  </p><h3 id="HNSW带来的随机性问题"><a href="#HNSW带来的随机性问题" class="headerlink" title="HNSW带来的随机性问题"></a>HNSW带来的随机性问题</h3><p>我们想象这么一个场景：你昨天刚在其他地方看到过一本新书，你想在图书馆找到类似的书。K-最近邻（KNN）算法的逻辑是浏览书架上的每一本书，并将它们从最相似到最不相似的顺序排列，以确定最相似的书（最有可能是你昨天看过的那本）。这也就是我们常说的暴力搜索，你有耐心做这么麻烦的工作吗？相反，如果我们对图书馆中的图书进行预排序和索引，要找到与你昨天看过的新书相似的书，你所需要做的就是去正确的楼层，正确的区域，正确的通道找到相似的书。</p><p>此外，<strong>你通常不需要对前10本相似的书进行精确排名，比如100%、99%或95%的匹配度</strong>，而是通通先拿回来。这就是<strong>近似近邻（ANN）</strong>的思想。你应该注意到了，这里已经出现了一些随机性——不做匹配分数的排名。但是这些准确度上的损失是为了让检索效率更快，<strong>为了显著降低计算成本，它牺牲了找到绝对最近邻的保证，这算是在计算效率和准确性之间取得平衡</strong>。</p><p>ANN算法目前主要有三种：</p><ul><li><p><strong>基于图的算法创建数据的图</strong>表示，最主要的就是**分层可导航小世界图算法(HNSW)**。</p></li><li><p><strong>基于哈希的算法</strong>：流行的算法包括:位置敏感哈希（LSH）、多索引哈希（MIH）；</p></li><li><p><strong>基于树的算法</strong>：流行的是kd树、球树和随机投影树（RP树）。对于低维空间（≤10），基于树的算法是非常有效的。</p></li></ul><p>HNSW借鉴了跳表（Skip List）的思路。跳表是一种数据结构，用于维护一组已排序的元素，并允许进行高效的搜索、插入和删除操作。它是由William Pugh在1989年发明的。图(3)显示了数字[3、6、7、9、12、17、19、21、25、26]的排序链表。假设我们想找到目标19。当值小于目标时，我们向右移动，如果是传统的方式，需要6步才能找到它。</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.2.webp" alt="图片"></p><p>图3：链表中查找数据  </p><p>但是我们在每个节点增加向后的指向指针，比如列表中每三个其他节点都有一个指向后面三个节点的指针，如图(4)所示，那么只需要3步就可以到达19</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.3.webp" alt="图片"></p><p>图4：跳表每三个节点就设置一个多指向指针节点，可以让搜索速度明显加快，如果我们再增加这个指针节点数量呢？  </p><p>这就是small world的底层思路，说回到小世界（small world）网络，它是一种特殊的网络，在这种网络中，你可以快速地联系到网络中的其他人或点。这有点像“凯文·培根的六度”(Six Degrees of Kevin Bacon)游戏，在这个游戏中，你可以通过一系列其他演员，在不到六个步骤的时间里，将任何演员与凯文·培根联系起来。想象一下，你有一群朋友排成一个圆圈，如图5所示。每个朋友都与坐在他们旁边的人直接相连。我们称它为“原始圆”。</p><p>现在，这就是奇迹发生的地方。你可以随机选择将其中一些连接改变给圆圈中的其他人，就像图5中的红色连接线一样。这就像这些连接的“抢椅子”游戏。有人跳到另一把椅子上的几率用概率p表示。如果p很小，移动的人就不多，网络看起来就很像原来的圆圈。但如果p很大，很多人就会跳来跳去，网络就会变得有点混乱。当您选择正确的p值(不太小也不太大)时，红色连接是最优的。网络变成了一个小世界网络。你可以很快地从一个朋友转到另一个朋友(这就是“小世界”的特点)。</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.4.webp" alt="图片"></p><p>图5：small world网络结构  </p><p>现在我们要扩展到高维空间，图中的每个节点都是一个高维向量。在高维空间中，搜索速度会变慢。这是不可避免的“维度的诅咒”。HNSW是一种高级数据结构，用于优化高维空间中的相似性搜索。让我们看看HNSW如何构建图的层次结构。HNSW从图(6)中的第0层这样的基础图开始。它通常使用<strong>随机初始化数据点</strong>来构建。</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.5.webp" alt="图片"></p><p>图6：HNSW的结构示例  </p><p>这里大家要注意再次出现了”<strong>随机</strong>“，所以，为了检索的快速，HNSW算法会存在一些随机性，反映在实际召回结果中，最大的影响就是返回结果中top_K并不是我们最想要的，至少这K个文件的排名并不是我们认为的从高分到低分排序的。</p><h3 id="Rerank可以在小范围内逐一计算分值"><a href="#Rerank可以在小范围内逐一计算分值" class="headerlink" title="Rerank可以在小范围内逐一计算分值"></a>Rerank可以在小范围内逐一计算分值</h3><p><strong>因为在搜索的时候存在随机性，这应该就是我们在RAG中第一次召回的结果往往不太满意的原因</strong>。但是这也没办法，如果你的索引有数百万甚至千万的级别，那你只能牺牲一些精确度，换回时间。这时候我们可以做的就是增加<code>top_k</code>的大小，比如从原来的10个，增加到30个。然后再使用更精确的算法来做rerank，使用一一计算打分的方式，做好排序。比如30次的遍历相似度计算的时间，我们还是可以接受的。</p><p><em>关于HNSW的内容，大家可以点击文章左下角的”</em>_<strong>阅读原文</strong>_<em>“，里面有一篇比较详细的HNSW的文章介绍。</em></p><h2 id="主要的Reank方式评测"><a href="#主要的Reank方式评测" class="headerlink" title="主要的Reank方式评测"></a>主要的Reank方式评测</h2><h3 id="评测方法"><a href="#评测方法" class="headerlink" title="评测方法"></a>评测方法</h3><p>为了衡量我们的检索系统的有效性，我们主要依赖于两个被广泛接受的指标:<strong>命中率</strong>和**平均倒数排名(MRR)**。让我们深入研究这些指标，了解它们的重要性以及它们是如何运作的。我们来解释一下这两个指标：</p><ul><li><p><strong>命中率</strong>：Hit rate计算在前k个检索文档中找到正确答案的查询比例。简单来说，它是关于我们的系统在前几次猜测中正确的频率。</p></li><li><p>**平均倒数排名(MRR)**：对于每个查询，MRR通过查看排名最高的相关文档的排名来评估系统的准确性。具体来说，它是所有查询中这些排序的倒数的平均值。因此，如果第一个相关文档是顶部结果，则倒数排名为1;如果是第二个，倒数是1&#x2F;2，以此类推。</p></li></ul><h3 id="评测结果"><a href="#评测结果" class="headerlink" title="评测结果"></a>评测结果</h3><p>具体的评测过程大家可以看[我的Blog里面《提升RAG…》这篇]，也是llamaindex最近刚刚发布的一篇著名rerank评测文章，我这里就不具体展开了，直接用他们的结果。评测采用的是<strong>embedding模型</strong> + <strong>rerank模型</strong>的方式进行的。</p><p>以下是使用的模型:</p><p><strong>Embedding模型</strong>:</p><ul><li><p>OpenAI Embedding</p></li><li><p>Voyage Embedding</p></li><li><p>CohereAI Embedding (v2.0&#x2F; v3.0)</p></li><li><p>Jina Embeddings</p></li><li><p>BAAI&#x2F;bge-large-en</p></li></ul><p><strong>Rerank模型</strong>:</p><ul><li><p>CohereAI</p></li><li><p>bge-reranker-base</p></li><li><p>bge-reranker-large</p></li></ul><blockquote><p>值得一提的是，这些结果为这个特定数据集和任务的性能提供了坚实的见解。但是，实际结果可能会根据数据特征、数据集大小和其他变量(如chunk_size、similarity_top_k等)而有所不同。</p></blockquote><p>下表展示了基于<strong>命中率</strong>和<strong>MRR</strong>指标的评估结果:</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.6.webp" alt="图片"></p><p>图7：测试结果  </p><p>我对LlamaIndex的评测结果做一个简单总结：</p><ul><li><p><strong>目前rerank模型里面，最好的应该是cohere，不过它是收费的。开源的是智源发布的bge-reranker-base和bge-reranker-large。bge-reranker-large的能力基本上接近cohere，而且在一些方面还更好；</strong></p></li><li><p><strong>几乎所有的Embeddings都在重排之后显示出更高的命中率和MRR，所以rerank的效果是非常显著的；</strong></p></li><li><p><strong>embedding模型和rerank模型的组合也会有影响，可能需要开发者在实际过程中去调测最佳组合。</strong></p></li></ul><h2 id="我们可以如何使用Rerank"><a href="#我们可以如何使用Rerank" class="headerlink" title="我们可以如何使用Rerank"></a>我们可以如何使用Rerank</h2><p>目前最无脑的方式就是使用bge-reranker-large，我们可以在<a href="https://huggingface.co/BAAI/bge-reranker-large/tree/main">https://huggingface.co/BAAI/bge-reranker-large/tree/main</a> 上找到models文件，下载安装。我已经下载了：</p><p><img src="/2025/02/24/Rerank%E2%80%94%E2%80%94RAG%E4%B8%AD%E7%99%BE%E5%B0%BA%E7%AB%BF%E5%A4%B4%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%8C%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/640.7.webp" alt="图片"></p><p>图8：bge-reranker-large的models文件，大约4.5GB  </p><p>这两天要给它安装起来，测测我们的产品rerank之后的效果。</p><p>其实还有一种比较简单的方式，这种方式其实是从上面的原理中得出来的：</p><ul><li><p>第一次召回不精确，是因为要对抗时间过长，所以使用了ANN等方法；</p></li><li><p>那么，我们是否可以在已经得到top_k的情况下，使用KNN这种暴力检索（逐个计算相似度，打分）来做一个精准排序，然后取top_n。假设这里k&#x3D;30，n&#x3D;5.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>RAG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RAG</tag>
      
      <tag>Rerank</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最详细的文本分块(Chunking)方法——可以直接影响基于LLM应用效果</title>
    <link href="/2025/02/24/%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E6%9C%AC%E5%88%86%E5%9D%97(Chunking)%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BD%B1%E5%93%8D%E5%9F%BA%E4%BA%8ELLM%E5%BA%94%E7%94%A8%E6%95%88%E6%9E%9C/"/>
    <url>/2025/02/24/%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E6%9C%AC%E5%88%86%E5%9D%97(Chunking)%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BD%B1%E5%93%8D%E5%9F%BA%E4%BA%8ELLM%E5%BA%94%E7%94%A8%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="最详细的文本分块-Chunking-方法——可以直接影响基于LLM应用效果"><a href="#最详细的文本分块-Chunking-方法——可以直接影响基于LLM应用效果" class="headerlink" title="最详细的文本分块(Chunking)方法——可以直接影响基于LLM应用效果"></a>最详细的文本分块(Chunking)方法——可以直接影响基于LLM应用效果</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>基于大模型的应用中，最大的需求应该就是RAG，里面涉及很多技术环节，本文主要讲述了其中的文本分块Chunking环节，包括为什么分块、分块的方法，以及一些工程化优化的方式。</p></blockquote><hr><blockquote><p>本文主要内容：</p><ul><li><p>RAG中涉及的技术环节</p></li><li><p>什么是分块</p></li><li><p>分块需要考虑的四种因素</p></li><li><p>分块的多种方法</p></li></ul></blockquote><h2 id="RAG是一个考验技术的工作"><a href="#RAG是一个考验技术的工作" class="headerlink" title="RAG是一个考验技术的工作"></a>RAG是一个考验技术的工作</h2><p>这两周发的文章大模型偏多，但如果你有阅读过前面的文章，你会发现我其实不是为了说大模型而说大模型（有点绕），我更多的是在写怎么解决企业应用中真正的难题。这个真正难题我在前面的文章中<a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484135&idx=1&sn=82e93f5c69f11b60f3e8bb1afb5d5107&chksm=e846a036df31292022d31320db7b50b381519d24d405489be821257df7deb9f95630f090f590&scene=21#wechat_redirect">《一些LLM的声音总结》</a>中提到过，基于大模型的企业应用中很大一部分需求就是RAG——检索增强生成。</p><p><img src="/2025/02/24/%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E6%9C%AC%E5%88%86%E5%9D%97(Chunking)%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BD%B1%E5%93%8D%E5%9F%BA%E4%BA%8ELLM%E5%BA%94%E7%94%A8%E6%95%88%E6%9E%9C/640.webp" alt="图片"></p><p>这个流程依然无法描述RAG的复杂性  </p><p>RAG涉及的内容其实广泛，包括Embedding、分词分块、检索召回（相似度匹配）、chat系统、ReAct和Prompt优化等，最后还有与LLM的交互，整个过程技术复杂度很高。如果你用的LLM非常好，反而大模型这一块是你最不需要关心的。而这些环节里面我们每个都没达到1（比如0.9、0.7…），那么最终的结果可能是这些小数点的乘积。如果我们每个环节都可以做到&gt;1.0，那么最终的结果会比上一个结果高出很多。</p><p>今天我们来聊聊分块，很重要的一个环节（没有哪个环节不重要），但它也许是我们容易做到高质量的一个环节。</p><h2 id="什么是分块？"><a href="#什么是分块？" class="headerlink" title="什么是分块？"></a>什么是分块？</h2><p>在构建RAG这类基于LLM的应用程序中，分块（chunking）是将大块文本分解成小段的过程。当我们使用LLM embedding内容时，这是一项必要的技术，可以帮助我们优化从向量数据库被召回的内容的准确性。在本文中，我们将探讨它是否以及如何帮助提高RAG应用程序的效率和准确性。</p><p><img src="/2025/02/24/%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E6%9C%AC%E5%88%86%E5%9D%97(Chunking)%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BD%B1%E5%93%8D%E5%9F%BA%E4%BA%8ELLM%E5%BA%94%E7%94%A8%E6%95%88%E6%9E%9C/svg_3E.svg" alt="图片"></p><p>Pinecone是领先的向量数据库供应商  </p><p>在向量数据库（如：Pinecone）中索引的任何内容都需要首先Embedding（可以看我上一篇文章<a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484246&idx=1&sn=c0b4f64e829bc336d516b4c79bbda19c&chksm=e846a187df31289169516fdf09ebfc3235dfcc11f467cf9541b022b2f3381a5c464db37f4da6&scene=21#wechat_redirect">大模型应用中大部分人真正需要去关心的核心——Embedding</a>）。分块的主要原因是尽量减少我们<strong>Embedding内容的噪音</strong>。</p><p>例如，在语义搜索中，我们索引一个文档语料库，每个文档包含一个特定主题的有价值的信息。通过使用有效的分块策略，我们可以确保搜索结果准确地捕获用户查询的需求本质。如果我们的块太小或太大，可能会导致不精确的搜索结果或错过展示相关内容的机会。根据经验，如果文本块尽量是语义独立的，也就是没有对上下文很强的依赖，这样子对语言模型来说是最易于理解的。因此，为语料库中的文档<strong>找到最佳块大小对于确保搜索结果的准确性和相关性至关重要</strong>。</p><p>另一个例子是会话Agent。我们使用embedding的块为基于知识库的会话agent构建上下文，该知识库将代理置于可信信息中。在这种情况下，对分块策略做出正确的选择很重要，原因有两个：</p><ul><li><p>首先，它将决定上下文是否与我们的prompt相关。</p></li><li><p>其次，考虑到我们可以为每个请求发送的tokens数量的限制，它将决定我们是否能够在将检索到的文本合并到prompt中发送到大模型(如OpenAI)。</p></li></ul><p>在某些情况下，比如使用具有32k上下文窗口的GPT-4时，拟合块可能不是问题。尽管如此，当我们使用非常大的块时，我们需要注意，因为这可能会对我们从向量数据库获得的结果的相关性产生不利影响。</p><p>在这篇文章中，我们将探讨几种分块方法，并讨论在选择分块大小和方法时应该考虑的权衡。最后，我们将给出一些建议，以确定适合您的应用程序的最佳块大小和方法。</p><h2 id="Embedding长短内容"><a href="#Embedding长短内容" class="headerlink" title="Embedding长短内容"></a>Embedding长短内容</h2><p>当我们在嵌入内容（也就是embedding）时，我们可以根据内容是短（如句子）还是长（如段落或整个文档）来预测不同的行为。</p><p>当嵌入一个<strong>句子</strong>时，生成的向量集中在句子的特定含义上。当与其他句子Embedding进行比较时，自然会在这个层次上进行比较。这也意味着Embedding可能会错过在段落或文档中找到的更广泛的上下文信息。</p><p>当嵌入一个<strong>完整的段落或文档</strong>时，Embedding过程既要考虑整个上下文，也要考虑文本中句子和短语之间的关系。这可以产生更全面的向量表示，从而捕获文本的更广泛的含义和主题。另一方面，较大的输入文本大小可能会引入噪声或淡化单个句子或短语的重要性，从而在查询索引时更难以找到精确的匹配。</p><p>查询的长度也会影响Embeddings之间的关系。较短的查询，如单个句子或短语，将专注于细节，可能更适合与句子级Embedding进行匹配。跨越多个句子或段落的较长的查询可能更适合段落或文档级别的Embedding，因为它可能会寻找更广泛的上下文或主题。</p><p>索引也可能是非同质的，并且包含“不同”大小的块的Embedding。这可能会在查询结果相关性方面带来挑战，但也可能产生一些积极的后果。一方面，由于长内容和短内容的语义表示不一致，查询结果的相关性可能会波动。另一方面，非同构索引可能捕获更大范围的上下文和信息，因为不同的块大小表示文本中的不同粒度级别。这可以更灵活地容纳不同类型的查询。</p><h2 id="分块需要考虑的因素"><a href="#分块需要考虑的因素" class="headerlink" title="分块需要考虑的因素"></a>分块需要考虑的因素</h2><p>在确定最佳分块策略时，有几个因素会对我们的选择起到至关重要的影响。以下是一些事实我们需要首先记在心里：</p><ol><li><p><strong>被索引内容的性质是什么?</strong> 这可能差别会很大，是处理较长的文档(如文章或书籍)，还是处理较短的内容(如微博或即时消息)？答案将决定哪种模型更适合您的目标，从而决定应用哪种分块策略。</p></li><li><p><strong>您使用的是哪种Embedding模型，它在多大的块大小上表现最佳？</strong>例如，sentence-transformer<del>[1]</del>模型在单个句子上工作得很好，但像<strong>text- embedt-ada -002</strong><del>[2]</del>这样的模型在包含256或512个tokens的块上表现得更好。</p></li><li><p><strong>你对用户查询的长度和复杂性有什么期望？</strong>用户输入的问题文本是简短而具体的还是冗长而复杂的？这也直接影响到我们选择分组内容的方式，以便在嵌入查询和嵌入文本块之间有更紧密的相关性。</p></li><li><p><strong>如何在您的特定应用程序中使用检索结果？</strong> 例如，它们是否用于<strong>语义搜索</strong>、<strong>问答</strong>、<strong>摘要</strong>或<strong>其他目的</strong>？例如，和你底层连接的LLM是有直接关系的，LLM的tokens限制会让你不得不考虑分块的大小。</p></li></ol><p>没有最好的分块策略，只有适合的分块策略，为了确保查询结果更加准确，有时候我们甚至需要选择性地使用几种不同的策略。</p><h2 id="分块的方法"><a href="#分块的方法" class="headerlink" title="分块的方法"></a>分块的方法</h2><p>分块有不同的方法，每种方法都可能适用于不同的情况。通过检查每种方法的优点和缺点，我们的目标是确定应用它们的正确场景。</p><h3 id="固定大小分块"><a href="#固定大小分块" class="headerlink" title="固定大小分块"></a>固定大小分块</h3><p>这是最常见、最直接的分块方法：</p><p>我们只需决定块中的tokens的数量，以及它们之间是否应该有任何重叠。一般来说，<strong>我们会在块之间保持一些重叠，以确保语义上下文不会在块之间丢失</strong>。在<strong>大多数情况下，固定大小的分块将是最佳方式</strong>。与其他形式的分块相比，固定大小的分块在计算上更加经济且易于使用，因为它在分块过程中不需要使用任何NLP库。</p><p>下面是一个使用LangChain执行固定大小块处理的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;...&quot;</span> <span class="hljs-comment"># your text</span><br><span class="hljs-keyword">from</span> langchain.text_splitter <span class="hljs-keyword">import</span> CharacterTextSplitter<br>text_splitter = CharacterTextSplitter(<br>    separator = <span class="hljs-string">&quot;\n\n&quot;</span>,<br>    chunk_size = <span class="hljs-number">256</span>,<br>    chunk_overlap  = <span class="hljs-number">20</span><br>)<br>docs = text_splitter.create_documents([text])<br></code></pre></td></tr></table></figure><h3 id="Content-Aware：基于内容意图分块"><a href="#Content-Aware：基于内容意图分块" class="headerlink" title="Content-Aware：基于内容意图分块"></a>Content-Aware：基于内容意图分块</h3><p>这是一系列方法的组合，利用我们正在分块的内容的性质，并对其应用更复杂的分块。下面是一些例子:</p><h4 id="句分割——Sentence-splitting"><a href="#句分割——Sentence-splitting" class="headerlink" title="句分割——Sentence splitting"></a>句分割——Sentence splitting</h4><p>正如我们之前提到的，许多模型都针对Embedding句子级内容进行了优化。当然，我们会使用句子分块，有几种方法和工具可以做到这一点，包括:</p><ul><li><strong>Naive splitting:</strong> 最幼稚的方法是用句号(。) 和 “换行”来分割句子。虽然这可能是快速和简单的，但这种方法不会考虑到所有可能的边缘情况。这里有一个非常简单的例子:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;...&quot;</span> <span class="hljs-comment"># 你的文本</span><br>docs = text.split(<span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>NLTK</strong><del>[3]</del>: 自然语言工具包(NLTK)是一个流行的Python库，用于处理自然语言数据。它提供了一个句子标记器，可以将文本分成句子，帮助创建更有意义的分块。例如，要将NLTK与LangChain一起使用，您可以这样做:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;...&quot;</span> <span class="hljs-comment"># 你的文本</span><br><span class="hljs-keyword">from</span> langchain.text_splitter <span class="hljs-keyword">import</span> NLTKTextSplitter<br>text_splitter = NLTKTextSplitter()<br>docs = text_splitter.split_text(text)<br></code></pre></td></tr></table></figure><ul><li><strong>spaCy</strong><del>[4]</del>: spaCy是另一个用于NLP任务的强大Python库。它提供了一个复杂的句子分割功能，可以有效地将文本分成单独的句子，从而在生成的块中更好地保存上下文。例如，要将space与LangChain一起使用，您可以这样做:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;...&quot;</span> <span class="hljs-comment"># 你的文本</span><br><span class="hljs-keyword">from</span> langchain.text_splitter <span class="hljs-keyword">import</span> SpacyTextSplitter<br>text_splitter = SpaCyTextSplitter()<br>docs = text_splitter.split_text(text)<br></code></pre></td></tr></table></figure><p><img src="/2025/02/24/%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E6%9C%AC%E5%88%86%E5%9D%97(Chunking)%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BD%B1%E5%93%8D%E5%9F%BA%E4%BA%8ELLM%E5%BA%94%E7%94%A8%E6%95%88%E6%9E%9C/svg_3E.svg" alt="图片"></p><p>spacy-llm package  </p><h4 id="递归分割"><a href="#递归分割" class="headerlink" title="递归分割"></a>递归分割</h4><p>递归分块使用一组分隔符以分层和迭代的方式将输入文本分成更小的块。如果分割文本开始的时候没有产生所需大小或结构的块，那么这个方法会使用不同的分隔符或标准对生成的块递归调用，直到获得所需的块大小或结构。这意味着虽然这些块的大小并不完全相同，但它们仍然会逼近差不多的大小。</p><p>这里有一个例子，如何配合LangChain使用递归分块:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&quot;...&quot;</span> <span class="hljs-comment"># 你的文本</span><br><span class="hljs-keyword">from</span> langchain.text_splitter <span class="hljs-keyword">import</span> RecursiveCharacterTextSplitter<br>text_splitter = RecursiveCharacterTextSplitter(<br>    <span class="hljs-comment"># 设置一个非常小的块大小。</span><br>    chunk_size = <span class="hljs-number">256</span>,<br>    chunk_overlap  = <span class="hljs-number">20</span><br>)<br><br>docs = text_splitter.create_documents([text])<br></code></pre></td></tr></table></figure><h4 id="专门的分块"><a href="#专门的分块" class="headerlink" title="专门的分块"></a>专门的分块</h4><p>Markdown和LaTeX是您可能遇到的结构化和格式化内容的两个例子。在这些情况下，可以使用专门的分块方法在分块过程中保留内容的原始结构。</p><p><img src="/2025/02/24/%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%87%E6%9C%AC%E5%88%86%E5%9D%97(Chunking)%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BD%B1%E5%93%8D%E5%9F%BA%E4%BA%8ELLM%E5%BA%94%E7%94%A8%E6%95%88%E6%9E%9C/svg_3E.svg" alt="图片"></p><p>本文就是用markdown写作的  </p><ul><li><strong>Markdown</strong>: Markdown是一种轻量级的标记语言，通常用于格式化文本。通过识别Markdown语法(例如，标题、列表和代码块)，您可以根据其结构和层次结构智能地划分内容，从而生成语义更连贯的块。例如:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain.text_splitter <span class="hljs-keyword">import</span> MarkdownTextSplitter<br>markdown_text = <span class="hljs-string">&quot;...&quot;</span><br><br>markdown_splitter = MarkdownTextSplitter(chunk_size=<span class="hljs-number">100</span>, chunk_overlap=<span class="hljs-number">0</span>)<br>docs = markdown_splitter.create_documents([markdown_text])<br></code></pre></td></tr></table></figure><ul><li><strong>LaTex</strong>: LaTeX是一种文档准备系统和标记语言，通常用于学术论文和技术文档。通过解析LaTeX命令和环境，您可以创建尊重内容逻辑组织的块(例如，节、子节和方程)，从而产生更准确和上下文相关的结果。例如:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain.text_splitter <span class="hljs-keyword">import</span> LatexTextSplitter<br>latex_text = <span class="hljs-string">&quot;...&quot;</span><br>latex_splitter = LatexTextSplitter(chunk_size=<span class="hljs-number">100</span>, chunk_overlap=<span class="hljs-number">0</span>)<br>docs = latex_splitter.create_documents([latex_text])<br></code></pre></td></tr></table></figure><h2 id="确定应用程序的最佳块大小"><a href="#确定应用程序的最佳块大小" class="headerlink" title="确定应用程序的最佳块大小"></a>确定应用程序的最佳块大小</h2><p>如果常见的分块方法(如固定分块)不容易适用于您的用例，这里有一些指针可以帮助您找到最佳的块大小。</p><ul><li><p><strong>清洗数据</strong> ：在确定应用程序的最佳块大小之前，您需要首先预处理清洗数据以确保质量。例如，如果您的数据是从web爬取的，您可能需要删除HTML标记或特定的元素，保证文本的“纯洁”，减少文本的噪音。</p></li><li><p><strong>选择一个范围的块大小</strong> ：一旦你的数据被预处理，下一步是选择一个范围的潜在块大小进行测试。如前所述，选择时应考虑内容的性质(例如短文本还是长文档)、将要使用的Embedding模型及其功能(如token限制)。目标是在保留上下文和保持准确性之间找到平衡。从探索各种块大小开始，包括较小的块(例如，128或256个tokens)用于捕获更细粒度的语义信息，较大的块(例如，512或1024个tokens)用于保留更多上下文。</p></li><li><p><strong>评估每个块大小的性能</strong> ：很傻，但是很稳重的一种方式。为了测试不同大小的块，您可以把不同大小的块进行标记。使用可以覆盖你的业务场景效果的数据集，为要测试的各个大小的块创建Embedding，并将它们保存下来。然后，你可以运行一系列查询来评估质量，并比较不同块大小的性能。这是一个反复测试的过程，在这个过程中，针对不同的查询测试不同的块大小，直到找到最佳的块大小。</p></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>好了，说了这么多，最后我要说的结论你可能会失望，那就是我们自己也还没有找到最佳的分块方式，哈哈。但是对于不同的业务场景，我们现在比刚开始做RAG应用的时候会有经验很多了。</p><blockquote><p>引用：</p><p><em>1.sentence-transformer：<a href="https://huggingface.co/sentence-transformers">https://huggingface.co/sentence-transformers</a></em></p><p><em>2.text- embedt-ada -002：<a href="https://openai.com/blog/new-and-improved-embedding-model">https://openai.com/blog/new-and-improved-embedding-model</a></em></p><p><em>3.NLTK：<a href="https://www.nltk.org/">https://www.nltk.org/</a></em></p><p><em>4.spaCy：<a href="https://spacy.io/">https://spacy.io/</a></em></p><p><em>5.Chunking Strategies for LLM Applications：<a href="https://www.pinecone.io/learn/chunking-strategies/">https://www.pinecone.io/learn/chunking-strategies/</a></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>RAG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RAG</tag>
      
      <tag>Chunking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大模型应用中大部分人真正需要去关心的核心——Embedding</title>
    <link href="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/"/>
    <url>/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/</url>
    
    <content type="html"><![CDATA[<h1 id="大模型应用中大部分人真正需要去关心的核心——Embedding"><a href="#大模型应用中大部分人真正需要去关心的核心——Embedding" class="headerlink" title="大模型应用中大部分人真正需要去关心的核心——Embedding"></a>大模型应用中大部分人真正需要去关心的核心——Embedding</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>对于大部分人，在大模型的各类技术中，你最应该关注的是embedding，应为这是基于大模型应用的核心组件之一，甚至是最重要的组件。</p></blockquote><hr><blockquote><p>本文你大概会看到以下内容：</p><ul><li><p>大模型的主要应用场景</p></li><li><p>主流中文embedding模型</p></li><li><p>embedding的技术原理</p></li><li><p>几种语义相似度算法</p></li><li><p>在生产环境中使用embedding的案例</p></li></ul></blockquote><p>我们现在一说到大模型，往往说的就是ChatGPT、Llama，或者国产的ChatGLM、文心一言等等。但是，那些大模型一般只属于大厂，对于大部分人来说，我们更多的角色是大模型的使用者，或者是基于大模型来开发应用。</p><p>大模型主要应用  </p><p>目前如果是就文本方面，大模型应用主要聚焦在两类：  </p><ul><li><p><strong>问答（chat）机器人</strong>：这部分目前也是大模型最被人所知的应用，但chat功能我们已经有ChatGPT、Claude、文心一言、通义千问等一众产品可以用，对于大部分人来说，我们是消费者；  </p></li><li><p><strong>企业检索应用</strong>：企业应用中最常见的就是更高级的检索，我们可以一般叫它检索增强生成（RAG），这个场景在企业本地化应用中比较受欢迎，可以保护企业数据安全，又可以让企业借助AI提升生产效率。</p></li></ul><p>而在企业检索应用中，我相信做过这一块应用的人都会遇到embedding的问题，你的embedding模型会直接影响检索和生成的效率，虽然它不是唯一的影响因素。</p><p>主流中文embedding模型</p><p>现在主流的中文embedding模型其实也不是太多，以下就是主要的embedding模型了，目前我们用的m3e，但效果感觉还有待提升。排名上看，BGE好像还比较不错。当然，包括像阿里的商用embedding模型也是不错的，1500+维的。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.webp" alt="图片"></p><p>本文我们从基础开始，了解一下向量Embeddings的人工智能搜索功能。使用的是Redis的功能，学习和创建模型。  </p><p>以下文章内容参考了《Vector Embeddings: From the Basics to Production》<a href="https://partee.io/2022/08/11/vector-embeddings/%EF%BC%8C%E8%8B%B1%E6%96%87%E5%A5%BD%E7%9A%84%E5%90%8C%E5%AD%A6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%9C%8B%E5%8E%9F%E6%96%87%E3%80%82">https://partee.io/2022/08/11/vector-embeddings/，英文好的同学也可以直接看原文。</a></p><p>我去研究embedding的原因，是因为我们想自己研发一个适用于我们业务场景的embedding模型。  </p><h2 id="向量Embedding"><a href="#向量Embedding" class="headerlink" title="向量Embedding"></a>向量Embedding</h2><p>什么是向量Embedding?简单地说，向量Embedding是可以表示许多类型数据的数字列表。</p><p>向量Embedding非常灵活，包括音频、视频、文本和图像都可以表示为向量Embedding。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.1.webp" alt="图片"></p><p>从不同类型的数据创建向量Embedding的过程：音频，文本，视频。  </p><p>为了解释为什么Embedding提供了这样的实用程序，让我们看一下以前处理文本数据(如表格数据中的分类值)的方法。数据科学家有时会使用one-hot编码等方法将分类特征转换为数值。这些编码将为每种类型的类别创建一个列。值为1表示项目属于该列指定的类别。相反，值为0表示项目不属于该类别。</p><p>例如，考虑书籍类型:“小说”、“非小说”和“传记”。每一种体裁都可以编码成一个热向量，然而，这样的向量会非常稀疏，因为书籍通常只属于两个体裁。下图显示了这种编码是如何工作的。注意这里0的数量是1的两倍。对于像图书类型这样的类别，随着更多的类型被添加到数据集中，这种稀疏性将会呈指数级恶化。</p><p>稀疏性会给机器学习模型带来挑战。对于每一种新的类型，编码表示的大小都会增长，因此数据集的计算成本会变得很高。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.2.webp" alt="图片"></p><p>One-hot（独热）编码示例  </p><p>对于图书类型，或者任何具有相对较少类别的分类数据，我们可以使用简单的one-hot编码，但是，对于整个英语语言呢?对于这种规模的语料库，这种编码方法将变得不切实际。</p><p><strong>进入向量Embedding</strong>。</p><p>向量Embedding呈现固定大小的表示，不随数据中观测值的数量而增长。由模型创建的结果向量，通常是384个浮点值，比其他编码方法(如one-hot编码)的表示密度要高得多。这意味着在更少的字节中存在更多的信息，因此在计算上的利用成本更低。正如您稍后将读到的，这些密集表示可以用于多种目的，例如反向图像搜索、聊天机器人、问答和推荐系统。</p><h2 id="创建向量Embedding"><a href="#创建向量Embedding" class="headerlink" title="创建向量Embedding"></a>创建向量Embedding</h2><p>为了理解向量Embedding是如何创建的，对现代深度学习模型的简要介绍是有帮助的。</p><p>机器学习模型不使用非结构化数据。为了使模型能够理解文本或图像，我们必须将它们转换为数字表示。在机器学习之前，这样的表示通常是通过Feature Engineering“手工”创建的。</p><p>随着深度学习的出现，复杂数据中的非线性特征交互是由模型学习而不是人工设计的。当一个输入遍历深度学习模型时，该输入数据的新表示将以不同的形状和大小创建。每一层通常关注输入的不同方面。深度学习的这一方面，从输入中“自动”生成特征表示，构成了如何创建向量Embedding的基础。</p><p>例如，考虑在ImageNet数据集上训练的著名的ResNet模型。ResNet是一种卷积神经网络(CNN)，通常用于与图像相关的任务。在这种情况下，ResNet被训练来预测图像中的对象属于1000个类中的哪一个。</p><p>在训练过程中，ResNet将捕获图像中存在的特征信息，通过将图像传递给多个卷积层、池化层和完全连接层。这些图层将捕获边缘、线条和角等特征，并将它们分组到传递给下一个图层的“桶”中。由于CNN的空间不变特性，无论边缘或直线出现在图像的哪个位置，这些特征都将始终映射到相同的桶。这些层将通过模型的层变得越来越小，直到一个由1000个浮点值组成的完全连接的层作为输出。每个值代表1000个类中的1个。该值越高，图像中的对象属于该类的概率就越大。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.3.webp" alt="图片"></p><p>简单卷积神经网络(CNN)示意图  </p><p>ResNet和其他类似的图像分类模型回答了这个问题:“这个图像中是什么类型的对象?”然而，这些分类在回答诸如“哪些图像与此图像相似?”之类的prompts时用处不大。对于这个问题，我们需要一起比较图像。尽管没有专门针对这项任务进行训练，ResNet仍然很有用，因为它可以捕获图像的密集表示。</p><p>简单地说，CNN和其他类似的模型学习有用的数据表示，以执行图像分类等任务。当输入通过模型的各个层时，可以提取这些表示。被提取的层，也称为潜在空间，通常是靠近模型输出的层。在上图中，这可能是包含768或500个隐藏单位的图层。提取的层或潜在空间提供了一个密集的表示，其中包含有关当前特征的信息，这对于视觉相似性搜索等任务在计算上是可行的。</p><p>这是向量Embedding。</p><p>存在大量的预训练模型，可以很容易地用于创建向量Embedding。Huggingface Model Hub (<a href="https://huggingface.co/models)%E5%8C%85%E5%90%AB%E8%AE%B8%E5%A4%9A%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%B8%BA%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%9B%E5%BB%BAEmbedding%E3%80%82%E4%BE%8B%E5%A6%82%EF%BC%8Call-MiniLM-L6-v2%E6%A8%A1%E5%9E%8B%E6%98%AF%E5%9C%A8%E7%BA%BF%E6%89%98%E7%AE%A1%E5%92%8C%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86%E6%88%96%E5%AE%89%E8%A3%85%E3%80%82">https://huggingface.co/models)包含许多模型，可以为不同类型的数据创建Embedding。例如，all-MiniLM-L6-v2模型是在线托管和运行的，不需要专业知识或安装。</a></p><p>像<code>sentence_transformers</code>这样的包，也来自HuggingFace，为语义相似度搜索、视觉搜索等任务提供了易于使用的模型。要使用这些模型创建Embeddings，只需要几行Python代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>from<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>sentence_transformers<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>SentenceTransformer<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>model<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>SentenceTransformer(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;sentence-transformers/all-MiniLM-L6-v2&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>sentences<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>[<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;That<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>very<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>Person&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;That<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>Happy<span class="hljs-symbol">&amp;nbsp;</span>Dog&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Today<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>sunny<span class="hljs-symbol">&amp;nbsp;</span>day&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>embeddings<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>model.encode(sentences)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="语义相似度搜索的向量Embedding"><a href="#语义相似度搜索的向量Embedding" class="headerlink" title="语义相似度搜索的向量Embedding"></a>语义相似度搜索的向量Embedding</h2><p>语义相似搜索是将文本片段进行比较，以找出包含最相似含义的文本的过程。虽然这对普通人来说似乎很容易，但语言是相当复杂的。将非结构化文本数据提炼成机器学习模型可以理解的格式一直是许多自然语言处理研究人员的研究主题。</p><p>向量Embeddings为任何人提供了一种执行语义相似搜索的方法，而不仅仅是NLP研究人员或数据科学家。它们提供了一种有意义的、计算效率高的数字表示，可以通过预先训练的模型“开箱即用”来创建。下面是一个语义相似度的例子，它概述了用上面所示的<code>sentence_transformers</code>库创建的向量Embedding。</p><p>让我们看看下面的句子:</p><ul><li><p>“That is a happy dog（那是一只快乐的狗）”</p></li><li><p>“That is a very happy person（那是一个非常幸福的人）”</p></li><li><p>“Today is a sunny day（今天是个晴天）”</p></li></ul><p>这些句子中的每一个都可以转换成向量Embedding。下面是一个简化的表示，突出显示了这些示例句子在二维向量空间中相对于彼此的位置。这对于从视觉上衡量我们的Embedding如何有效地表示文本的语义意义非常有用。下文将详细介绍。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.4.webp" alt="图片"></p><p>向量Embeddings投影到二维的简化图  </p><p>假设我们要将这些句子与“那是一个快乐的人”进行比较。首先，我们为查询语句创建向量Embedding。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>from<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>sentence_transformers<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>SentenceTransformer<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>model<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>SentenceTransformer(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;sentence-transformers/all-MiniLM-L6-v2&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#<span class="hljs-symbol">&amp;nbsp;</span>create<span class="hljs-symbol">&amp;nbsp;</span>the<span class="hljs-symbol">&amp;nbsp;</span>vector<span class="hljs-symbol">&amp;nbsp;</span>embedding<span class="hljs-symbol">&amp;nbsp;</span>for<span class="hljs-symbol">&amp;nbsp;</span>the<span class="hljs-symbol">&amp;nbsp;</span>query<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>query_embedding<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>model.encode(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;That<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>person&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来，我们需要比较查询向量Embedding和数据集中的向量Embedding之间的距离。</p><p>有很多方法可以计算向量之间的距离。当涉及到语义搜索时，每种方法都有自己的优点和缺点，但我们将在另一篇文章中讨论。下面显示了一些常见的距离度量。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.5.webp" alt="图片"></p><p>用于计算向量相似度的距离度量。  </p><p>在这个例子中，我们将使用余弦相似度来度量两个向量的内积空间之间的距离。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.6.webp" alt="图片"></p><p>余弦相似度公式  </p><p>在Python中，这看起来像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>def<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>cosine_similarity<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>(a,<span class="hljs-symbol">&amp;nbsp;</span>b)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>np.dot(a,<span class="hljs-symbol">&amp;nbsp;</span>b)/(norm(a)*norm(b))<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在我们的查询向量和上图中的其他三个向量之间运行这个计算，我们可以确定句子之间的相似程度。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.7.webp" alt="图片"></p><p>2D图显示了之前从我们的句子中创建的向量Embeddings之间的余弦相似性</p><p>你可能已经猜到，“That is a very happy person（那是一个非常幸福的人）”和“That is a happy person（那是一个幸福的人）”是最相似的句子。这个例子只捕获了向量Embeddings的许多可能用例中的一个:<em>语义相似搜索</em></p><p>下面列出了运行整个示例的Python代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>numpy<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>as<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>np<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>from<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>numpy.linalg<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>norm<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>from<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>sentence_transformers<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>SentenceTransformer<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#<span class="hljs-symbol">&amp;nbsp;</span>Define<span class="hljs-symbol">&amp;nbsp;</span>the<span class="hljs-symbol">&amp;nbsp;</span>model<span class="hljs-symbol">&amp;nbsp;</span>we<span class="hljs-symbol">&amp;nbsp;</span>want<span class="hljs-symbol">&amp;nbsp;</span>to<span class="hljs-symbol">&amp;nbsp;</span>use<span class="hljs-symbol">&amp;nbsp;</span>(it&#x27;ll<span class="hljs-symbol">&amp;nbsp;</span>download<span class="hljs-symbol">&amp;nbsp;</span>itself)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>model<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>SentenceTransformer(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;sentence-transformers/all-MiniLM-L6-v2&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>sentences<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>[<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;That<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>very<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>person&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;That<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>dog&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Today<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>sunny<span class="hljs-symbol">&amp;nbsp;</span>day&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#<span class="hljs-symbol">&amp;nbsp;</span>vector<span class="hljs-symbol">&amp;nbsp;</span>embeddings<span class="hljs-symbol">&amp;nbsp;</span>created<span class="hljs-symbol">&amp;nbsp;</span>from<span class="hljs-symbol">&amp;nbsp;</span>dataset<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>embeddings<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>model.encode(sentences)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#<span class="hljs-symbol">&amp;nbsp;</span>query<span class="hljs-symbol">&amp;nbsp;</span>vector<span class="hljs-symbol">&amp;nbsp;</span>embedding<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>query_embedding<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>model.encode(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;That<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>person&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#<span class="hljs-symbol">&amp;nbsp;</span>define<span class="hljs-symbol">&amp;nbsp;</span>our<span class="hljs-symbol">&amp;nbsp;</span>distance<span class="hljs-symbol">&amp;nbsp;</span>metric<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>def<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>cosine_similarity<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>(a,<span class="hljs-symbol">&amp;nbsp;</span>b)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>np.dot(a,<span class="hljs-symbol">&amp;nbsp;</span>b)/(norm(a)*norm(b))<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>#<span class="hljs-symbol">&amp;nbsp;</span>run<span class="hljs-symbol">&amp;nbsp;</span>semantic<span class="hljs-symbol">&amp;nbsp;</span>similarity<span class="hljs-symbol">&amp;nbsp;</span>search<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>print(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Query:<span class="hljs-symbol">&amp;nbsp;</span>That<span class="hljs-symbol">&amp;nbsp;</span>is<span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>person&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>for<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>e,<span class="hljs-symbol">&amp;nbsp;</span>s<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>zip(embeddings,<span class="hljs-symbol">&amp;nbsp;</span>sentences):<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>print(s,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;<span class="hljs-symbol">&amp;nbsp;</span>-<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span>similarity<span class="hljs-symbol">&amp;nbsp;</span>score<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>cosine_similarity(e,<span class="hljs-symbol">&amp;nbsp;</span>query_embedding))<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在安装<code>NumPy</code>和<code>sentence_transformers</code>之后，运行这个脚本应该会得到以下计算结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>Query:<span class="hljs-symbol">&amp;nbsp;</span>That<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>is<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>person<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>That<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>is<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>very<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>person<span class="hljs-symbol">&amp;nbsp;</span>-<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span>similarity<span class="hljs-symbol">&amp;nbsp;</span>score<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0.94291496<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>That<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>is<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>happy<span class="hljs-symbol">&amp;nbsp;</span>dog<span class="hljs-symbol">&amp;nbsp;</span>-<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span>similarity<span class="hljs-symbol">&amp;nbsp;</span>score<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0.69457746<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>Today<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>is<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>a<span class="hljs-symbol">&amp;nbsp;</span>sunny<span class="hljs-symbol">&amp;nbsp;</span>day<span class="hljs-symbol">&amp;nbsp;</span>-<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span>similarity<span class="hljs-symbol">&amp;nbsp;</span>score<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0.25687605<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该脚本的结果应该与所选模型在HuggingFace inference API上看到的结果一致。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.8.webp" alt="图片"></p><p>HuggingFace推理API相似度结果  </p><h2 id="向量Embedding搜索在生产环境中的使用"><a href="#向量Embedding搜索在生产环境中的使用" class="headerlink" title="向量Embedding搜索在生产环境中的使用"></a>向量Embedding搜索在生产环境中的使用</h2><p>开发和生产是两个不同的东西，在学习了更多之后，你可能会开始问这样的问题:</p><ul><li><p>我把这些向量存储在哪里?</p></li><li><p>API应该是什么样子?</p></li><li><p>如何将其与过滤等传统搜索功能结合起来?</p></li></ul><p>幸运的是，开发Redis的好人们决定为你找出这些问题，并将向量相似搜索(VSS)功能构建到现有的reresearch模块中。这基本上把Redis变成了一个低延迟的向量数据库。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.9.webp" alt="图片"></p><p>Redis是一个量数据库  </p><p>VSS功能是作为reresearch模块的新功能而构建的。它允许开发人员像在Redis散列中存储任何其他字段一样轻松地存储向量。它提供了在大型向量空间中执行低延迟搜索所需的高级索引和搜索功能，通常分布在许多机器上的向量从数万到数亿不等。</p><p>Redis现在支持两种类型的向量索引:</p><ol><li><p>Flat</p></li><li><p>分级可导航小世界(HNSW)</p></li></ol><p>以及3个距离度量:</p><ol><li><p><code>LP</code> —— 欧几里得距离</p></li><li><p><code>IP</code> —— 内积</p></li><li><p><code>cos</code> —— 余弦相似度(如上图所示)</p></li></ol><p>下面是一个使用<code>redis -py</code>在向量被加载到Redis后创建索引的例子。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>from<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>redis<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>Redis<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>from<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>redis.commands.search.field<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>VectorField,<span class="hljs-symbol">&amp;nbsp;</span>TagField<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>def<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>create_flat_index<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>(redis_conn:<span class="hljs-symbol">&amp;nbsp;</span>Redis,<span class="hljs-symbol">&amp;nbsp;</span>number_of_vectors:<span class="hljs-symbol">&amp;nbsp;</span>int,<span class="hljs-symbol">&amp;nbsp;</span>distance_metric:<span class="hljs-symbol">&amp;nbsp;</span>str=<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;COSINE&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>image_field<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>VectorField(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;img_vector&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;FLAT&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;TYPE&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;FLOAT32&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;DIM&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;DISTANCE_METRIC&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>distance_metric,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;INITIAL_CAP&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>number_of_vectors,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;BLOCK_SIZE&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>number_of_vectors&#125;)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>redis_conn.ft().create_index([image_field])<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>索引只需要创建一次，当新的哈希值存储在Redis中时，索引会自动重新索引。在将向量加载到Redis中并创建索引之后，就可以为各种基于相似性的搜索任务形成和执行查询。</p><p>索引只需要创建一次，当新的哈希值存储在Redis中时，索引会自动重新索引。在将向量加载到Redis中并创建索引之后，就可以为各种基于相似性的搜索任务形成和执行查询。</p><p>更好的是，所有现有的reresearch功能，如文本、标签和基于地理的搜索，都可以与VSS功能协同工作。这被称为“混合查询”。对于混合查询，传统的搜索功能可以用作向量搜索的预过滤器，这可以帮助限制搜索空间。</p><p>上面的索引创建函数(<code>create_flat_index</code>)可以很容易地通过添加新字段(如<code>redis-py</code>中的<code>TagField</code>或<code>TextField</code>)来支持混合查询。</p><h2 id="Redis-VSS演示"><a href="#Redis-VSS演示" class="headerlink" title="Redis VSS演示"></a>Redis VSS演示</h2><p>最近，我构建了一个web应用程序来探索这些功能。Fashion Product Finder利用了Redis中新的VSS功能，以及我最喜欢的Redis生态系统的其他部分，如<code>redis-om-python</code>。您可以访问应用程序在这里。</p><p>注册使用该应用程序后，您将看到如下所示的页面。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.10.webp" alt="图片"></p><p>时尚产品查找应用程序，使用由Redis提供的向量相似度搜索  </p><p>要通过文本表示查询类似的产品，请找到您喜欢的产品并单击<code>by text</code>。同样，要通过视觉向量搜索查询，请单击产品上的<code>by Image</code>按钮。</p><p>可以为产品的性别和类别设置混合搜索属性，以便在执行向量搜索时，返回的项目将通过这些标记进行过滤。下面是选择右下角黑色手表时的视觉向量搜索示例。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E4%BA%BA%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E5%8E%BB%E5%85%B3%E5%BF%83%E7%9A%84%E6%A0%B8%E5%BF%83%E2%80%94%E2%80%94Embedding/640.11.webp" alt="图片"></p><p>通过图片查询类似手表后的搜索结果为黑色G-Shock手表。  </p><p>这个演示是一种探索Redis VSS功能的有趣方式，然而，这并不是应用程序中使用的Redis生态系统的唯一组件。事实上，<strong>Redis是这个应用程序使用的唯一数据库</strong>，用RedisJSON存储产品元数据，用RediSearch存储向量数据。</p><p>有关Redis和reresearch模块中VSS的更多信息，您可以查看以下资源:</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><p>VSS Documentation：<a href="https://redis.io/docs/stack/search/reference/vectors/">https://redis.io/docs/stack/search/reference/vectors/</a></p></li><li><p>Redis Stack Documentation：<a href="https://partee.io/2022/08/11/vector-embeddings/Redis">https://partee.io/2022/08/11/vector-embeddings/Redis</a> Stack docuemntation</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>RAG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RAG</tag>
      
      <tag>Embedding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大模型主流应用RAG的介绍——从架构到技术细节</title>
    <link href="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%B8%BB%E6%B5%81%E5%BA%94%E7%94%A8RAG%E7%9A%84%E4%BB%8B%E7%BB%8D%E2%80%94%E2%80%94%E4%BB%8E%E6%9E%B6%E6%9E%84%E5%88%B0%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"/>
    <url>/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%B8%BB%E6%B5%81%E5%BA%94%E7%94%A8RAG%E7%9A%84%E4%BB%8B%E7%BB%8D%E2%80%94%E2%80%94%E4%BB%8E%E6%9E%B6%E6%9E%84%E5%88%B0%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="大模型主流应用RAG的介绍——从架构到技术细节"><a href="#大模型主流应用RAG的介绍——从架构到技术细节" class="headerlink" title="大模型主流应用RAG的介绍——从架构到技术细节"></a>大模型主流应用RAG的介绍——从架构到技术细节</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>大语言模型（LLM）在实际应用中存在的问题；什么是RAG——检索增强生成；RAG架构解析；RAG技术架构的细节展示。</p></blockquote><hr><blockquote><p>本文主要内容：</p><ul><li><p>大语言模型（LLM）在实际应用中存在的问题；</p></li><li><p>什么是RAG——检索增强生成；</p></li><li><p>RAG架构解析</p></li><li><p>RAG技术架构的细节展示</p></li></ul></blockquote><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>如果你问我现在基于LLM（大语言模型，本文有时候也会将该名词描述为“大模型”）最火热的应用是什么，那我必须主推检索增强生成（<strong>RAG，Retrieval Augmented Generation</strong>）。RAG最初是为了解决LLM的各类问题的（后面会提到）产生的，但后面大家发现在现阶段的很多企业痛点上，使用RAG好像是更好的解决方案。就像我之前的文章<a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484135&idx=1&sn=82e93f5c69f11b60f3e8bb1afb5d5107&chksm=e846a036df31292022d31320db7b50b381519d24d405489be821257df7deb9f95630f090f590&scene=21#wechat_redirect">《关于LLM的一些声音总结》</a>提到的一样，企业发现其实自己要的好像是一个更好的搜索，根本不关心是不是大模型。于是，RAG被越来越多提到，包括开源的ChatPDF，也是RAG的一个经典应用。</p><p>但是我相信很多去实践RAG的人已经发现了一个情况，就是RAG入门很简单，但要真正达到企业应用的要求很难。而且RAG组成中的各类组件、流程和AI技术都过于复杂，很多人不知道如何去下手优化。</p><p>所以本文我们就来聊聊RAG，以及关于RAG优化的一些看法。</p><h3 id="LLM的问题"><a href="#LLM的问题" class="headerlink" title="LLM的问题"></a>LLM的问题</h3><p>首先我们还是要承认，RAG不管多厉害，它还是基于LLM的，脱离了LLM，RAG会脱离“人味儿”。</p><p>但是在今年年初的那一波大模型潮里面，我们发现如果仅仅依靠LLM，会有很多限制阻碍着我们前进，以下三点是最主要的：</p><ul><li><p><strong>幻觉问题</strong>：大模型的底层原理是基于概率，所以它有时候会一本正经胡说八道，比如我们问大模型的Chat（问答系统），“XXX博物院下周一开门吗？”我相信这样的问题你不能联系问，因为大模型会有一定的几率告诉你开门。而如果游客真的在下周一去了XXX博物院，那估计就要失望了，如果这个Chat还是博物院官方提供的，那事情最终会演变成一通12345的投诉电话。所以在很多需要非常精确的场景，仅仅依赖GPT的这种生成式回答是很不严谨的，而且看很难消除——目前常见的解决方案是前置一个BERT，或者预置大量prompt做优化。</p></li><li><p><strong>新鲜度问题</strong>：规模越大（参数越多、tokens越多），大模型训练的成本越高。类似OpenAI的ChatGPT3.5，目前的数据新鲜度依然保留在2021年，对于之后的事情就不知道了。而且对于一些高时效性的事情，大模型更加无能为力，比如帮我看看今天晚上有什么电影值得去看？这种任务是需要去淘票票、猫眼等网站先去获取最新电影信息的，大模型本身无法完成这个任务。</p></li><li><p><strong>数据安全</strong>：OpenAI已经遭到过几次隐私数据的投诉，而对于企业来说，如果把自己的经营数据、合同文件等机密文件和数据上传到互联网上的大模型，那想想都可怕。如果企业人员想提一个类似这样的问题：“帮我看看3月份XX部门的销售环比数据与哪些兄弟部门的增长是密切相关的？”，这需要打穿企业内部的很多数据。既要保证安全，又要借助AI能力，那么最好的方式就是把数据全部放在本地，企业数据的业务计算全部在本地完成。而在线的大模型仅仅完成一个归纳的功能，甚至，LLM都可以完全本地化部署。</p></li></ul><p>其实问题还有很多，包括tokens的限制，虽然这个长期来看不是问题，各LLM供应商的tokens数量限制肯定会越来越大。但是，费用也许就是另外一个需要考虑的问题了。</p><p>在解决这些问题的方法上，目前RAG走得比较前面。有些朋友应该已经了解过LangChain，它是架在LLM之上的一个应用框架，帮助人们快速开发基于LLM的应用。它的很多功能其实也属于RAG范畴。</p><h3 id="什么是RAG"><a href="#什么是RAG" class="headerlink" title="什么是RAG"></a>什么是RAG</h3><p>为RAG铺垫了这么多，下面我们来看看什么是RAG。</p><p>从开头的介绍里面大家已经可以看到，RAG——Retrieval Augmented Generation，检索增强生成。它的主要作用是生成（最终的答案），但是它先做了对现有文档的检索，而不是任由LLM来发挥。下面我提供一个浅显的例子来说明一下RAG：</p><p>假设一个工程师需要从厚厚的《业务操作手册》中找到相关的业务知识来帮助他完成工作，那么他有三种方式可以使用：</p><ul><li><p><strong>最原始</strong>：他可以去翻阅这么厚厚的《业务操作手册》，或者用去查询这么《业务操作手册》的电子版，然后认真阅读掌握操作方法。当然，如果他碰到的业务知识比较复杂，他就需要自己去综合这本书上面的多个章节的内容，并融会贯通；</p></li><li><p><strong>借助问答机器人</strong>：他也可以直接去咨询问答机器人（chatbot），机器人也会把相应的知识吐给你。但是它可能有两个麻烦，一是它类似于FAQ，一问一答，还是需要自己去组合所有的回答内容；二是这个机器人需要前期大量的预训练知识库，需要专业的工程师去一条一条（其实是一个个知识条目，包括答案和多个相似问法），工作量极大，不太适合大面积推广使用；</p></li><li><p><strong>RAG</strong>：RAG的操作方式就是我们可以直接把这个《业务操作手册》的电子版上传到系统，系统在几分钟之内就可以把这篇“巨著”变成索引，供刚才那位工程师咨询。而且RAG给的答案会去综合正本手册的多个相关知识点，并用“专家”一样的口吻来给你答案：“要解决这个问题，你需要先解决两个前提，有三种方法来解决。下面我们一步步来看怎么做….”。</p></li></ul><p>好了，我们现在知道RAG是个什么玩意儿了。你有没有发现，它其实会把之前的FAQ问答给取代掉，但是它能做的远远不止这些，它还是很多应用的中间件。我们自己的一个面向文博场馆的产品就是基于RAG的，大概占了整个系统的1&#x2F;3比重。另外，RAG不仅仅面向文本，它还可以面向语音、视频和图像等多模态场景，只要可以embedding的内容就可以，当然这些我们这里就不多介绍了。</p><h3 id="RAG架构"><a href="#RAG架构" class="headerlink" title="RAG架构"></a>RAG架构</h3><p>下面我们来了解一下RAG，它有非常多的组件，但是我们可以化繁为简。我喜欢把RAG——Retrieval <strong>Augmented</strong> Generation理解为Retrieval <strong>And</strong> Generation，也就是<strong>检索与生成</strong>，在加上一个数据向量和索引的工作，我们对RAG就可以总概方式地理解为“<strong>索引、检索和生成</strong>”。</p><p>以下就是RAG的主要组成，依次是数据提取——embedding（向量化）——创建索引——检索——自动排序（Rerank）——LLM归纳生成。当然这里少了使用环节，我们暂时先忽略用户提问的环节。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%B8%BB%E6%B5%81%E5%BA%94%E7%94%A8RAG%E7%9A%84%E4%BB%8B%E7%BB%8D%E2%80%94%E2%80%94%E4%BB%8E%E6%9E%B6%E6%9E%84%E5%88%B0%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/640.webp" alt="图片"></p><p>RAG的主要流程</p><h3 id="RAG技术细节概览"><a href="#RAG技术细节概览" class="headerlink" title="RAG技术细节概览"></a>RAG技术细节概览</h3><p>在技术细节上，我们还可以分成更细的组成。</p><p><img src="/2025/02/24/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%B8%BB%E6%B5%81%E5%BA%94%E7%94%A8RAG%E7%9A%84%E4%BB%8B%E7%BB%8D%E2%80%94%E2%80%94%E4%BB%8E%E6%9E%B6%E6%9E%84%E5%88%B0%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/640.1.webp" alt="图片"></p><p>RAG的一些技术细节  </p><h4 id="一、数据索引"><a href="#一、数据索引" class="headerlink" title="一、数据索引"></a>一、数据索引</h4><ul><li><p><strong>数据提取</strong></p></li><li><p>数据清洗：包括数据Loader，提取PDF、word、markdown以及数据库和API等；</p></li><li><p>数据处理：包括数据格式处理，不可识别内容的剔除，压缩和格式化等；</p></li><li><p>元数据提取：提取文件名、时间、章节title、图片alt等信息，非常关键。  </p></li><li><p><strong>分块</strong>（Chunking）</p></li><li><p><strong>固定大小的分块方式</strong>：一般是256&#x2F;512个tokens，取决于embedding模型的情况。但是这种方式的弊端是会损失很多语义，比如“我们今天晚上应该去吃个大餐庆祝一下”，很有可能就会被分在两个chunk里面——“我们今天晚上应该”、“去吃个大餐庆祝一下”。这样对于检索是非常不友好的，解决方法是增加冗余量，比如512tokens的，实际保存480tokens，一头一尾去保存相邻的chunk头尾的tokens内容；</p></li><li><p><strong>基于意图的分块方式</strong>：</p></li><li><p>句分割：最简单的是通过句号和换行来做切分。当然也有通过专业的意图包来切分的，常用的意图包有基于NLP的NLTK和spaCy；</p></li><li><p>递归分割：通过分而治之的思想，用递归切分到最小单元的一种方式；</p></li><li><p>特殊分割：还有很多不常见的，用于特殊场景，这里就不提了。</p></li><li><p>固定大小的分块方式：一般是256&#x2F;512个tokens，取决于embedding模型的情况。但是这种方式的弊端是会损失很多语义，比如“我们今天晚上应该去吃个大餐庆祝一下”，很有可能就会被分在两个chunk里面——“我们今天晚上应该”、“去吃个大餐庆祝一下”。这样对于检索是非常不友好的，解决方法是增加冗余量，比如512tokens的，实际保存480tokens，一头一尾去保存相邻的chunk头尾的tokens内容；</p></li><li><p><strong>影响分块策略的因素</strong>：</p></li><li><p>取决于你的索引类型，包括文本类型和长度，文章和微博推文的分块方式就会很不同；</p></li><li><p>取决于你的模型类型：你使用什么LLM也会有不同，因为ChatGLM、ChatGPT和Claude.ai等的tokens限制长度不一样，会影响你分块的尺寸；</p></li><li><p>取决于问答的文本的长度和复杂度：最好问答的文本长度和你分块的尺寸差不多，这样会对检索效率更友好；</p></li><li><p>应用类型：你的RAG的应用是检索、问答和摘要等，都会对分块策略有不同的影响。</p></li><li><p><strong>向量化</strong>（embedding）：这是将文本、图像、音频和视频等转化为向量矩阵的过程，也就是变成计算机可以理解的格式，embedding模型的好坏会直接影响到后面检索的质量，特别是相关度。关于embedding大家可以看我之前的一篇文章《<a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484246&idx=1&sn=c0b4f64e829bc336d516b4c79bbda19c&chksm=e846a187df31289169516fdf09ebfc3235dfcc11f467cf9541b022b2f3381a5c464db37f4da6&scene=21#wechat_redirect">大模型应用中大部分人真正需要去关心的核心——Embedding</a>》，一般我们现在可以选择的embedding模型有这些：</p></li><li><p><strong>BGE</strong>：这是国人开发的中文embedding模型，在HuggingFace的MTEB（海量文本Embedding基准）上排名前2，实力强劲；</p></li><li><p><strong>M3E</strong>：也是国人开发的中文embedding模型，我们之前用的就是这个模型，总体来说也算可以，这个还看大家的使用场景，也许你的场景会比我们更加适用；</p></li><li><p><strong>通义千问的embedding模型</strong>：因为是1500+维的模型，所以我们在国庆节后准备用用看；</p></li><li><p><strong>Text-embedding-ada-002</strong>：这是OpenAI的embedding模型，1536维，我感觉上应该是目前最好的模型，但是它在MTEB上排名好像只有第六，但是国内应该也不太能用，所以我们就放弃了；</p></li><li><p><strong>自己训练embedding模型</strong>：<strong>这是最酷的了，我过几天会专门写一篇如何训练embedding模型的文章，没有关注我的可以先关注，哈</strong>。当然，训练是基于一个既有embedding模型的，一般我们有希望让它在原来的基础上提升3%-10%的性能。</p></li></ul><h4 id="二、检索环节（Retriever）"><a href="#二、检索环节（Retriever）" class="headerlink" title="二、检索环节（Retriever）"></a>二、检索环节（Retriever）</h4><p>检索环节技术含量依然很高，而且对于我们目前来说，还有一两项工作正在进行中。</p><p>检索优化一般分为下面五部分工作：</p><ul><li><p><strong>元数据过滤</strong>：当我们把索引分成许多chunks的时候，检索效率会成为问题。这时候，如果可以通过元数据先进行过滤，就会大大提升效率和相关度。比如，我们问“帮我整理一下XX部门今年5月份的所有合同中，包含XX设备采购的合同有哪些？”。这时候，如果有元数据，我们就可以去搜索“<strong>XX部门+2023年5月</strong>”的相关数据，检索量一下子就可能变成了全局的万分之一；</p></li><li><p><strong>图关系检索</strong>：如果可以将很多实体变成node，把它们之间的关系变成relation，就可以利用知识之间的关系做更准确的回答。特别是针对一些多跳问题，利用图数据索引会让检索的相关度变得更高；</p></li><li><p><strong>检索技术</strong>：前面说的是一些前置的预处理的方法，检索的主要方式还是这几种：</p></li><li><p><strong>相似度检索</strong>：前面我已经写过那篇文章《<a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484246&idx=1&sn=c0b4f64e829bc336d516b4c79bbda19c&chksm=e846a187df31289169516fdf09ebfc3235dfcc11f467cf9541b022b2f3381a5c464db37f4da6&scene=21#wechat_redirect">大模型应用中大部分人真正需要去关心的核心——Embedding</a>》中有提到六种相似度算法，包括欧氏距离、曼哈顿距离、余弦等，后面我还会再专门写一篇这方面的文章，可以关注我，yeah；</p></li><li><p><strong>关键词检索</strong>：这是很传统的检索方式，但是有时候也很重要。刚才我们说的元数据过滤是一种，还有一种就是先把chunk做摘要，再通过关键词检索找到可能相关的chunk，增加检索效率。据说Claude.ai也是这么做的；</p></li><li><p><strong>SQL检索</strong>：这就更加传统了，但是对于一些本地化的企业应用来说，SQL查询是必不可少的一步，比如我前面提到的销售数据，就需要先做SQL检索。</p></li><li><p>其他：检索技术还有很多，后面用到再慢慢说吧。</p></li><li><p><strong>重排序（Rerank）</strong>：很多时候我们的检索结果并不理想，原因是chunks在系统内数量很多，我们检索的维度不一定是最优的，一次检索的结果可能就会在相关度上面没有那么理想。这时候我们需要有一些策略来对检索的结果做重排序，比如使用planB重排序，或者把组合相关度、匹配度等因素做一些重新调整，得到更符合我们业务场景的排序。因为在这一步之后，我们就会把结果送给LLM进行最终处理了，所以这一部分的结果很重要。这里面还会有一个内部的判断器来评审相关度，触发重排序。</p></li><li><p><strong>查询轮换</strong>：这是查询检索的一种方式，一般会有几种方式：</p></li><li><p><strong>子查询：</strong>可以在不同的场景中使用各种查询策略，比如可以使用LlamaIndex等框架提供的查询器，采用树查询（从叶子结点，一步步查询，合并），采用向量查询，或者最原始的顺序查询chunks等<strong>；</strong></p></li><li><p><strong>HyDE：</strong>这是一种抄作业的方式，生成相似的或者更标准的prompt模板<strong>。</strong></p></li><li><h4 id="三、生成（Gen）"><a href="#三、生成（Gen）" class="headerlink" title="三、生成（Gen）"></a>三、生成（Gen）</h4><p>这一步反而是我比较疏忽的，因为有大量的现成框架可以使用，而且，这一步真正发挥巨大作用的是LLM。</p><p>这里面我们使用的框架有Langchain和LlamaIndex，而且我们因为有之前的AI产品积累，所以还有一套完整的Java框架可以使用，所以这一块我没有太多研究。唯一非常关注的就是Prompt工程，我们团队内部，这一部分的工作是交给了原来AI产品的知识库运营团队来做的，他们原来做的更多是BERT相关的知识库预训练，应该说工作内容还是比较匹配的。</p><p>在Prompt里面其实还是有很多决定因素的，这和大家对所处行业的knowhow有关。比如在文旅行业，你要知道游客或者观众一般会怎么提问，真正需要得到的是什么内容。这些我就不多说了，各行业不太一样，但是大家可以翻看我之前写的关于prompt的文章<a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247483977&idx=1&sn=b6eaf2e7b3ae2a6446ad3d4a5ea2e7ab&chksm=e846a098df31298e3f827106128532b2034d3c6ab2442a6ad2eda3f2cfc399103c2a2ae278e5&scene=21#wechat_redirect">《一文讲清楚实用Prompt工程》</a>、<a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484018&idx=1&sn=8d517b484f6752acf835a8e5bbd0703d&chksm=e846a0a3df3129b5f95912f62a46d472cf38a958985f364d62ed3816888775bfce2d6f0442b5&scene=21#wechat_redirect">《高级prompt工程讲解》</a>。</p><p>其他的关于ReAct等内容，本文就先不涉及了，后面再专门写一篇文章。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>LLM这一波，催生的技术真的很多，每一个环节，要真正做好，符合企业应用，都可以让我们研究好长一段时间，并需要不断去实践，才能打磨出精品。但是如果打磨出精品，你肯定可以摘取新技术带来的果实。技术人员在很多公司地位不高？嗯，大模型这一波，我已经感觉到变化的发生了——了解大模型和不了解大模型的人，在AI的业务上的理解上，有某些角度来看，他们的区别真的就现代人类和史前人类一样巨大。</p><p>本文可能还是属于大模型应用——RAG的一个大纲式的技术普及文章，这里面的很多技术细节，我会在后面一篇篇专门来写，<strong>欢迎大家关注“土猛的员外”</strong>。</p><p><strong>近期文章：</strong>  </p><p><a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484262&idx=1&sn=430270e10268c4b97c3b5d983fdfb75b&chksm=e846a1b7df3128a139091d31e4793e2fdcb391da2e866cd914d0f0ecf38ce2d9f285d78c9a03&scene=21#wechat_redirect">最详细的文本分块(Chunking)方法——可以直接影响基于LLM应用效果</a>  </p><p><a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484246&idx=1&sn=c0b4f64e829bc336d516b4c79bbda19c&chksm=e846a187df31289169516fdf09ebfc3235dfcc11f467cf9541b022b2f3381a5c464db37f4da6&scene=21#wechat_redirect">大模型应用中大部分人真正需要去关心的核心——Embedding</a>  </p><p><a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484222&idx=1&sn=38e01375f39c9a1cba35a522ebda0158&chksm=e846a1efdf3128f91cc67f1db97f13f391490c96230a916bc9a33c2a8463f91bc5a615f72537&scene=21#wechat_redirect">适合你找个时间好好消化的文章，大模型核心技术——Transformer架构</a>  </p><p><a href="http://mp.weixin.qq.com/s?__biz=MzIyOTA5NTM1OA==&mid=2247484189&idx=1&sn=17bb6c4eb4d35d525796cbd5dc503bc7&chksm=e846a1ccdf3128daedb62b0738c3f40322fa5cb5898e7fba99176de416c65eb92faea7e160ae&scene=21#wechat_redirect">不开玩笑，1800亿参数的Falcon大模型可以在家用电脑上部署了</a></p>]]></content>
    
    
    <categories>
      
      <category>RAG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RAG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 AnythingLLM 及 Ollama 构建本地知识库</title>
    <link href="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    <url>/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="基于-AnythingLLM-及-Ollama-构建本地知识库"><a href="#基于-AnythingLLM-及-Ollama-构建本地知识库" class="headerlink" title="基于 AnythingLLM 及 Ollama 构建本地知识库"></a>基于 AnythingLLM 及 Ollama 构建本地知识库</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>基于 AnythingLLM 及 Ollama 构建本地知识库 RAG Ollama AnythingLLM 1. 什么是 RAG RAG（Retrieval Augmented Generation）检索增强生成，是 2023 年最火热的 LLM 应用系统架构，它的作用简单来说就是通过检索获取相关</p></blockquote><hr><ul><li>RAG</li><li>Ollama</li><li>AnythingLLM</li></ul><h2 id="1-什么是-RAG"><a href="#1-什么是-RAG" class="headerlink" title="1. 什么是 RAG"></a>1. 什么是 RAG</h2><p>RAG（Retrieval Augmented Generation）检索增强生成，是 2023 年最火热的 LLM 应用系统架构，它的作用简单来说就是通过检索获取相关的知识并将其融入 Prompt，让大模型能够参考相应的知识从而给出合理回答。</p><p>现在的大模型在企业应用中存在着很多挑战，首先第一点就是大模型的世界知识是完全来自于模型预训练中提供的数据，是有限的，那么企业本身的业务知识与产品知识，这些大模型都是不知道的。如果通过微调等方式去给大模型补充这些知识，成本高且可控性低，大部分场景是不适合的。以及大模型有比较严重的幻觉问题，也就是大模型在不熟悉的领域会提供不正确的答案，那在企业应用的场合里很多都是严肃的场景，对于这方面的接受程度是比较低的。</p><p>所以出现了 RAG。RAG 给大模型提供了一个外部的知识库，这个知识库可以是文档的集合也可以是网站或者是其他结构化非结构化的知识库，当用户提出问题的时候，通过 Embedding 向量化处理和关键字查询等各种检索方式，把相关内容从知识库中拉出来，并通过优先级重排等操作再提供给 LLM，LLM 就会根据检索出来的知识和用户的问题，做针对性的回答。</p><p>这个就好像给大模型一个企业私域知识的字典，大模型可以根据用户的问题一边查字典一边根据字典当中的说明进行回答。</p><p>给出一个 RAG 的运作流程图。</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729023833082-450168287.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729023833082-450168287.png"></a></p><p>这种方式一方面给大模型提供了补充企业内部知识的一个途径，另外通过这些外部知识的约束，也可以大大降低大模型的幻觉问题，特别适合去做一些企业相关的问答产品，从给内部人员使用 AI 的业务助手，到给一些 C 端用户使用的 AI 客服或 AI 营销产品等。</p><p>RAG 现在已经成为了 AI 企业应用当中最容易落地的一种方式，各种方案与产品层出不穷。但是要想把 RAG 真的做好也不是一件易事，比如如何去组织知识、如何提高检索质量等，都会对 RAG 最后呈现的效果起到至关重要的作用。</p><p>所以从关于 RAG 的解释上就可以推断出，RAG 与 LLM 相结合其实就可以构建出一个私有的、本地知识库，这也是现在构建知识库的主要手段。</p><p>使用 Ollama 和 AnythongLLM 的组合就是很常见的一种构建知识库的手段。</p><h2 id="2-什么是-Ollama"><a href="#2-什么是-Ollama" class="headerlink" title="2. 什么是 Ollama"></a>2. 什么是 Ollama</h2><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729023851105-128176909.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729023851105-128176909.png"></a></p><p>Ollama 是一个免费的开源项目，是一个专为在本地机器上便捷部署和运行 LLM 而设计的开源工具，可在本地运行各种开源 LLM，它让用户无需深入了解复杂的底层技术，就能轻松地加载、运行和交互各种LLM模型。</p><blockquote><p>Ollama 最初是被设计为本地（主要是开发）运行LLM的工具，当然现在也可以在服务器（面向用户并发提供服务）上使用，并且兼容 OpenAI 接口，可以作为 OpenAI 的私有化部署方案。</p></blockquote><p>Ollama 的特点：</p><ul><li>本地部署：不依赖云端服务，用户可以在自己的设备上运行模型，保护数据隐私。</li><li>多操作系统支持：无论是 Mac、Linux 还是 Window，都能很方便安装使用。</li><li>多模型支持：Ollama 支持多种流行的 LLM 模型，如 Llama、Falcon 等，包括最近 <strong>Meta 公司新开源的大模型 llama3.1 405B</strong> 也已经更新，用户可以根据自己的需求选择不同的模型，一键运行。</li><li>易于使用：提供了直观的命令行界面，操作简单，上手容易。</li><li>可扩展性：支持自定义配置，用户可以根据自己的硬件环境和模型需求进行优化。</li><li>开源：代码完全开放，用户可以自由查看、修改和分发（虽然没有很多人会去修改）</li></ul><h2 id="3-什么是-AnythingLLM"><a href="#3-什么是-AnythingLLM" class="headerlink" title="3. 什么是 AnythingLLM"></a>3. 什么是 AnythingLLM</h2><p>从上面的描述与说明中可以知道，对于企业来说幻觉是阻碍大模型应用的严重缺陷性问题，以及除了幻觉，通用大模型无法满足企业实际业务需求，涉及到知识局限性、信息安全等问题，企业不能将私域数据上传到第三方平台训练。</p><p>而 AnythingLLM 就是为解决这个问题而生的框架。它能在本地轻松构建基于 LLM 的 AI 应用，集成 RAG、向量数据库和强大的 Agent 功能，是高效、可定制、开源的企业级文档聊天机器人解决方案，能够将任何文档、网页链接、音视频文件甚至只是一段文字，转化为 LLM 可以理解的上下文信息，并在聊天过程中作为参考。还可以自由选择不同的 LLM 或向量数据库，并进行多用户管理和权限设置。</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729023915958-249376881.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729023915958-249376881.png"></a></p><p>主要功能：</p><ul><li><strong>多用户管理和权限控制：</strong> 让团队协作更轻松，每个人都能安全地使用 LLM。</li><li><strong>AI Agent 加持：</strong> 内置强大的 AI Agent，可以执行网页浏览、代码运行等复杂任务，自动化程度更高。</li><li><strong>可嵌入聊天窗口：</strong> 轻松集成到您的网站或应用中，为用户提供 AI 驱动的对话体验。</li><li><strong>广泛的文件格式支持：</strong> 支持 PDF、TXT、DOCX 等多种文档类型，满足不同场景需求。</li><li><strong>向量数据库管理：</strong> 提供简单易用的界面来管理向量数据库中的文档，方便知识管理。</li><li><strong>灵活的对话模式：</strong> 支持聊天和查询两种对话模式，满足不同场景需求。</li><li><strong>信息来源追踪：</strong> 聊天过程中会提供引用的文档内容，方便追溯信息来源，增强结果可信度。</li><li><strong>多种部署方式：</strong> 支持 100% 云部署，也支持本地部署，满足不同用户的需求。</li><li><strong>自定义 LLM 模型：</strong> 可以使用您自己的 LLM 模型，定制化程度更高，满足个性化需求。</li><li><strong>高效处理大型文档：</strong> 相较于其他文档聊天机器人解决方案，AnythingLLM 在处理大型文档时效率更高，成本更低，最多可节省 90% 的成本。</li><li><strong>开发者友好：</strong> 提供全套开发者 API，方便自定义集成，扩展性更强。</li></ul><h2 id="4-基于-AnythingLLM-及-Ollama-构建本地知识库"><a href="#4-基于-AnythingLLM-及-Ollama-构建本地知识库" class="headerlink" title="4. 基于 AnythingLLM 及 Ollama 构建本地知识库"></a>4. 基于 AnythingLLM 及 Ollama 构建本地知识库</h2><p>介绍完 Ollama 与 AnythingLLM，接下来就可以利用这两个东西来建立本地知识库了。</p><h3 id="4-1-安装-Ollama"><a href="#4-1-安装-Ollama" class="headerlink" title="4.1. 安装 Ollama"></a>4.1. 安装 Ollama</h3><ol><li>下载Ollama：<a href="https://ollama.com/download">https://ollama.com/download</a></li></ol><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729023934113-164233444.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729023934113-164233444.png"></a></p><ol start="2"><li>安装，启动命令行窗口输入命令加载模型。命令可以通过点击官网 Models 后，搜索并选择所需要的模型后查看。</li></ol><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729023951324-823380635.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729023951324-823380635.png"></a></p><ol start="3"><li>选择模型后，拷贝对应的命令。</li></ol><blockquote><p>Ollama 也支持加载运行 GGUF 格式的大模型，这个自行查看官网。</p></blockquote><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024005040-235690138.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024005040-235690138.png"></a></p><ol start="4"><li>启动命令行窗口，拷贝命令并运行，若是第一次运行，Ollama 会自动下载模型并启动模型。如本机上已安装了的模型。</li></ol><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024016507-1209604393.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024016507-1209604393.png"></a></p><ol start="5"><li>至此，Ollama安装完毕。</li></ol><h3 id="4-2-安装-Docker"><a href="#4-2-安装-Docker" class="headerlink" title="4.2. 安装 Docker"></a>4.2. 安装 Docker</h3><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的操作系统的机器上，从而实现虚拟化。</p><p>在 Windows 下一般直接安装 Docker Desktop，这需要 Windows 开启 Hyper-V 虚拟化功能。</p><p>Docker Desktop 的下载地址是：<a href="https://www.docker.com/products/docker-desktop">https://www.docker.com/products/docker-desktop</a></p><p>下载后直接双击安装即可，Docker的安装过程非常简单，没有什么参数需要设置，一路next即可，不多做赘述。</p><h3 id="4-3-安装-AnythingLLM"><a href="#4-3-安装-AnythingLLM" class="headerlink" title="4.3. 安装 AnythingLLM"></a>4.3. 安装 AnythingLLM</h3><p>AnythingLLM 有多种安装方式，首先是可以在 Docker 上安装。通过搜索 AnythingLLM 镜像并 pull 后 run 运行，但是需要使用一些科学的手段才能搜索并使用安装。</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024033716-947719975.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024033716-947719975.png"></a></p><p>第二种方式是直接下载地址：<a href="https://useanything.com/download">https://useanything.com/download</a> 进行安装。</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024047231-649445968.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024047231-649445968.png"></a></p><h3 id="4-4-配置-AnythingLLM，搭建本地知识库"><a href="#4-4-配置-AnythingLLM，搭建本地知识库" class="headerlink" title="4.4. 配置 AnythingLLM，搭建本地知识库"></a>4.4. 配置 AnythingLLM，搭建本地知识库</h3><p>安装完成之后，点击按钮 Get started 进入设置向导界面。</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024104608-1711754328.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024104608-1711754328.png"></a></p><p>选择大模型，在这里我们选择刚刚安装好的 Ollama，然后设置参数：</p><ul><li>指定 <strong>Ollama Base URL</strong> 为 <a href="http://host.docker.internal:11434/">http://host.docker.internal:11434</a></li><li>指定 <strong>Chat Model Selection</strong> 为 llama3.1:8b</li><li>指定 <strong>Token context window</strong> 为 4096 (这里的 token 数量视情况而定，一般来说越大会越准确但解析等待时间越长)</li></ul><blockquote><p>当然 AnythingLLM 也支持使用闭源模型的API。</p></blockquote><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024119354-1702107306.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024119354-1702107306.png"></a></p><ul><li><p>Embedding Preference（嵌入模型）的选择，选择默认的 AnythingLLM Embedder 就好。</p></li><li><p>向量数据库 Vector Database Connection，选择默认的 LanceDB</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024140242-733179620.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024140242-733179620.png"></a></p></li><li><p>确认相关信息之后，制定工作空间名称，下一步，就会得到如下界面</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024155602-619764556.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024155602-619764556.png"></a></p></li><li><p>这个时候就可以上传文档，并将文档移入工作区，作为本地知识库</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024210658-365484464.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024210658-365484464.png"></a></p></li><li><p>这个时候就可以进行问答测试了，如下图。第一次未上传本地文件提问时，LLM 并没有给出答案，在上传了本地文件作为知识库后，再次提出相同问题，LLM 根据知识库内容给出了相应的回答。</p><p><a href="https://img2024.cnblogs.com/blog/1456590/202407/1456590-20240729024226558-645959128.png"><img src="/2025/02/22/%E5%9F%BA%E4%BA%8E-AnythingLLM-%E5%8F%8A-Ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/1456590-20240729024226558-645959128.png"></a></p></li></ul><h3 id="4-5-知识库管理"><a href="#4-5-知识库管理" class="headerlink" title="4.5. 知识库管理"></a>4.5. 知识库管理</h3><p>当然这些是最简单的本地知识库搭建，除此之外 AnythingLLM 还提供了灵活的配置供给管理，可以设置例如语料分割参数、修改 Chat mode、修改 Embedding chunk 的大小（用于设置向量模型处理资料的颗粒度）等等。</p><p>另外值得说明一下的是，一般来说，参数更大的模型处理能力以及回答的内容效果会更好，举个例子，在之前用 Ollama 下载的 llama3.1:8b 模型与 llama3.1:70b 模型相比，肯定是 llama3.1:70b 的效果更好。</p><blockquote><p>扩展：在大模型中，b 指的是 10 亿的参数量，8b就是 80 亿的参数，70b 就是 700 亿的参数。</p><p>当前最新开源的 Meta 的 llama3.1:405b 就意味着有 4050 亿的参数量，是当前最大最强的开源大模型（在基准测试中 llama3.1 在大多数方面都强过了 GPT4O）</p></blockquote><p>当然参数越多所需要的算力就越大，需要的性能也就越高，在本地部署就需要根据自身的设备条件进行适合的选择。</p><p>参考资料：</p><ol><li>一文读懂：大模型RAG（检索增强生成）：<a href="https://zhuanlan.zhihu.com/p/675509396">https://zhuanlan.zhihu.com/p/675509396</a></li><li>基于 AnythingLLM 及 Ollama 构建本地知识库：<a href="https://www.bilibili.com/read/cv34813632/">https://www.bilibili.com/read/cv34813632/</a></li><li>一文了解：打造垂域的大模型应用：<a href="https://www.zhihu.com/tardis/bd/art/640493296?source_id=1001">https://www.zhihu.com/tardis/bd/art/640493296?source_id&#x3D;1001</a></li><li>qdrant对常用的向量数据库的测试报告：<a href="https://qdrant.tech/benchmarks/">https://qdrant.tech/benchmarks/</a></li><li>Ollama 本地运行大模型(LLM)完全指南：<a href="https://mp.weixin.qq.com/s/rKfxEWSppYGtGT3teXujBw">https://mp.weixin.qq.com/s/rKfxEWSppYGtGT3teXujBw</a></li></ol><ul><li><a href="https://www.cnblogs.com/knqiufan/p/18329249#%E5%9F%BA%E4%BA%8E-anythingllm-%E5%8F%8A-ollama-%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93">基于 AnythingLLM 及 Ollama 构建本地知识库</a></li><li>    <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-sSep77">1. 什么是 RAG</a></li><li>    <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-4cMjsp">2. 什么是 Ollama</a></li><li>    <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-8rPNZh">3. 什么是 AnythingLLM</a></li><li>    <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-Zh5siW">4. 基于 AnythingLLM 及 Ollama 构建本地知识库</a></li><li>        <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-633Q28">4.1. 安装 Ollama</a></li><li>        <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-67anat">4.2. 安装 Docker</a></li><li>        <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-Yc58h6">4.3. 安装 AnythingLLM</a></li><li>        <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-7HfYXi">4.4. 配置 AnythingLLM，搭建本地知识库</a></li><li>        <a href="https://www.cnblogs.com/knqiufan/p/18329249#tid-nH4bTB">4.5. 知识库管理</a></li></ul><p>__EOF__</p>]]></content>
    
    
    <categories>
      
      <category>deepseek</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deepseek</tag>
      
      <tag>Ollama</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deepseek学习笔记</title>
    <link href="/2025/02/21/deepseek%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/21/deepseek%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="deepseek学习笔记"><a href="#deepseek学习笔记" class="headerlink" title="deepseek学习笔记"></a>deepseek学习笔记</h2><p> 学习训练?<br> 本地知识库-&gt;开卷考试,输入&#x3D;用户提问+知识库检索结果,输出&#x3D;融合理解后的结果<br> 推理-&gt;闭卷考试<br> 从输入输出角度,提问&lt;–&gt;回答  人工智能类比人类的学习过程<br> 推理能力-&gt;是否理解提问?理解人类的自然语言</p><p> 智能客服有deepseek无deepseek有什么区别? 回答的更像人.</p><p> 总而言之一句话,各方面像人<br> 蒸馏-&gt;大而全的模型手把手教,训练出小的模型,辅导班<br> 微调-&gt;针对性训练,<br> RAG,知识库-&gt;开卷考试,小抄</p>]]></content>
    
    
    
    <tags>
      
      <tag>deepseek</tag>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub Actions实现Hexo博客自动发布</title>
    <link href="/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/"/>
    <url>/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="使用GitHub-Actions实现Hexo博客自动发布"><a href="#使用GitHub-Actions实现Hexo博客自动发布" class="headerlink" title="使用GitHub Actions实现Hexo博客自动发布"></a>使用GitHub Actions实现Hexo博客自动发布</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>我在使用jenkins实现hexo博客自动发布中介绍了可以使用jenkins实现博客自动发布，其实还有一种更简单的方法，就是GitHub提供的持续集成服务：GitHub Actions。下面就来介绍一下如何使用GitHub Actions来实现将hexo博客自动编译及发布到GitHub Pages和</p></blockquote><hr><p>我在<a href="https://blog.csdn.net/u010698107/article/details/115888855">使用jenkins实现hexo博客自动发布</a>中介绍了可以使用jenkins实现博客自动发布，其实还有一种更简单的方法，就是GitHub提供的持续集成服务：GitHub Actions。下面就来介绍一下如何使用GitHub Actions来实现将hexo博客自动编译及发布到GitHub Pages和Gitee pages上。</p><ul><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#github-actions-%E7%AE%80%E4%BB%8B">GitHub Actions 简介</a></li><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a><ul><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93">博客仓库</a></li><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#github-token%E9%85%8D%E7%BD%AE">GitHub Token配置</a></li><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#gitee-token%E9%85%8D%E7%BD%AE">Gitee Token配置</a></li></ul></li><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#%E9%85%8D%E7%BD%AEworkflow%E6%96%87%E4%BB%B6">配置workflow文件</a></li><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#%E9%AA%8C%E8%AF%81">验证</a></li><li><a href="https://www.cnblogs.com/hiyong/p/15335362.html#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="GitHub-Actions-简介"><a href="#GitHub-Actions-简介" class="headerlink" title="GitHub Actions 简介"></a>GitHub Actions 简介</h2><p>GitHub Actions把代码拉取，打包，触发测试，发布等操作当成一个个的actions，持续集成就是将这些actions组合起来，jenkins也类似。</p><p>在项目的<code>.github/workflows</code> 目录中创建一个yaml格式的workflow 文件来编写GitHub Actions 工作流程，GitHub会自动运行该文件。workflow语法可参考：<a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions</a></p><p>开发者可以将actions放到代码仓库供其他开发者引用，可以到官网搜索开源的actions：<a href="https://github.com/marketplace?type=actions">https://github.com/marketplace?type=actions</a></p><p>可以使用GitHub Actions实现博客自动发布，将静态博客页面部署到多个服务器上，比如GitHub Pages，Gitee pages以及云服务器上。本文使用GitHub Actions实现将Hexo博客自动编译并发布到GitHub Pages 和 Gitee pages上，并且实现Gitee pages自动更新。</p><p>下面介绍具体的配置流程。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h2 id="博客仓库"><a href="#博客仓库" class="headerlink" title="博客仓库"></a>博客仓库</h2><p>我的个人博客是使用 hexo 框架搭建的，搭建方法可参考<a href="https://blog.csdn.net/u010698107/article/details/113781267">Hexo+Github&#x2F;Gitee 搭建个人博客</a>。</p><p>主要有3个仓库：</p><ul><li>私有仓库Blog：存储 Hexo 项目文章以及源代码</li><li>公共仓库hiyongz.github.io：存储编译之后的静态页面。</li><li>Gitee公共仓库：内容和hiyongz.github.io一样，只是使用的服务不同。</li></ul><p>使用GitHub Actions要实现的是当Blog仓库指定目录有更新时，触发自动编译并部署博客到hiyongz.github.io仓库中，并将hiyongz.github.io仓库同步到Gitee公共仓库，同步完成后，更新Gitee Pages。</p><h2 id="GitHub-Token配置"><a href="#GitHub-Token配置" class="headerlink" title="GitHub Token配置"></a>GitHub Token配置</h2><p>配置发布秘钥，用于将生成的静态博客文件 push 至 GitHub Pages 所在的仓库hiyongz.github.io：</p><p><strong>1、生成秘钥</strong></p><p>执行如下命令生成公钥和私钥，替换邮件地址为你的github邮箱地址，其实也可以不使用邮箱，这里只是为了便于辨识。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -f hexo-deploy-key -t rsa -C <span class="hljs-string">&quot;username@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>命令执行后会生成两个文件：<code>hexo-deploy-key</code> 和 <code>hexo-deploy-key.pub</code> 。</p><p><strong>2、将公钥添加到Github Pages仓库中</strong></p><p>步骤：hiyongz.github.io仓库 -&gt; Settings -&gt; Deploy keys -&gt; Add deploy key</p><ul><li>Title设置为 <code>HEXO_DEPLOY_PUB</code> (可以根据自己喜好设置)</li><li>Key填写 <code>github-deploy-key.pub</code> 文件内容</li><li>勾选 <code>Allow write access</code> 选项</li></ul><p><img src="/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/2229336-20210925200928640-1508087348.jpg"></p><p><strong>3、将私钥添加到博客源码仓库中</strong></p><p>步骤：博客仓库 -&gt; Settings -&gt; Secrets -&gt; New repository secret</p><ul><li>Name 填写 <code>HEXO_DEPLOY_KEY</code> 。</li><li>Value 填写 <code>github-deploy-key</code> 文件内容。</li></ul><p><img src="/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/2229336-20210925200944430-379223616.jpg"></p><h2 id="Gitee-Token配置"><a href="#Gitee-Token配置" class="headerlink" title="Gitee Token配置"></a>Gitee Token配置</h2><p><del>Gitee Token配置和Github类似。</del>gitee pages暂停服务了</p><p>秘钥不需要重新生成，直接使用前面生成的秘钥。</p><p><strong>1、将公钥添加到Gitee Pages仓库中</strong></p><p>步骤：gitee pages仓库 -&gt; 管理 -&gt; 公钥管理 -&gt; 添加部署公钥</p><p>和github一样需要对仓库有写权限，点击【添加个人公钥】</p><p><img src="/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/2229336-20210925201003951-249671816.jpg"></p><p>复制粘贴文件 <code>github-deploy-key.pub</code> 中的内容</p><p><img src="/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/2229336-20210925201011953-1253626077.jpg"></p><p><strong>2、将私钥添加到Github的博客源码仓库中</strong></p><p>不需要重新创建，直接使用 <code>HEXO_DEPLOY_KEY</code> 就行。</p><p><strong>3、配置Gitee 帐号的密码</strong></p><p>步骤：Github博客仓库 -&gt; Settings -&gt; Secrets -&gt; New repository secret</p><ul><li>Name 填写 <code>GITEE_PASSWORD</code> 。</li><li>Value 填写Gitee 帐号的密码。</li></ul><p><img src="/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/2229336-20210925201022420-1262514263.jpg"></p><h2 id="配置workflow文件"><a href="#配置workflow文件" class="headerlink" title="配置workflow文件"></a>配置workflow文件</h2><p>下面来配置 Github Actions，编写workflow文件。</p><p>在博客仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，yaml文件名可以随意设置。</p><p>下面是我的workflow文件（参考了<a href="https://github.com/marketplace/actions/hexo-action#%F0%9F%8D%8Cexample-workflow---hexo-deploy">Hexo Action</a>和<a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a>提供的例子）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">deploy</span><br><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">paths-ignore:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;source/_drafts/**&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;.github/**&#x27;</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">A</span> <span class="hljs-string">job</span> <span class="hljs-string">to</span> <span class="hljs-string">deploy</span> <span class="hljs-string">blog.</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span><br>        <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">node</span> <span class="hljs-string">modules</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v1</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-string">cache</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">steps.cache.outputs.cache-hit</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;true&#x27;</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br>        <br>    <span class="hljs-comment"># Deploy hexo blog website.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-string">deploy</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">yaoliyc/hexo-action@master</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">deploy_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">user_name:</span> <span class="hljs-string">github用户名</span><br>        <span class="hljs-attr">user_email:</span> <span class="hljs-string">github邮箱</span><br>        <span class="hljs-attr">commit_msg:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.head_commit.message</span> <span class="hljs-string">&#125;&#125;ion)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">the</span> <span class="hljs-string">output</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        echo &quot;$&#123;&#123; steps.deploy.outputs.notify &#125;&#125;&quot;</span><br><span class="hljs-string"></span><span class="hljs-comment">#   sync:</span><br><span class="hljs-comment">#     needs: build</span><br><span class="hljs-comment">#     runs-on: ubuntu-latest</span><br><span class="hljs-comment">#     steps:</span><br><span class="hljs-comment">#       - name: Sync to Gitee</span><br><span class="hljs-comment">#         uses: wearerequired/git-mirror-action@master</span><br><span class="hljs-comment">#         env:</span><br><span class="hljs-comment">#           SSH_PRIVATE_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_KEY &#125;&#125;</span><br><span class="hljs-comment">#         with:</span><br><span class="hljs-comment">#           # 源仓库</span><br><span class="hljs-comment">#           source-repo: git@github.com:hiyongz/hiyongz.github.io.git</span><br><span class="hljs-comment">#           # 目标仓库</span><br><span class="hljs-comment">#           destination-repo: git@gitee.com:hiyong/hiyong.git</span><br><span class="hljs-comment">#   reload-pages:</span><br><span class="hljs-comment">#     needs: sync</span><br><span class="hljs-comment">#     runs-on: ubuntu-latest</span><br><span class="hljs-comment">#     steps:</span><br><span class="hljs-comment">#       - name: Build Gitee Pages</span><br><span class="hljs-comment">#         uses: yanglbme/gitee-pages-action@main</span><br><span class="hljs-comment">#         with:</span><br><span class="hljs-comment">#           gitee-username: hiyong</span><br><span class="hljs-comment">#           gitee-password: $&#123;&#123; secrets.GITEE_PASSWORD &#125;&#125;</span><br><span class="hljs-comment">#           gitee-repo: hiyong/hiyong</span><br><span class="hljs-comment">#           branch: master</span><br><br></code></pre></td></tr></table></figure><p>部分字段解释：</p><p>1、name：workflow 名称</p><p>2、on：触发 workflow 的事件</p><ul><li><code>push</code>：push事件</li><li><code>paths-ignore</code>：忽略指定的目录，也就是在忽略路径外的其它目录文件改动时才触发。</li><li>还可以设置多种触发条件，比如支持cron语法实现定时触发，参考<a href="https://docs.github.com/cn/actions/reference/events-that-trigger-workflows">这里</a>。</li></ul><p>3、jobs：执行任务</p><ul><li><code>build</code>：博客编译和发布，发布到Github Pages</li><li><code>sync</code>：将更新后的hiyongz.github.io仓库同步到Gitee</li><li><code>reload-pages</code>：自动更新 Pages，因为Gitee Pages不像GitHub Pages 那样提交代码就自动更新。</li><li><code>runs-on</code>：运行环境，支持windows，Ubuntu和macOS</li><li><code>steps</code>：指定每个 Job 的运行步骤</li><li><code>sma11black/hexo-action@v1.0.3</code>：博客构建发布，引用了<a href="https://github.com/marketplace/actions/hexo-action#%F0%9F%8D%8Cexample-workflow---hexo-deploy">Hexo Action</a>：</li><li><code>wearerequired/git-mirror-action@master</code>：仓库同步，引用了<a href="https://github.com/marketplace/actions/git-mirror-action">git-mirror-action</a></li><li><code>yanglbme/gitee-pages-action@main</code>：自动更新Gitee Pages，引用了<a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a></li></ul><p>更多workflow语法可参考 <a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">Workflow syntax for GitHub Actions</a> 。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>更新文章后push到博客仓库，如果满足条件，博客仓库中的Actions会自动触发：</p><p><img src="/2025/02/21/%E4%BD%BF%E7%94%A8GitHub-Actions%E5%AE%9E%E7%8E%B0Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/2229336-20210925201039097-652391522.jpg"></p><p>有可能报如下错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error: Need phone captcha validation, please follow wechat official account <span class="hljs-string">&quot;Gitee&quot;</span> to <span class="hljs-built_in">bind</span> account to turn off authentication.<br></code></pre></td></tr></table></figure><p>微信公众号关注Gitee，绑定Gitee账号就可以了。</p><p>查看hiyongz.github.io和Gitee仓库可以发现有新的更新，并且博客也更新了，这样实现了博客的自动发布，只要将文章写好push到博客仓库就什么也不用管了。</p><p>如果Actions执行失败会收到一个邮件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了GitHub Actions外，还可以使用<a href="https://travis-ci.org/">Travis CI</a>实现持续集成，它可以绑定Github 上的项目。</p><p>使用这些持续集成工具能有效提升效率，比如每次文章更新上传后，GitHub Actions会自动触发编译发布操作，只专注写文章就行了。</p><p><strong>参考文档：</strong></p><ol><li><p>GitHub Actions 快速入门：<a href="https://docs.github.com/cn/actions/quickstart">https://docs.github.com/cn/actions/quickstart</a></p></li><li><p>GitHub Actions：<a href="https://github.com/actions">https://github.com/actions</a></p></li><li><p>Gitee Pages Action：<a href="https://github.com/marketplace/actions/gitee-pages-action">https://github.com/marketplace/actions/gitee-pages-action</a></p></li><li><p>git-mirror-action：<a href="https://github.com/marketplace/actions/git-mirror-action">https://github.com/marketplace/actions/git-mirror-action</a></p></li><li><p>Hexo Action：<a href="https://github.com/marketplace/actions/hexo-action">https://github.com/marketplace/actions/hexo-action</a></p></li><li><p>awesome-actions：<a href="https://github.com/sdras/awesome-actions">awesome-actions</a></p></li><li><p><a href="https://github.com/marketplace?type=actions">https://github.com/marketplace?type=actions</a></p></li><li><p>workflow语法: <a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions</a></p></li></ol><p><strong>--THE END–</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>Github Actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【APP 逆向百例】某瓣 app 逆向分析</title>
    <link href="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <url>/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="【APP-逆向百例】某瓣-app-逆向分析-K哥爬虫-博客园"><a href="#【APP-逆向百例】某瓣-app-逆向分析-K哥爬虫-博客园" class="headerlink" title="【APP 逆向百例】某瓣 app 逆向分析 - K哥爬虫 - 博客园"></a>【APP 逆向百例】某瓣 app 逆向分析 - K哥爬虫 - 博客园</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>某瓣 app 逆向分析 声明 本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！ 本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，</p></blockquote><hr><h2 id="某瓣-app-逆向分析"><a href="#某瓣-app-逆向分析" class="headerlink" title="某瓣 app 逆向分析"></a>某瓣 app 逆向分析</h2><h2 id="声明"><a href="#声明" class="headerlink" title="声明#"></a>声明<a href="https://www.cnblogs.com/ikdl/p/18668799#%E5%A3%B0%E6%98%8E">#</a></h2><p><strong>本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</strong></p><p><strong>本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请在公众号【K哥爬虫】联系作者立即删除！</strong></p><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标#"></a>逆向目标<a href="https://www.cnblogs.com/ikdl/p/18668799#%E9%80%86%E5%90%91%E7%9B%AE%E6%A0%87">#</a></h2><ul><li>目标：某瓣 APP</li><li>apk 版本：7.89</li><li>逆向参数：_sig 参数</li><li>下载地址：aHR0cHM6Ly93d3cud2FuZG91amlhLmNvbS9hcHBzLzYyMjg0NDc&#x3D;</li></ul><p>作为 k 哥第一篇 APP 逆向文章，我们先简单了解一些常见工具：</p><p><strong>SDK Platform-Tools</strong> 是 Android 开发工具的一部分，由 Google 提供，主要用于与 Android 设备交互。它是开发者调试、管理设备以及支持应用程序开发的核心工具包，通常作为 Android SDK 的一部分使用。</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址#"></a>下载地址<a href="https://www.cnblogs.com/ikdl/p/18668799#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80">#</a></h2><p><a href="https://www.androiddevtools.cn/">AndroidDevTools - Android开发工具</a></p><p><a href="https://v1.ax1x.com/2024/12/24/7VKjGY.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKjGY.png" alt="7VKjGY.png"></a></p><h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介#"></a>工具简介<a href="https://www.cnblogs.com/ikdl/p/18668799#%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B">#</a></h2><h3 id="常见工具"><a href="#常见工具" class="headerlink" title="常见工具#"></a>常见工具<a href="https://www.cnblogs.com/ikdl/p/18668799#%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7">#</a></h3><p>SDK Platform-Tools 包含多个实用工具，其中最常用的是 <strong>ADB（Android Debug Bridge）</strong>。</p><h4 id="什么是-ADB？"><a href="#什么是-ADB？" class="headerlink" title="什么是 ADB？#"></a>什么是 ADB？<a href="https://www.cnblogs.com/ikdl/p/18668799#%E4%BB%80%E4%B9%88%E6%98%AF-adb">#</a></h4><p>ADB 是一个通用的命令行工具，提供 Android 设备与 PC 端之间的桥梁。通过 ADB，用户可以：</p><ul><li>安装和调试应用程序。</li><li>操作设备上的文件。</li><li>查看设备的状态信息。</li><li>执行其他与设备相关的操作。</li></ul><h4 id="安装-Platform-Tools"><a href="#安装-Platform-Tools" class="headerlink" title="安装 Platform-Tools#"></a>安装 Platform-Tools<a href="https://www.cnblogs.com/ikdl/p/18668799#%E5%AE%89%E8%A3%85-platform-tools">#</a></h4><ol><li>下载对应平台的 SDK Platform-Tools（Windows&#x2F;Mac&#x2F;Linux）。</li><li>解压文件到本地目录，例如 <code>D:\platform-tools</code>。</li><li>配置环境变量：<ul><li>将解压目录添加到系统的 PATH 环境变量中，以便在任意位置使用 ADB 命令。</li></ul></li></ol><hr><h2 id="ADB-的基本用法"><a href="#ADB-的基本用法" class="headerlink" title="ADB 的基本用法#"></a>ADB 的基本用法<a href="https://www.cnblogs.com/ikdl/p/18668799#adb-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">#</a></h2><p>以下是常用的 ADB 命令及其功能：</p><h3 id="1-查看已连接设备"><a href="#1-查看已连接设备" class="headerlink" title="1. 查看已连接设备#"></a>1. 查看已连接设备<a href="https://www.cnblogs.com/ikdl/p/18668799#1-%E6%9F%A5%E7%9C%8B%E5%B7%B2%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87">#</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">adb devices<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">List of devices attached 1234567890abc<span class="hljs-keyword">def</span> <span class="hljs-title function_">device</span><br></code></pre></td></tr></table></figure><h3 id="2-安装-APK-文件"><a href="#2-安装-APK-文件" class="headerlink" title="2. 安装 APK 文件#"></a>2. 安装 APK 文件<a href="https://www.cnblogs.com/ikdl/p/18668799#2-%E5%AE%89%E8%A3%85-apk-%E6%96%87%E4%BB%B6">#</a></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb install <span class="hljs-tag">&lt;<span class="hljs-name">apk_file_path</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">adb <span class="hljs-keyword">install </span>my_app.apk<br></code></pre></td></tr></table></figure><h3 id="3-卸载应用"><a href="#3-卸载应用" class="headerlink" title="3. 卸载应用#"></a>3. 卸载应用<a href="https://www.cnblogs.com/ikdl/p/18668799#3-%E5%8D%B8%E8%BD%BD%E5%BA%94%E7%94%A8">#</a></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb uninstall <span class="hljs-tag">&lt;<span class="hljs-name">package_name</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">adb uninstall <span class="hljs-keyword">com</span>.example.myapp<br></code></pre></td></tr></table></figure><h3 id="4-推送文件到设备"><a href="#4-推送文件到设备" class="headerlink" title="4. 推送文件到设备#"></a>4. 推送文件到设备<a href="https://www.cnblogs.com/ikdl/p/18668799#4-%E6%8E%A8%E9%80%81%E6%96%87%E4%BB%B6%E5%88%B0%E8%AE%BE%E5%A4%87">#</a></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb push <span class="hljs-tag">&lt;<span class="hljs-name">local_file</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">remote_path</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push my_file.txt /sdcard/<br></code></pre></td></tr></table></figure><h3 id="5-从设备拉取文件"><a href="#5-从设备拉取文件" class="headerlink" title="5. 从设备拉取文件#"></a>5. 从设备拉取文件<a href="https://www.cnblogs.com/ikdl/p/18668799#5-%E4%BB%8E%E8%AE%BE%E5%A4%87%E6%8B%89%E5%8F%96%E6%96%87%E4%BB%B6">#</a></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb pull <span class="hljs-tag">&lt;<span class="hljs-name">remote_file</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">local_path</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb pull /sdcard/my_file.txt ./local_copy.txt<br></code></pre></td></tr></table></figure><h3 id="6-进入设备的-shell"><a href="#6-进入设备的-shell" class="headerlink" title="6. 进入设备的 shell#"></a>6. 进入设备的 shell<a href="https://www.cnblogs.com/ikdl/p/18668799#6-%E8%BF%9B%E5%85%A5%E8%AE%BE%E5%A4%87%E7%9A%84-shell">#</a></h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">adb <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>进入 shell 后，可以执行设备上的 Linux 命令，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /sdcard/<br></code></pre></td></tr></table></figure><h3 id="7-重启设备"><a href="#7-重启设备" class="headerlink" title="7. 重启设备#"></a>7. 重启设备<a href="https://www.cnblogs.com/ikdl/p/18668799#7-%E9%87%8D%E5%90%AF%E8%AE%BE%E5%A4%87">#</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">adb reboot<br></code></pre></td></tr></table></figure><h2 id="jadx"><a href="#jadx" class="headerlink" title="jadx#"></a>jadx<a href="https://www.cnblogs.com/ikdl/p/18668799#jadx">#</a></h2><p><strong>Jadx</strong> 是一款开源的反编译工具，主要用于将 Android 应用程序的 APK 文件或 DEX 文件反编译为人类可读的 Java 源代码或 Smali 代码。它支持图形界面操作，是 Android 逆向工程中常用的工具之一。</p><hr><h2 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址#"></a>下载地址<a href="https://www.cnblogs.com/ikdl/p/18668799#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-1">#</a></h2><p><a href="https://github.com/skylot/jadx/releases/tag/v1.5.1">Jadx Releases (v1.5.1)</a></p><p><a href="https://v1.ax1x.com/2024/12/24/7VKnzH.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKnzH.png" alt="7VKnzH.png"></a></p><h2 id="安装和运行"><a href="#安装和运行" class="headerlink" title="安装和运行#"></a>安装和运行<a href="https://www.cnblogs.com/ikdl/p/18668799#%E5%AE%89%E8%A3%85%E5%92%8C%E8%BF%90%E8%A1%8C">#</a></h2><h3 id="1-下载并解压"><a href="#1-下载并解压" class="headerlink" title="1. 下载并解压#"></a>1. 下载并解压<a href="https://www.cnblogs.com/ikdl/p/18668799#1-%E4%B8%8B%E8%BD%BD%E5%B9%B6%E8%A7%A3%E5%8E%8B">#</a></h3><ol><li>从<a href="https://github.com/skylot/jadx/releases/tag/v1.5.1">下载地址</a>获取工具包。</li><li>解压到本地目录，例如：<code>jadx/</code>。</li></ol><h3 id="2-启动-Jadx"><a href="#2-启动-Jadx" class="headerlink" title="2. 启动 Jadx#"></a>2. 启动 Jadx<a href="https://www.cnblogs.com/ikdl/p/18668799#2-%E5%90%AF%E5%8A%A8-jadx">#</a></h3><p>双击运行 <strong><code>jadx-gui</code></strong> 文件，启动图形界面。</p><h3 id="3-加载APK-文件"><a href="#3-加载APK-文件" class="headerlink" title="3.加载APK 文件#"></a>3.加载APK 文件<a href="https://www.cnblogs.com/ikdl/p/18668799#3%E5%8A%A0%E8%BD%BDapk-%E6%96%87%E4%BB%B6">#</a></h3><p>使用图形界面载入 APK 文件，工具会自动将 APK 中的 DEX 文件解码并展示为 Java 源代码。</p><ol><li>打开 Jadx 图形界面。</li><li>点击 <strong>File -&gt; Open File</strong>，选择需要分析的 APK 文件。</li><li>等待加载完成后，浏览解码后的 Java 源代码。</li></ol><h2 id="frida"><a href="#frida" class="headerlink" title="frida#"></a>frida<a href="https://www.cnblogs.com/ikdl/p/18668799#frida">#</a></h2><p>Frida 是一款轻量级的 Hook 框架，也是一种动态插桩工具，可以插入代码到原生应用的内存空间，从而动态监视和修改其行为。Frida 支持多个平台，包括 Windows、Mac、Linux、Android 和 iOS。</p><h3 id="Frida-的组成"><a href="#Frida-的组成" class="headerlink" title="Frida 的组成#"></a>Frida 的组成<a href="https://www.cnblogs.com/ikdl/p/18668799#frida-%E7%9A%84%E7%BB%84%E6%88%90">#</a></h3><p>Frida 分为两部分：</p><ol><li><strong>服务端</strong>：运行在目标机器上，通过进程注入劫持应用的类和函数。</li><li><strong>客户端</strong>：运行在自己的设备上，用于注入自定义脚本（支持 JavaScript、Python、C 等）。</li></ol><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备#"></a>环境准备<a href="https://www.cnblogs.com/ikdl/p/18668799#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">#</a></h3><p>需要安装以下内容：</p><ul><li><strong>Frida Server</strong>：运行在目标设备上。</li><li><strong>Frida Tools</strong>：运行在本地，用于与服务端交互。</li></ul><p>以下以 <strong>Frida 16.5.6</strong> 和 <strong>Android ARM64</strong> 系统为例。</p><hr><h3 id="安装-Frida-Server"><a href="#安装-Frida-Server" class="headerlink" title="安装 Frida Server#"></a>安装 Frida Server<a href="https://www.cnblogs.com/ikdl/p/18668799#%E5%AE%89%E8%A3%85-frida-server">#</a></h3><p>Frida Server 有两个版本：</p><ol><li><strong>普通版</strong>：<a href="https://github.com/frida/frida/releases">Releases · frida&#x2F;frida</a></li><li><strong>魔改版</strong>（防检测优化版）：<a href="https://github.com/hzzheyang/strongR-frida-android/releases">Releases · hzzheyang&#x2F;strongR-frida-android</a></li></ol><h4 id="下载并安装-Frida-Server"><a href="#下载并安装-Frida-Server" class="headerlink" title="下载并安装 Frida Server#"></a>下载并安装 Frida Server<a href="https://www.cnblogs.com/ikdl/p/18668799#%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85-frida-server">#</a></h4><ol><li><p>下载对应版本的 Frida Server 文件：</p><ul><li>选择普通版或魔改版。</li><li>确保下载与目标设备架构匹配的版本（如 ARM64）。</li></ul></li><li><p>使用 ADB 命令将文件传输到目标设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push frida-server-16.5.6-android-arm64 /data/local/tmp/<br></code></pre></td></tr></table></figure></li><li><p>（可选）传输魔改版文件，命令类似，此处不再赘述。</p></li><li><p>修改 Frida Server 的权限并启动服务：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">adb shell <span class="hljs-comment">// 进入手机 su // 切换成root cd /data/local/tmp/ // 进入 tmp 文件 chmod 777 frida-server-16.5.6-android-arm64 //修改文件权限 ./frida-server-16.5.6-android-arm64 启动 frida 服务端</span><br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="安装-Frida-Client"><a href="#安装-Frida-Client" class="headerlink" title="安装 Frida Client#"></a>安装 Frida Client<a href="https://www.cnblogs.com/ikdl/p/18668799#%E5%AE%89%E8%A3%85-frida-client">#</a></h3><p>在本地使用 pip 安装 Frida Client 和 Frida Tools：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install frida==16.5.6 pip install frida-tools==13.6.0<br></code></pre></td></tr></table></figure><p>安装完成后，可使用以下命令验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">frida --version<br></code></pre></td></tr></table></figure><hr><h3 id="Frida-的基本用法"><a href="#Frida-的基本用法" class="headerlink" title="Frida 的基本用法#"></a>Frida 的基本用法<a href="https://www.cnblogs.com/ikdl/p/18668799#frida-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">#</a></h3><p>Frida 的基本用法主要有两种形式：</p><h4 id="1-附加到正在运行的应用"><a href="#1-附加到正在运行的应用" class="headerlink" title="1. 附加到正在运行的应用#"></a>1. 附加到正在运行的应用<a href="https://www.cnblogs.com/ikdl/p/18668799#1-%E9%99%84%E5%8A%A0%E5%88%B0%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8">#</a></h4><p>使用 <code>-U</code> 和 <code>-F</code> 参数附加到设备上正在运行的应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">frida -U -F -l script.js<br></code></pre></td></tr></table></figure><ul><li><code>-U</code>：通过 USB 连接的设备。</li><li><code>-F</code>：附加到设备上当前正在运行的应用（无需手动指定包名）。</li><li><code>-l script.js</code>：运行指定的 JavaScript 脚本（如 <code>script.js</code>）。</li></ul><h4 id="2-强制启动并附加到指定应用"><a href="#2-强制启动并附加到指定应用" class="headerlink" title="2. 强制启动并附加到指定应用#"></a>2. 强制启动并附加到指定应用<a href="https://www.cnblogs.com/ikdl/p/18668799#2-%E5%BC%BA%E5%88%B6%E5%90%AF%E5%8A%A8%E5%B9%B6%E9%99%84%E5%8A%A0%E5%88%B0%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8">#</a></h4><p>使用 <code>-f</code> 参数强制启动并附加到指定的应用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">frida -U -f com.<span class="hljs-property">package</span>.<span class="hljs-property">name</span> -l script.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><ul><li><code>-f</code>：强制启动应用。</li><li><code>com.package.name</code>：目标应用的包名。</li><li><code>-l script.js</code>：运行指定的 JavaScript 脚本。</li></ul><h2 id="ida"><a href="#ida" class="headerlink" title="ida:#"></a>ida:<a href="https://www.cnblogs.com/ikdl/p/18668799#ida">#</a></h2><p><strong>IDA</strong>（Interactive Disassembler Professional）是一款功能强大的交互式静态反汇编工具，广泛应用于程序分析和逆向工程。它具有以下特点：</p><ul><li><strong>多处理器支持</strong>：支持多种架构的二进制文件分析。</li><li><strong>跨平台</strong>：支持 Windows、Linux、MacOS 等平台的程序分析。</li><li><strong>可编程和可扩展</strong>：通过 Python 或 IDC 脚本扩展功能。</li><li><strong>交互式操作</strong>：用户可以在反汇编的基础上动态修改和注释。</li></ul><hr><h2 id="IDA-的下载和版本说明"><a href="#IDA-的下载和版本说明" class="headerlink" title="IDA 的下载和版本说明#"></a>IDA 的下载和版本说明<a href="https://www.cnblogs.com/ikdl/p/18668799#ida-%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">#</a></h2><p>IDA 是一款商业工具，正版软件需要授权。如果只是学习使用，可以在社区论坛（如吾爱破解）找到适合的版本。注意不要用于非法用途。</p><hr><h2 id="IDA-的常用快捷键"><a href="#IDA-的常用快捷键" class="headerlink" title="IDA 的常用快捷键#"></a>IDA 的常用快捷键<a href="https://www.cnblogs.com/ikdl/p/18668799#ida-%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE">#</a></h2><p>这里简单介绍一下快捷键，帮助快速上手：</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td><strong>空格</strong></td><td>在 <strong>图形视图（Graph View）</strong> 和 <strong>汇编代码视图（Text View）</strong> 之间切换。</td></tr><tr><td><strong>F5</strong></td><td>反编译代码，生成伪 C 代码（仅在支持的架构中可用）。</td></tr><tr><td><strong>G</strong></td><td>跳转到指定地址。</td></tr><tr><td><strong>X</strong></td><td>查看某个函数或变量的交叉引用（Xref）。</td></tr><tr><td><strong>N</strong></td><td>更改变量或函数的名称（命名更直观）。</td></tr><tr><td><strong>Y</strong></td><td>更改变量或函数的类型。</td></tr><tr><td><strong>Ctrl + F</strong></td><td>搜索字符串、代码或地址。</td></tr><tr><td><strong>Alt + T</strong></td><td>查找特定的函数、变量或模块（导航更快捷）。</td></tr><tr><td><strong>Ctrl + Space</strong></td><td>快速切换视图模式，便于分析。</td></tr></tbody></table><p>生于某瓣，始于某瓣，在介绍了常用的逆向工具之后，我们可以开始我们的主题。</p><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析#"></a>抓包分析<a href="https://www.cnblogs.com/ikdl/p/18668799#%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90">#</a></h2><p>打开 <code>app</code>，在首页进行刷新，<code>charles</code> 配合 <code>SocksDroid</code> 进行抓包，结果如下：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VKfHU.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKfHU.png" alt="7VKfHU.png"></a></p><p>其中要逆向的参数为 <code>_sig</code> 参数。</p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析#"></a>逆向分析<a href="https://www.cnblogs.com/ikdl/p/18668799#%E9%80%86%E5%90%91%E5%88%86%E6%9E%90">#</a></h2><p>我们把 <code>apk</code> 文件拖到 <code>jadx</code> 进行分析：</p><p>直接搜索 <code>_sig</code> 参数，点进去：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VKi1q.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKi1q.png" alt="7VKi1q.png"></a></p><p><a href="https://v1.ax1x.com/2024/12/24/7VKs2s.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKs2s.png" alt="7VKs2s.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Pair</span> <span class="hljs-variable">F3</span> <span class="hljs-operator">=</span> i0.d.F(request); request = request.newBuilder() .url( request.url() .newBuilder() .setQueryParameter(<span class="hljs-string">&quot;_sig&quot;</span>, (String) F3.first) .setQueryParameter(bs.h, (String) F3.second) .build() ) .build();<br></code></pre></td></tr></table></figure><p>发现新增了以下两个查询参数参数值，其中就有我们的 <code>_sig</code> 参数，点进去F 方法：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VK6Qa.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VK6Qa.png" alt="7VK6Qa.png"></a></p><p>只是对 <code>header</code> 做了一些操作，点进去 E 方法：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VKFv7.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKFv7.png" alt="7VKFv7.png"></a></p><p>这个 E 很有可能是我们参数的生成地方，我们右键 E 方法复制 <code>frida</code> 代码，<code>frida</code> 完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook1</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">let</span> d = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;i0.d&quot;</span>); d[<span class="hljs-string">&quot;E&quot;</span>].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">str, str2, str3</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;E is called&#x27;</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-string">&#x27;str: &#x27;</span> + str + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-string">&#x27;str2: &#x27;</span> + str2 + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-string">&#x27;str3: &#x27;</span> + str3); <span class="hljs-keyword">let</span> ret = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">E</span>(str, str2, str3); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;E ret value is &#x27;</span> + ret); <span class="hljs-keyword">return</span> ret; &#125;; &#125; <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123; <span class="hljs-title function_">hook1</span>() &#125;) &#125; <span class="hljs-title function_">setImmediate</span>(main)<br></code></pre></td></tr></table></figure><p>使用如下 <code>frida</code> 命令启动发现 <code>frida</code> 退出，而我们 <code>APP</code> 没有退出，这说明我们 <code>frida</code> 被检测了：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">frida -U -f <span class="hljs-keyword">com</span>.douban.frodo -l 脚本名.js<br></code></pre></td></tr></table></figure><p><a href="https://v1.ax1x.com/2024/12/24/7VKZnI.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKZnI.png" alt="7VKZnI.png"></a></p><p>我们可以先<code>hook dlopen</code> 方法，看看是打开了哪个 <code>so</code> 文件退出了，<code>dlopen</code> 是一个能动态加载指定的共享库到内存中，基本上所有的 <code>so</code> 文件加载都要经过该方法，<code>hook</code> 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dlopen = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;dlopen&quot;</span>); <span class="hljs-keyword">var</span> android_dlopen_ext = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>); <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlopen, &#123; <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123; <span class="hljs-keyword">var</span> path_ptr = args[<span class="hljs-number">0</span>]; <span class="hljs-keyword">var</span> path = <span class="hljs-title function_">ptr</span>(path_ptr).<span class="hljs-title function_">readCString</span>(); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[dlopen -&gt; enter&quot;</span>, path); &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;dlopen -&gt; leave&quot;</span>) &#125; &#125;); <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(android_dlopen_ext, &#123; <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123; <span class="hljs-keyword">var</span> path_ptr = args[<span class="hljs-number">0</span>]; <span class="hljs-keyword">var</span> path = <span class="hljs-title function_">ptr</span>(path_ptr).<span class="hljs-title function_">readCString</span>(); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[android_dlopen_ext -&gt; enter&quot;</span>, path); &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;android_dlopen_ext -&gt; leave&quot;</span>) &#125; &#125;);<br></code></pre></td></tr></table></figure><p><a href="https://v1.ax1x.com/2024/12/24/7VKeLV.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKeLV.png" alt="7VKeLV.png"></a></p><p>发现 <code>libmsaoaidsec.so</code> 并没有 <code>leave</code>，推测是在该 <code>so</code> 文件里面开启了线程，做循环检测，我们尝试 <code>hook pthread</code> 方法，<code>pthread</code> 用于线程的创建、同步、管理和终止，<code>hook</code> 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_pth</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> pth_create = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;pthread_create&quot;</span>); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[pth_create]&quot;</span>, pth_create); <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(pth_create, &#123; <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123; <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByAddress</span>(args[<span class="hljs-number">2</span>]); <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span> != <span class="hljs-literal">null</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;开启线程--&gt;&quot;</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span>, args[<span class="hljs-number">2</span>].<span class="hljs-title function_">sub</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>)); &#125; &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;&#125; &#125;); &#125; <span class="hljs-title function_">hook_pth</span>()<br></code></pre></td></tr></table></figure><p>可以发现在这个so 文件开启了两个线程，地址分别是<code>0x1c544</code> 和 <code>0x1b8d4</code>：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VKoxL.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VKoxL.png" alt="7VKoxL.png"></a></p><p>我们可以把这个 <code>so</code> 文件，拿到 <code>ida</code> 分析，分别搜索这两个地址，看看都做了什么操作：</p><p><code>0x1c544</code>：</p><p><a href="https://v1.ax1x.com/2024/12/24/7Vb9zJ.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7Vb9zJ.png" alt="7Vb9zJ.png"></a></p><p><a href="https://v1.ax1x.com/2024/12/24/7VbB9G.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VbB9G.png" alt="7VbB9G.png"></a></p><p>代码很长，看着看着像是在检测一些字符的长度。</p><p>0x1b8d4：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VbTKB.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VbTKB.png" alt="7VbTKB.png"></a></p><p>这个函数一个死循环，并且有一个<code>usleep(v1)</code> 很可疑，像是在做循环检测。我们可以先把这个函数给替换掉,替换的时候要注意，有可能只 <code>hook</code> 这个地方可能不行，我们需要找到其他函数调用这个函数，也就是要找到他的引用，可以按住 x 看到函数的交叉引用。另外这个 <code>hook</code> 时机要早，因为这个函数的调用是通过 <code>init_proc</code> 调用的：</p><p><a href="https://v1.ax1x.com/2024/12/24/7Vbm1t.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7Vbm1t.png" alt="7Vbm1t.png"></a></p><p>我们可以通过hook <code>call_constructors</code> 这个， <code>call_constructors</code> 主要作用是执行那些需要在程序开始运行之前完成初始化的代码，hook 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_call_constructors</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> linker64_base_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">getBaseAddress</span>(<span class="hljs-string">&quot;linker64&quot;</span>) <span class="hljs-keyword">var</span> call_constructors_func_off = <span class="hljs-number">0x4a174</span> <span class="hljs-keyword">var</span> call_constructors_func_addr = linker64_base_addr.<span class="hljs-title function_">add</span>(call_constructors_func_off) <span class="hljs-keyword">var</span> listener = <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(call_constructors_func_addr, &#123; <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;call_constructors -&gt; enter&quot;</span>) <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libmsaoaidsec.so&quot;</span>) <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span> != <span class="hljs-literal">null</span>) &#123; <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x1B924</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeCallback</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;替换成功&quot;</span>) &#125;, <span class="hljs-string">&quot;void&quot;</span>, [])) listener.<span class="hljs-title function_">detach</span>() &#125; &#125;, &#125;) &#125;<br></code></pre></td></tr></table></figure><p>通过打开这个 <code>libmsaoaidsec.so</code> 文件进行调用，完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dlopen = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;dlopen&quot;</span>); <span class="hljs-keyword">var</span> android_dlopen_ext = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>); <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlopen, &#123; <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123; <span class="hljs-keyword">var</span> path_ptr = args[<span class="hljs-number">0</span>]; <span class="hljs-keyword">var</span> path = <span class="hljs-title function_">ptr</span>(path_ptr).<span class="hljs-title function_">readCString</span>(); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[dlopen -&gt; enter&quot;</span>, path); &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;dlopen -&gt; leave&quot;</span>) &#125; &#125;); <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(android_dlopen_ext, &#123; <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123; <span class="hljs-keyword">var</span> path_ptr = args[<span class="hljs-number">0</span>]; <span class="hljs-keyword">var</span> path = <span class="hljs-title function_">ptr</span>(path_ptr).<span class="hljs-title function_">readCString</span>(); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[android_dlopen_ext -&gt; enter&quot;</span>, path); <span class="hljs-keyword">if</span> (args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>() != <span class="hljs-literal">null</span> &amp;&amp; args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;libmsaoaidsec.so&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-title function_">hook_call_constructors</span>() &#125; &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;android_dlopen_ext -&gt; leave&quot;</span>) &#125; &#125;); <span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_call_constructors</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> linker64_base_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">getBaseAddress</span>(<span class="hljs-string">&quot;linker64&quot;</span>) <span class="hljs-keyword">var</span> call_constructors_func_off = <span class="hljs-number">0x4a174</span> <span class="hljs-keyword">var</span> call_constructors_func_addr = linker64_base_addr.<span class="hljs-title function_">add</span>(call_constructors_func_off) <span class="hljs-keyword">var</span> listener = <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(call_constructors_func_addr, &#123; <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;call_constructors -&gt; enter&quot;</span>) <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libmsaoaidsec.so&quot;</span>) <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span> != <span class="hljs-literal">null</span>) &#123; <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x1B924</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeCallback</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;替换成功&quot;</span>) &#125;, <span class="hljs-string">&quot;void&quot;</span>, [])) listener.<span class="hljs-title function_">detach</span>() &#125; &#125;, &#125;) &#125;<br></code></pre></td></tr></table></figure><p>最后成功过掉检测，接着继续hook 我们上面的 E 函数：</p><p><a href="https://v1.ax1x.com/2024/12/24/7Vbp6b.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7Vbp6b.png" alt="7Vbp6b.png"></a></p><p><a href="https://v1.ax1x.com/2024/12/24/7Vb0Qe.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7Vb0Qe.png" alt="7Vb0Qe.png"></a></p><p>发现结果一样，证明我们的位置没有找错，传入了三个参数分别为查询参数、请求方法 和 null:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">E is called, <span class="hljs-attr">str</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//frodo.douban.com/api/v2/elendil/recommend_feed?start=0&amp;count=20&amp;screen_width=1080&amp;screen_height=2028&amp;wx_api_ver=0&amp;opensdk_ver=638058496&amp;webview_ua=Mozilla%2F5.0%20%28Linux%3B%20Android%2011%3B%20Pixel%203%20Build%2FRQ1D.210205.004%3B%20wv%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Version%2F4.0%20Chrome%2F130.0.6723.107%20Mobile%20Safari%2F537.36&amp;sugar=0&amp;update_mark=1735024878.512534157&amp;network=wifi&amp;enable_sdk_bidding=1&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=ali_market&amp;udid=3e71b8653a2b6b25b07876b25012c50ae5074f2a&amp;os_rom=android&amp;oaid=EdGi3zYQCRzmwwB1YR7WKg%3D%3D%0A&amp;timezone=Asia%2FShanghai, str2: GET, str3: null</span><br></code></pre></td></tr></table></figure><p><a href="https://v1.ax1x.com/2024/12/24/7VblIw.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VblIw.png" alt="7VblIw.png"></a></p><p>通过对传递的 <code>str</code> 参数不断操作，最终通过 <code>HMAC_SHA1</code> 算法生成加密值 <code>str4</code> 。其中算法的 key 值是由 <code>str5</code> 得来:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str5</span> <span class="hljs-operator">=</span> j7.e.d().f30170e.b;<br></code></pre></td></tr></table></figure><p>点进该方法，可以发现算法 key 值是为 h 函数第三个参数的值：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VbEL6.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VbEL6.png" alt="7VbEL6.png"></a></p><p>直接 frida hook 该函数得到 <code>key</code> 值：</p><p><a href="https://v1.ax1x.com/2024/12/24/7VbQxO.png"><img src="/2025/02/21/%E3%80%90APP-%E9%80%86%E5%90%91%E7%99%BE%E4%BE%8B%E3%80%91%E6%9F%90%E7%93%A3-app-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/7VbQxO.png" alt="7VbQxO.png"></a></p><p>最终 python 代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hmac <span class="hljs-keyword">import</span> hashlib <span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_hash1</span>(<span class="hljs-params">key: <span class="hljs-built_in">str</span>, data: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>: <span class="hljs-keyword">try</span>: <span class="hljs-comment"># 将 key 转换为字节 key_bytes = key.encode() # 将 data 转换为字节 data_bytes = data.encode() # 使用 HMAC-SHA1 进行加密 mac = hmac.new(key_bytes, data_bytes, hashlib.sha1) # 返回 Base64 编码的结果 return base64.b64encode(mac.digest()).decode(&#x27;utf-8&#x27;) except Exception as e: print(f&quot;Error: &#123;e&#125;&quot;) return None if __name__ == &#x27;__main__&#x27;: # 测试代码 key = &quot;bf7dddc7c9cfe6f7&quot; data = &quot;GET&amp;%2Fapi%2Fv2%2Felendil%2Frecommend_feed&amp;1735019437&quot; hashed_value = hmac_hash1(key, data) print(&quot;HMAC Hash (Base64):&quot;, hashed_value)</span><br></code></pre></td></tr></table></figure><p>至此，该参数加密分析流程就结束了。</p><p>相关代码，会分享到知识星球当中，需要的小伙伴自取，仅供学习交流。</p><h2 id="结果验证"><a href="#结果验证" class="headerlink" title="结果验证#"></a>结果验证<a href="https://www.cnblogs.com/ikdl/p/18668799#%E7%BB%93%E6%9E%9C%E9%AA%8C%E8%AF%81">#</a></h2>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>豆瓣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RPC 技术及其框架 Sekiro 在爬虫逆向中的应用，加密数据一把梭！</title>
    <link href="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/"/>
    <url>/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="RPC-技术及其框架-Sekiro-在爬虫逆向中的应用，加密数据一把梭！-K哥爬虫-博客园"><a href="#RPC-技术及其框架-Sekiro-在爬虫逆向中的应用，加密数据一把梭！-K哥爬虫-博客园" class="headerlink" title="RPC 技术及其框架 Sekiro 在爬虫逆向中的应用，加密数据一把梭！ - K哥爬虫 - 博客园"></a>RPC 技术及其框架 Sekiro 在爬虫逆向中的应用，加密数据一把梭！ - K哥爬虫 - 博客园</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>什么是 RPC RPC，英文 RangPaCong，中文让爬虫，旨在为爬虫开路，秒杀一切，让爬虫畅通无阻！ 开个玩笑，实际上 RPC 为远程过程调用，全称 Remote Procedure Call，是一种技术思想而非一种规范或协议。RPC 的诞生事实上离不开分布式的发展，RPC 主要解决了两个问题</p></blockquote><hr><p><a href="https://img2022.cnblogs.com/blog/2501174/202202/2501174-20220223103926138-1845892816.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220223103926138-1845892816.png"></a></p><h2 id="什么是-RPC"><a href="#什么是-RPC" class="headerlink" title="什么是 RPC#"></a>什么是 RPC<a href="https://www.cnblogs.com/ikdl/p/15926242.html#%E4%BB%80%E4%B9%88%E6%98%AF-rpc">#</a></h2><p><del>RPC，英文 RangPaCong，中文让爬虫，旨在为爬虫开路，秒杀一切，让爬虫畅通无阻！</del></p><p>开个玩笑，实际上 RPC 为远程过程调用，全称 Remote Procedure Call，是一种技术思想而非一种规范或协议。RPC 的诞生事实上离不开分布式的发展，RPC 主要解决了两个问题：</p><ol><li>解决了分布式系统中，服务之间的互相调用问题；</li><li>RPC 使得在远程调用时，像本地调用一样方便，让调用者感知不到远程调用的逻辑。</li></ol><p>RPC 的存在让构建分布式系统更加容易，相比于 HTTP 协议，RPC 采用二进制字节码传输，因此也更加高效、安全。在一个典型 RPC 的使用场景中，包含了服务发现、负载、容错、网络传输、序列化等组件，完整 RPC 架构图如下图所示：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110056524-196053584.jpg"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110056524-196053584.jpg" alt="01"></a></p><h2 id="JSRPC"><a href="#JSRPC" class="headerlink" title="JSRPC#"></a>JSRPC<a href="https://www.cnblogs.com/ikdl/p/15926242.html#jsrpc">#</a></h2><p>RPC 技术是非常复杂的，对于我们搞爬虫、逆向的来说，不需要完全了解，只需要知道这项技术如何在逆向中应用就行了。</p><p>RPC 在逆向中，简单来说就是将本地和浏览器，看做是服务端和客户端，二者之间通过 WebSocket 协议进行 RPC 通信，在浏览器中将加密函数暴露出来，在本地直接调用浏览器中对应的加密函数，从而得到加密结果，不必去在意函数具体的执行逻辑，也省去了扣代码、补环境等操作，可以省去大量的逆向调试时间。我们以某团网页端的登录为例来演示 RPC 在逆向中的具体使用方法。（假设你已经有一定逆向基础，了解 WebSocket 协议，纯小白可以先看看K哥以前的文章）</p><ul><li>主页（base64）：<code>aHR0cHM6Ly9wYXNzcG9ydC5tZWl0dWFuLmNvbS9hY2NvdW50L3VuaXRpdmVsb2dpbg==</code></li><li>参数：h5Fingerprint</li></ul><p>首先抓一下包，登录接口有一个超级长的参数 h5Fingerprint，如下图所示：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110056984-1105684154.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110056984-1105684154.png" alt="02"></a></p><p>直接搜一下就能找到加密函数：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110057433-1944515843.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110057433-1944515843.png" alt="03"></a></p><p>其中 <code>utility.getH5fingerprint()</code> 传入的参数 <code>window.location.origin + url</code> 格式化后，参数如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">url = <span class="hljs-string">&quot;https://passport.脱敏处理.com/account/unitivelogin&quot;</span> params = &#123; <span class="hljs-string">&quot;risk_partner&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;risk_platform&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;risk_app&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span>, <span class="hljs-string">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;96309b5f00ba4143b920.1644805104.1.0.0&quot;</span>, <span class="hljs-string">&quot;token_id&quot;</span>: <span class="hljs-string">&quot;DNCmLoBpSbBD6leXFdqIxA&quot;</span>, <span class="hljs-string">&quot;service&quot;</span>: <span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;continue&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/account/settoken?continue=https%3A%2F%2Fwww.脱敏处理.com%2F&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>uuid 和 token_id 都可以直接搜到，不是本次研究重点，这里不再细说，接下来我们使用 RPC 技术，直接调用浏览器里的 <code>utility.getH5fingerprint()</code> 方法，首先在本地编写服务端代码，使其能够一直输入待加密字符串，接收并打印加密后的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ================================== # --*-- coding: utf-8 --*-- # @Time : 2022-02-14 # @Author : 微信公众号：K哥爬虫 # @FileName: ws_server.py # @Software: PyCharm # ================================== import sys import asyncio import websockets async def receive_massage(websocket): while True: send_text = input(&quot;请输入要加密的字符串: &quot;) if send_text == &quot;exit&quot;: print(&quot;Exit, goodbye!&quot;) await websocket.send(send_text) await websocket.close() sys.exit() else: await websocket.send(send_text) response_text = await websocket.recv() print(&quot;\n加密结果：&quot;, response_text) start_server = websockets.serve(receive_massage, &#x27;127.0.0.1&#x27;, 5678) # 自定义端口 asyncio.get_event_loop().run_until_complete(start_server) asyncio.get_event_loop().run_forever()</span><br></code></pre></td></tr></table></figure><p>编写浏览器客户端 JS 代码，收到消息就直接 <code>utility.getH5fingerprint()</code> 得到加密参数并发送给服务端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* ================================== # @Time : 2022-02-14 # @Author : 微信公众号：K哥爬虫 # @FileName: ws_client.js # @Software: PyCharm # ================================== */</span> <span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://127.0.0.1:5678&quot;</span>); <span class="hljs-comment">// 自定义端口 ws.onmessage = function (evt) &#123; console.log(&quot;Received Message: &quot; + evt.data); if (evt.data == &quot;exit&quot;) &#123; ws.close(); &#125; else &#123; ws.send(utility.getH5fingerprint(evt.data)) &#125; &#125;;</span><br></code></pre></td></tr></table></figure><p>然后我们需要把客户端代码注入到网页中，这里方法有很多，比如抓包软件 Fiddler 替换响应、浏览器插件 ReRes 替换 JS、浏览器开发者工具 Overrides 重写功能等，也可以通过插件、油猴等注入 Hook 的方式插入，反正方法很多，对这些方法不太了解的朋友可以去看看K哥以前的文章，都有介绍。</p><p>这里我们使用浏览器开发者工具 Overrides 重写功能，将 WebSocket 客户端代码加到加密的这个 JS 文件里并 Ctrl+S 保存，这里将其写成了 IIFE 自执行方式，这样做的原因是防止污染全局变量，不用自执行方式当然也是可以的。</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110057745-1535961528.png">![04]2501174-20220222110057745-1535961528.png)</a></p><p>然后先运行本地服务端代码，网页上先登录一遍，网页上先登录一遍，网页上先登录一遍，重要的步骤说三遍！然后就可以在本地传入待加密字符串，获取 <code>utility.getH5fingerprint()</code> 加密后的结果了：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110058087-1997513849.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110058087-1997513849.png" alt="05"></a></p><h2 id="Sekiro"><a href="#Sekiro" class="headerlink" title="Sekiro#"></a>Sekiro<a href="https://www.cnblogs.com/ikdl/p/15926242.html#sekiro">#</a></h2><p>通过前面的示例，可以发现自己写服务端太麻烦了，不易扩展，那这方面有没有现成的轮子呢？答案是有的，这里介绍两个项目：</p><ul><li>JsRPC-hliang：<a href="https://github.com/jxhczhl/JsRpc">https://github.com/jxhczhl/JsRpc</a></li><li>Sekiro：<a href="https://github.com/virjar/sekiro">https://github.com/virjar/sekiro</a></li></ul><p>JsRPC-hliang 是用 go 语言写的，是专门为 JS 逆向做的项目，而 Sekiro 功能更加强大，Sekiro 是由邓维佳大佬，俗称渣总，写的一个基于长链接和代码注入的 Android Private API 暴露框架，可以用在 APP 逆向、APP 数据抓取、Android 群控等场景，同时 Sekiro 也是目前公开方案唯一稳定的 JSRPC 框架，两者在 JS 逆向方面的使用方法其实都差不多，本文主要介绍一下 Sekiro 在 Web JS 逆向中的应用。</p><p>参考 Sekiro 文档，首先在本地编译项目：</p><ul><li><p>Linux &amp; Mac：执行脚本 <code>build_demo_server.sh</code>，之后得到产出发布压缩包：<code>sekiro-service-demo/target/sekiro-release-demo.zip</code></p></li><li><p>Windows：可以直接下载：<a href="https://oss.virjar.com/sekiro/sekiro-demo">https://oss.virjar.com/sekiro/sekiro-demo</a></p></li></ul><p>然后在本地运行（需要有 Java 环境，自行配置）：</p><ul><li>Linux &amp; Mac：<code>bin/sekiro.sh</code></li><li>Windows：<code>bin/sekiro.bat</code></li></ul><p>以 Windows 为例，启动后如下：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110058363-1488165163.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110058363-1488165163.png" alt="06"></a></p><p>接下来就需要在浏览器里注入代码了，需要将作者提供的 sekiro_web_client.js（下载地址：<a href="https://sekiro.virjar.com/sekiro-doc/assets/sekiro_web_client.js%EF%BC%89">https://sekiro.virjar.com/sekiro-doc/assets/sekiro_web_client.js）</a> 注入到浏览器环境，然后通过 SekiroClient 和 Sekiro 服务器通信，即可直接 RPC 调用浏览器内部方法，官方提供的 SekiroClient 代码样例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">guid</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">function</span> <span class="hljs-title function_">S4</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> (((<span class="hljs-number">1</span>+<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())*<span class="hljs-number">0x10000</span>)|<span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>); &#125; <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S4</span>()+<span class="hljs-title function_">S4</span>()+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-title function_">S4</span>()+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-title function_">S4</span>()+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-title function_">S4</span>()+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-title function_">S4</span>()+<span class="hljs-title function_">S4</span>()+<span class="hljs-title function_">S4</span>()); &#125; <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SekiroClient</span>(<span class="hljs-string">&quot;wss://sekiro.virjar.com/business/register?group=ws-group&amp;clientId=&quot;</span>+<span class="hljs-title function_">guid</span>()); client.<span class="hljs-title function_">registerAction</span>(<span class="hljs-string">&quot;clientTime&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">request, resolve, reject</span>)&#123; <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()); &#125;)<br></code></pre></td></tr></table></figure><p>wss 链接里，如果是免费版，要将 business 改成 business-demo，解释一下涉及到的名词：</p><ul><li><strong>group</strong>：业务类型（接口组），每个业务一个 group，group 下面可以注册多个终端（SekiroClient），同时 group 可以挂载多个 Action；</li><li><strong>clientId</strong>：指代设备，多个设备使用多个机器提供 API 服务，提供群控能力和负载均衡能力；</li><li><strong>SekiroClient</strong>：服务提供者客户端，主要场景为手机&#x2F;浏览器等。最终的 Sekiro 调用会转发到 SekiroClient。每个 client 需要有一个惟一的 clientId；</li><li><strong>registerAction</strong>：接口，同一个 group 下面可以有多个接口，分别做不同的功能；</li><li><strong>resolve</strong>：将内容传回给客户端的方法；</li><li><strong>request</strong>：客户端传过来的请求，如果请求里有多个参数，可以以键值对的方式从里面提取参数然后再做处理。</li></ul><p>说了这么多可能也不好理解，直接实战，还是以某团网页端登录为例，我们将 sekiro_web_client.js 与 SekiroClient 通信代码写在一起，然后根据需求，改写一下通信部分代码：</p><ol><li>ws 链接改为：<code>ws://127.0.0.1:5620/business-demo/register?group=rpc-test&amp;clientId=</code>，自定义 <code>group</code> 为 <code>rpc-test</code>；</li><li>注册一个事件 <code>registerAction</code> 为 <code>getH5fingerprint</code>；</li><li><code>resolve</code> 返回的结果为 <code>utility.getH5fingerprint(request[&quot;url&quot;])</code>，即加密并返回客户端传过来的 url 参数。</li></ol><p>完整代码如下（留意末尾 SekiroClient 通信代码部分的写法）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* ================================== # @Time : 2022-02-14 # @Author : 微信公众号：K哥爬虫 # @FileName: sekiro.js # @Software: PyCharm # ================================== */</span> (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-string">&#x27;use strict&#x27;</span>; <span class="hljs-keyword">function</span> <span class="hljs-title function_">SekiroClient</span>(<span class="hljs-params">wsURL</span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">wsURL</span> = wsURL; <span class="hljs-variable language_">this</span>.<span class="hljs-property">handlers</span> = &#123;&#125;; <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = &#123;&#125;; <span class="hljs-comment">// check if (!wsURL) &#123; throw new Error(&#x27;wsURL can not be empty!!&#x27;) &#125; this.webSocketFactory = this.resolveWebSocketFactory(); this.connect() &#125; SekiroClient.prototype.resolveWebSocketFactory = function () &#123; if (typeof window === &#x27;object&#x27;) &#123; var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket; return function (wsURL) &#123; function WindowWebSocketWrapper(wsURL) &#123; this.mSocket = new theWebSocket(wsURL); &#125; WindowWebSocketWrapper.prototype.close = function () &#123; this.mSocket.close(); &#125;; WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) &#123; this.mSocket.onmessage = onMessageFunction; &#125;; WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) &#123; this.mSocket.onopen = onOpenFunction; &#125;; WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) &#123; this.mSocket.onclose = onCloseFunction; &#125;; WindowWebSocketWrapper.prototype.send = function (message) &#123; this.mSocket.send(message); &#125;; return new WindowWebSocketWrapper(wsURL); &#125; &#125; if (typeof weex === &#x27;object&#x27;) &#123; // this is weex env : https://weex.apache.org/zh/docs/modules/websockets.html try &#123; console.log(&quot;test webSocket for weex&quot;); var ws = weex.requireModule(&#x27;webSocket&#x27;); console.log(&quot;find webSocket for weex:&quot; + ws); return function (wsURL) &#123; try &#123; ws.close(); &#125; catch (e) &#123; &#125; ws.WebSocket(wsURL, &#x27;&#x27;); return ws; &#125; &#125; catch (e) &#123; console.log(e); //ignore &#125; &#125; //TODO support ReactNative if (typeof WebSocket === &#x27;object&#x27;) &#123; return function (wsURL) &#123; return new theWebSocket(wsURL); &#125; &#125; // weex 和 PC环境的websocket API不完全一致，所以做了抽象兼容 throw new Error(&quot;the js environment do not support websocket&quot;); &#125;; SekiroClient.prototype.connect = function () &#123; console.log(&#x27;sekiro: begin of connect to wsURL: &#x27; + this.wsURL); var _this = this; // 不check close，让 // if (this.socket &amp;&amp; this.socket.readyState === 1) &#123; // this.socket.close(); // &#125; try &#123; this.socket = this.webSocketFactory(this.wsURL); &#125; catch (e) &#123; console.log(&quot;sekiro: create connection failed,reconnect after 2s&quot;); setTimeout(function () &#123; _this.connect() &#125;, 2000) &#125; this.socket.onmessage(function (event) &#123; _this.handleSekiroRequest(event.data) &#125;); this.socket.onopen(function (event) &#123; console.log(&#x27;sekiro: open a sekiro client connection&#x27;) &#125;); this.socket.onclose(function (event) &#123; console.log(&#x27;sekiro: disconnected ,reconnection after 2s&#x27;); setTimeout(function () &#123; _this.connect() &#125;, 2000) &#125;); &#125;; SekiroClient.prototype.handleSekiroRequest = function (requestJson) &#123; console.log(&quot;receive sekiro request: &quot; + requestJson); var request = JSON.parse(requestJson); var seq = request[&#x27;__sekiro_seq__&#x27;]; if (!request[&#x27;action&#x27;]) &#123; this.sendFailed(seq, &#x27;need request param &#123;action&#125;&#x27;); return &#125; var action = request[&#x27;action&#x27;]; if (!this.handlers[action]) &#123; this.sendFailed(seq, &#x27;no action handler: &#x27; + action + &#x27; defined&#x27;); return &#125; var theHandler = this.handlers[action]; var _this = this; try &#123; theHandler(request, function (response) &#123; try &#123; _this.sendSuccess(seq, response) &#125; catch (e) &#123; _this.sendFailed(seq, &quot;e:&quot; + e); &#125; &#125;, function (errorMessage) &#123; _this.sendFailed(seq, errorMessage) &#125;) &#125; catch (e) &#123; console.log(&quot;error: &quot; + e); _this.sendFailed(seq, &quot;:&quot; + e); &#125; &#125;; SekiroClient.prototype.sendSuccess = function (seq, response) &#123; var responseJson; if (typeof response == &#x27;string&#x27;) &#123; try &#123; responseJson = JSON.parse(response); &#125; catch (e) &#123; responseJson = &#123;&#125;; responseJson[&#x27;data&#x27;] = response; &#125; &#125; else if (typeof response == &#x27;object&#x27;) &#123; responseJson = response; &#125; else &#123; responseJson = &#123;&#125;; responseJson[&#x27;data&#x27;] = response; &#125; if (Array.isArray(responseJson)) &#123; responseJson = &#123; data: responseJson, code: 0 &#125; &#125; if (responseJson[&#x27;code&#x27;]) &#123; responseJson[&#x27;code&#x27;] = 0; &#125; else if (responseJson[&#x27;status&#x27;]) &#123; responseJson[&#x27;status&#x27;] = 0; &#125; else &#123; responseJson[&#x27;status&#x27;] = 0; &#125; responseJson[&#x27;__sekiro_seq__&#x27;] = seq; var responseText = JSON.stringify(responseJson); console.log(&quot;response :&quot; + responseText); this.socket.send(responseText); &#125;; SekiroClient.prototype.sendFailed = function (seq, errorMessage) &#123; if (typeof errorMessage != &#x27;string&#x27;) &#123; errorMessage = JSON.stringify(errorMessage); &#125; var responseJson = &#123;&#125;; responseJson[&#x27;message&#x27;] = errorMessage; responseJson[&#x27;status&#x27;] = -1; responseJson[&#x27;__sekiro_seq__&#x27;] = seq; var responseText = JSON.stringify(responseJson); console.log(&quot;sekiro: response :&quot; + responseText); this.socket.send(responseText) &#125;; SekiroClient.prototype.registerAction = function (action, handler) &#123; if (typeof action !== &#x27;string&#x27;) &#123; throw new Error(&quot;an action must be string&quot;); &#125; if (typeof handler !== &#x27;function&#x27;) &#123; throw new Error(&quot;a handler must be function&quot;); &#125; console.log(&quot;sekiro: register action: &quot; + action); this.handlers[action] = handler; return this; &#125;; function guid() &#123; function S4() &#123; return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1); &#125; return (S4() + S4() + &quot;-&quot; + S4() + &quot;-&quot; + S4() + &quot;-&quot; + S4() + &quot;-&quot; + S4() + S4() + S4()); &#125; var client = new SekiroClient(&quot;ws://127.0.0.1:5620/business-demo/register?group=rpc-test&amp;clientId=&quot; + guid()); client.registerAction(&quot;getH5fingerprint&quot;, function (request, resolve, reject) &#123; resolve(utility.getH5fingerprint(request[&quot;url&quot;])); &#125;) &#125;)();</span><br></code></pre></td></tr></table></figure><p>与前面的方法一样，使用浏览器开发者工具 Overrides 重写功能，将上面的代码注入到网页 JS 里：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110100543-609996234.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110100543-609996234.png" alt="07"></a></p><p>然后 Sekiro 为我们提供了一些 API：</p><ul><li>查看分组列表：<a href="http://127.0.0.1:5620/business-demo/groupList">http://127.0.0.1:5620/business-demo/groupList</a></li><li>查看队列状态：<a href="http://127.0.0.1:5620/business-demo/clientQueue?group=test">http://127.0.0.1:5620/business-demo/clientQueue?group=test</a></li><li>调用转发：<a href="http://127.0.0.1:5620/business-demo/invoke?group=test&action=test&param=testparm">http://127.0.0.1:5620/business-demo/invoke?group=test&action=test&param=testparm</a></li></ul><p>比如我们现在要调用 <code>utility.getH5fingerprint()</code> 加密方法该怎么办呢？很简单，代码注入到浏览器里后，首先还是要手动登录一遍，手动登录一遍，手动登录一遍，重要的事情说三遍！然后参考上面的调用转发 API 进行改写：</p><ul><li>我们自定义的分组 <code>group</code> 是 <code>rpc-test</code>；</li><li>事件 <code>action</code> 是 <code>getH5fingerprint</code>；</li><li>待加密参数名称为 <code>url</code>， 其值例如为：<code>https://www.baidu.com/</code></li></ul><p>那么我们的调用链接就应该是：<code>http://127.0.0.1:5620/business-demo/invoke?group=rpc-test&amp;action=getH5fingerprint&amp;url=https://www.baidu.com/</code>，直接浏览器打开，返回的字典，data 里面就是加密结果：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110101194-459143555.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110101194-459143555.png" alt="08"></a></p><p>同样的，在本地用 Python 的话，直接 requests 就完事儿了：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110101638-234733886.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110101638-234733886.png" alt="09"></a></p><p>我们前面是把 sekiro_web_client.js 复制下来和通信代码一起注入到浏览器的，这里我们还可以有更加优雅的方法，直接给 document 新创建一个 script，通过链接的形式插入 sekiro_web_client.js，这里需要注意一下几点问题：</p><ol><li>第一个是时机的问题，需要等待 document 这些元素加载完成才能建立 SekiroClient 通信，不然调用 SekiroClient 是会报错的，这里可以用 setTimeout 方法，该方法用于在指定的毫秒数后调用函数或计算表达式，将 SekiroClient 通信代码单独封装成一个函数，比如 <code>function startSekiro()</code>，然后等待 1-2 秒后再执行 SekiroClient 通信代码；</li><li>由于 SekiroClient 通信代码被封装成了函数，此时直接调用 <code>utility.getH5fingerprint</code> 是会提示未定义的，所以我们要先将其导为全局变量，比如 <code>window.getH5fingerprint = utility.getH5fingerprint</code>，后续直接调用 <code>window.getH5fingerprint</code> 即可。</li></ol><p>完整代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* ================================== # @Time : 2022-02-14 # @Author : 微信公众号：K哥爬虫 # @FileName: sekiro.js # @Software: PyCharm # ================================== */</span> (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> newElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>); newElement.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text/javascript&quot;</span>); newElement.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;https://sekiro.virjar.com/sekiro-doc/assets/sekiro_web_client.js&quot;</span>); <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(newElement); <span class="hljs-variable language_">window</span>.<span class="hljs-property">getH5fingerprint</span> = utility.<span class="hljs-property">getH5fingerprint</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">guid</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">function</span> <span class="hljs-title function_">S4</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> (((<span class="hljs-number">1</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()) * <span class="hljs-number">0x10000</span>) | <span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>); &#125; <span class="hljs-keyword">return</span> (<span class="hljs-title function_">S4</span>() + <span class="hljs-title function_">S4</span>() + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">S4</span>() + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">S4</span>() + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">S4</span>() + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">S4</span>() + <span class="hljs-title function_">S4</span>() + <span class="hljs-title function_">S4</span>()); &#125; <span class="hljs-keyword">function</span> <span class="hljs-title function_">startSekiro</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SekiroClient</span>(<span class="hljs-string">&quot;ws://127.0.0.1:5620/business-demo/register?group=rpc-test&amp;clientId=&quot;</span> + <span class="hljs-title function_">guid</span>()); client.<span class="hljs-title function_">registerAction</span>(<span class="hljs-string">&quot;getH5fingerprint&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">request, resolve, reject</span>) &#123; <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getH5fingerprint</span>(request[<span class="hljs-string">&quot;url&quot;</span>])); &#125;) &#125; <span class="hljs-built_in">setTimeout</span>(startSekiro, <span class="hljs-number">2000</span>) &#125;)();<br></code></pre></td></tr></table></figure><p><a href="https://img2022.cnblogs.com/other/2501174/202202/2501174-20220222110102172-1161573398.png"><img src="/2025/02/21/RPC-%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E6%A1%86%E6%9E%B6-Sekiro-%E5%9C%A8%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E4%B8%80%E6%8A%8A%E6%A2%AD%EF%BC%81/2501174-20220222110102172-1161573398.png" alt="10"></a></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点#"></a>优缺点<a href="https://www.cnblogs.com/ikdl/p/15926242.html#%E4%BC%98%E7%BC%BA%E7%82%B9">#</a></h2><p>目前如果不去逆向 JS 来实现加密参数的话，用得最多的就是自动化工具了，比如 Selenium、Puppeteer 等，很显然这些自动化工具配置繁琐、运行效率极低，而 RPC 技术不需要加载多余的资源，稳定性和效率明显都更高，RPC 不需要考虑浏览器指纹、各种环境，如果风控不严的话，高并发也是能够轻松实现的，相反，由于 RPC 是一直挂载在同一个浏览器上的，所以针对风控较严格的站点，比如检测 UA、IP 与加密参数绑定之类的，那么 PRC 调用太频繁就不太行了，当然也可以研究研究浏览器群控技术，操纵多个不同浏览器可以一定程度上缓解这个问题。总之 RPC 技术还是非常牛的，除了 JS 逆向，可以说是目前比较万能、高效的方法了，一定程度上做到了加密参数一把梭！  </p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向进阶，利用 AST 技术还原 JavaScript 混淆代码</title>
    <link href="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向进阶，利用-AST-技术还原-JavaScript-混淆代码"><a href="#逆向进阶，利用-AST-技术还原-JavaScript-混淆代码" class="headerlink" title="逆向进阶，利用 AST 技术还原 JavaScript 混淆代码"></a>逆向进阶，利用 AST 技术还原 JavaScript 混淆代码</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>什么是 AST AST（Abstract Syntax Tree），中文抽象语法树，简称语法树（Syntax Tree），是源代码的抽象语法结构的树状表现形式，树上的每个节点都表示源代码中的一种结构。语法树不是某一种编程语言独有的，JavaScript、Python、Java、Golang 等几乎所</p></blockquote><hr><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101257495-776120536.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101257495-776120536.png"></a></p><h2 id="什么是-AST"><a href="#什么是-AST" class="headerlink" title="什么是 AST#"></a>什么是 AST<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E4%BB%80%E4%B9%88%E6%98%AF-ast">#</a></h2><p>AST（Abstract Syntax Tree），中文抽象语法树，简称语法树（Syntax Tree），是源代码的抽象语法结构的树状表现形式，树上的每个节点都表示源代码中的一种结构。语法树不是某一种编程语言独有的，JavaScript、Python、Java、Golang 等几乎所有编程语言都有语法树。</p><p>小时候我们得到一个玩具，总喜欢把玩具拆解成一个一个小零件，然后按照我们自己的想法，把零件重新组装起来，一个新玩具就诞生了。而 JavaScript 就像一台精妙运作的机器，通过 AST 解析，我们也可以像童年时拆解玩具一样，深入了解 JavaScript 这台机器的各个零部件，然后重新按照我们自己的意愿来组装。</p><p>AST 的用途很广，IDE 的语法高亮、代码检查、格式化、压缩、转译等，都需要先将代码转化成 AST 再进行后续的操作，ES5 和 ES6 语法差异，为了向后兼容，在实际应用中需要进行语法的转换，也会用到 AST。AST 并不是为了逆向而生，但做逆向学会了 AST，在解混淆时可以如鱼得水。</p><p>AST 有一个在线解析网站：<a href="https://astexplorer.net/">https://astexplorer.net/</a> ，顶部可以选择语言、编译器、是否开启转化等，如下图所示，区域①是源代码，区域②是对应的 AST 语法树，区域③是转换代码，可以对语法树进行各种操作，区域④是转换后生成的新代码。图中原来的 Unicode 字符经过操作之后就变成了正常字符。</p><p>语法树没有单一的格式，选择不同的语言、不同的编译器，得到的结果也是不一样的，在 JavaScript 中，编译器有 Acorn、Espree、Esprima、Recast、Uglify-JS 等，使用最多的是 Babel，后续的学习也是以 Babel 为例。</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101316575-1808878179.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101316575-1808878179.png" alt="01"></a></p><h2 id="AST-在编译中的位置"><a href="#AST-在编译中的位置" class="headerlink" title="AST 在编译中的位置#"></a>AST 在编译中的位置<a href="https://www.cnblogs.com/ikdl/p/16228740.html#ast-%E5%9C%A8%E7%BC%96%E8%AF%91%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE">#</a></h2><p>在编译原理中，编译器转换代码通常要经过三个步骤：词法分析（Lexical Analysis）、语法分析（Syntax Analysis）、代码生成（Code Generation），下图生动展示了这一过程：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101336638-888901863.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101336638-888901863.png" alt="02"></a></p><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析#"></a>词法分析<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90">#</a></h3><p>词法分析阶段是编译过程的第一个阶段，这个阶段的任务是从左到右一个字符一个字符地读入源程序，然后根据构词规则识别单词，生成 token 符号流，比如 <code>isPanda(&#39;🐼&#39;)</code>，会被拆分成 <code>isPanda</code>，<code>(</code>，<code>&#39;🐼&#39;</code>，<code>)</code> 四部分，每部分都有不同的含义，可以将词法分析过程想象为不同类型标记的列表或数组。</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101354716-611471191.gif"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101354716-611471191.gif" alt="03"></a></p><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析#"></a>语法分析<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90">#</a></h3><p>语法分析是编译过程的一个逻辑阶段，语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，比如“程序”，“语句”，“表达式”等，前面的例子中，<code>isPanda(&#39;🐼&#39;)</code> 就会被分析为一条表达语句 <code>ExpressionStatement</code>，<code>isPanda()</code> 就会被分析成一个函数表达式 <code>CallExpression</code>，<code>🐼</code> 就会被分析成一个变量 <code>Literal</code> 等，众多语法之间的依赖、嵌套关系，就构成了一个树状结构，即 AST 语法树。</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101415313-1435211089.gif"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101415313-1435211089.gif" alt="04"></a></p><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成#"></a>代码生成<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">#</a></h3><p>代码生成是最后一步，将 AST 语法树转换成可执行代码即可，在转换之前，我们可以直接操作语法树，进行增删改查等操作，例如，我们可以确定变量的声明位置、更改变量的值、删除某些节点等，我们将语句 <code>isPanda(&#39;🐼&#39;)</code> 修改为一个布尔类型的 <code>Literal</code>：<code>true</code>，语法树就有如下变化：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101416281-1772382765.gif"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101416281-1772382765.gif" alt="05"></a></p><h2 id="Babel-简介"><a href="#Babel-简介" class="headerlink" title="Babel 简介#"></a>Babel 简介<a href="https://www.cnblogs.com/ikdl/p/16228740.html#babel-%E7%AE%80%E4%BB%8B">#</a></h2><p>Babel 是一个 JavaScript 编译器，也可以说是一个解析库，Babel 中文网：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a> ，Babel 英文官网：<a href="https://babeljs.io/">https://babeljs.io/</a> ，Babel 内置了很多分析 JavaScript 代码的方法，我们可以利用 Babel 将 JavaScript 代码转换成 AST 语法树，然后增删改查等操作之后，再转换成 JavaScript 代码。</p><p>Babel 包含的各种功能包、API、各方法可选参数等，都非常多，本文不一一列举，在实际使用过程中，应当多查询官方文档，或者参考文末给出的一些学习资料。Babel 的安装和其他 Node 包一样，需要哪个安装哪个即可，比如 <code>npm install @babel/core @babel/parser @babel/traverse @babel/generator</code></p><p>在做逆向解混淆中，主要用到了 Babel 的以下几个功能包，本文也仅介绍以下几个功能包：</p><ol><li><code>@babel/core</code>：Babel 编译器本身，提供了 babel 的编译 API；</li><li><code>@babel/parser</code>：将 JavaScript 代码解析成 AST 语法树；</li><li><code>@babel/traverse</code>：遍历、修改 AST 语法树的各个节点；</li><li><code>@babel/generator</code>：将 AST 还原成 JavaScript 代码；</li><li><code>@babel/types</code>：判断、验证节点的类型、构建新 AST 节点等。</li></ol><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101417081-710154171.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101417081-710154171.png" alt="06"></a></p><h3 id="babel-x2F-core"><a href="#babel-x2F-core" class="headerlink" title="@babel&#x2F;core#"></a>@babel&#x2F;core<a href="https://www.cnblogs.com/ikdl/p/16228740.html#babelcore">#</a></h3><p>Babel 编译器本身，被拆分成了三个模块：<code>@babel/parser</code>、<code>@babel/traverse</code>、<code>@babel/generator</code>，比如以下方法的导入效果都是一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>).<span class="hljs-property">parse</span>; <span class="hljs-keyword">const</span> parse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>).<span class="hljs-property">parse</span>; <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>).<span class="hljs-property">traverse</span><br></code></pre></td></tr></table></figure><h3 id="babel-x2F-parser"><a href="#babel-x2F-parser" class="headerlink" title="@babel&#x2F;parser#"></a>@babel&#x2F;parser<a href="https://www.cnblogs.com/ikdl/p/16228740.html#babelparser">#</a></h3><p><code>@babel/parser</code> 可以将 JavaScript 代码解析成 AST 语法树，其中主要提供了两个方法：</p><ul><li><code>parser.parse(code, [&#123;options&#125;])</code>：解析一段 JavaScript 代码；</li><li><code>parser.parseExpression(code, [&#123;options&#125;])</code>：考虑到了性能问题，解析单个 JavaScript 表达式。</li></ul><p>部分可选参数 <code>options</code>：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>allowImportExportEverywhere</code></td><td>默认 <code>import</code> 和 <code>export</code> 声明语句只能出现在程序的最顶层，设置为 <code>true</code> 则在任何地方都可以声明</td></tr><tr><td><code>allowReturnOutsideFunction</code></td><td>默认如果在顶层中使用 <code>return</code> 语句会引起错误，设置为 <code>true</code> 就不会报错</td></tr><tr><td><code>sourceType</code></td><td>默认为 <code>script</code>，当代码中含有 <code>import</code> 、<code>export</code> 等关键字时会报错，需要指定为 <code>module</code></td></tr><tr><td><code>errorRecovery</code></td><td>默认如果 babel 发现一些不正常的代码就会抛出错误，设置为 <code>true</code> 则会在保存解析错误的同时继续解析代码，错误的记录将被保存在最终生成的 AST 的 errors 属性中，当然如果遇到严重的错误，依然会终止解析</td></tr></tbody></table><p>举个例子看得比较清楚：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> code = <span class="hljs-string">&quot;const a = 1;&quot;</span>; <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code, &#123;<span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>&#125;) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast)<br></code></pre></td></tr></table></figure><p><code>&#123;sourceType: &quot;module&quot;&#125;</code> 演示了如何添加可选参数，输出的就是 AST 语法树，这和在线网站 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 解析出来的语法树是一样的：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101419424-269858745.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101419424-269858745.png" alt="07"></a></p><h3 id="babel-x2F-generator"><a href="#babel-x2F-generator" class="headerlink" title="@babel&#x2F;generator#"></a>@babel&#x2F;generator<a href="https://www.cnblogs.com/ikdl/p/16228740.html#babelgenerator">#</a></h3><p><code>@babel/generator</code> 可以将 AST 还原成 JavaScript 代码，提供了一个 <code>generate</code> 方法：<code>generate(ast, [&#123;options&#125;], code)</code>。</p><p>部分可选参数 <code>options</code>：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>auxiliaryCommentBefore</code></td><td>在输出文件内容的头部添加注释块文字</td></tr><tr><td><code>auxiliaryCommentAfter</code></td><td>在输出文件内容的末尾添加注释块文字</td></tr><tr><td><code>comments</code></td><td>输出内容是否包含注释</td></tr><tr><td><code>compact</code></td><td>输出内容是否不添加空格，避免格式化</td></tr><tr><td><code>concise</code></td><td>输出内容是否减少空格使其更紧凑一些</td></tr><tr><td><code>minified</code></td><td>是否压缩输出代码</td></tr><tr><td><code>retainLines</code></td><td>尝试在输出代码中使用与源代码中相同的行号</td></tr></tbody></table><p>接着前面的例子，原代码是 <code>const a = 1;</code>，现在我们把 <code>a</code> 变量修改为 <code>b</code>，值 <code>1</code> 修改为 <code>2</code>，然后将 AST 还原生成新的 JS 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> code = <span class="hljs-string">&quot;const a = 1;&quot;</span>; <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code, &#123;<span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>&#125;) ast.<span class="hljs-property">program</span>.<span class="hljs-property">body</span>[<span class="hljs-number">0</span>].<span class="hljs-property">declarations</span>[<span class="hljs-number">0</span>].<span class="hljs-property">id</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;b&quot;</span> ast.<span class="hljs-property">program</span>.<span class="hljs-property">body</span>[<span class="hljs-number">0</span>].<span class="hljs-property">declarations</span>[<span class="hljs-number">0</span>].<span class="hljs-property">init</span>.<span class="hljs-property">value</span> = <span class="hljs-number">2</span> <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">generate</span>(ast, &#123;<span class="hljs-attr">minified</span>: <span class="hljs-literal">true</span>&#125;) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>)<br></code></pre></td></tr></table></figure><p>最终输出的是 <code>const b=2;</code>，变量名和值都成功更改了，由于加了压缩处理，等号左右两边的空格也没了。</p><p>代码里 <code>&#123;minified: true&#125;</code> 演示了如何添加可选参数，这里表示压缩输出代码，<code>generate</code> 得到的 <code>result</code> 得到的是一个对象，其中的 <code>code</code> 属性才是最终的 JS 代码。</p><p>代码里 <code>ast.program.body[0].declarations[0].id.name</code> 是 a 在 AST 中的位置，<code>ast.program.body[0].declarations[0].init.value</code> 是 1 在 AST 中的位置，如下图所示：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101420386-1098396170.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101420386-1098396170.png" alt="08"></a></p><h3 id="babel-x2F-traverse"><a href="#babel-x2F-traverse" class="headerlink" title="@babel&#x2F;traverse#"></a>@babel&#x2F;traverse<a href="https://www.cnblogs.com/ikdl/p/16228740.html#babeltraverse">#</a></h3><p>当代码多了，我们不可能像前面那样挨个定位并修改，对于相同类型的节点，我们可以直接遍历所有节点来进行修改，这里就用到了 <code>@babel/traverse</code>，它通常和 <code>visitor</code> 一起使用，<code>visitor</code> 是一个对象，这个名字是可以随意取的，<code>visitor</code> 里可以定义一些方法来过滤节点，这里还是用一个例子来演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> code = <span class="hljs-string">` const a = 1500; const b = 60; const c = &quot;hi&quot;; const d = 787; const e = &quot;1244&quot;; `</span> <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code) <span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">NumericLiteral</span>(path)&#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = (path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span> &#125;, <span class="hljs-title class_">StringLiteral</span>(path)&#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span> &#125; &#125; <span class="hljs-title function_">traverse</span>(ast, visitor) <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">generate</span>(ast) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>)<br></code></pre></td></tr></table></figure><p>这里的原始代码定义了 abcde 五个变量，其值有数字也有字符串，我们在 AST 中可以看到对应的类型为 <code>NumericLiteral</code> 和 <code>StringLiteral</code>：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101420590-466240592.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101420590-466240592.png" alt="09"></a></p><p>然后我们声明了一个 <code>visitor</code> 对象，然后定义对应类型的处理方法，<code>traverse</code> 接收两个参数，第一个是 AST 对象，第二个是 <code>visitor</code>，当 <code>traverse</code> 遍历所有节点，遇到节点类型为 <code>NumericLiteral</code> 和 <code>StringLiteral</code> 时，就会调用 <code>visitor</code> 中对应的处理方法，<code>visitor</code> 中的方法会接收一个当前节点的 <code>path</code> 对象，该对象的类型是 <code>NodePath</code>，该对象有非常多的属性，以下介绍几种最常用的：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>toString()</code></td><td>当前路径的源码</td></tr><tr><td><code>node</code></td><td>当前路径的节点</td></tr><tr><td><code>parent</code></td><td>当前路径的父级节点</td></tr><tr><td><code>parentPath</code></td><td>当前路径的父级路径</td></tr><tr><td><code>type</code></td><td>当前路径的类型</td></tr></tbody></table><p>PS：<code>path</code> 对象除了有很多属性以外，还有很多方法，比如替换节点、删除节点、插入节点、寻找父级节点、获取同级节点、添加注释、判断节点类型等，可在需要时查询相关文档或查看源码，后续介绍 <code>@babel/types</code> 部分将会举部分例子来演示，以后的实战文章中也会有相关实例，篇幅有限本文不再细说。</p><p>因此在上面的代码中，<code>path.node.value</code> 就拿到了变量的值，然后我们就可以进一步对其进行修改了。以上代码运行后，所有数字都会加上100后再乘以2，所有字符串都会被替换成 <code>I Love JavaScript!</code>，结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">3200</span>; <span class="hljs-keyword">const</span> b = <span class="hljs-number">320</span>; <span class="hljs-keyword">const</span> c = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>; <span class="hljs-keyword">const</span> d = <span class="hljs-number">1774</span>; <span class="hljs-keyword">const</span> e = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>;<br></code></pre></td></tr></table></figure><p>如果多个类型的节点，处理的方式都一样，那么还可以使用 <code>|</code> 将所有节点连接成字符串，将同一个方法应用到所有节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-string">&quot;NumericLiteral|StringLiteral&quot;</span>(path) &#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span> &#125; &#125;<br></code></pre></td></tr></table></figure><p><code>visitor</code> 对象有多种写法，以下几种写法的效果都是一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">NumericLiteral</span>(path)&#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = (path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span> &#125;, <span class="hljs-title class_">StringLiteral</span>(path)&#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span> &#125; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">NumericLiteral</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">path</span>)&#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = (path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span> &#125;, <span class="hljs-title class_">StringLiteral</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">path</span>)&#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span> &#125; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">NumericLiteral</span>: &#123; <span class="hljs-title function_">enter</span>(<span class="hljs-params">path</span>) &#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = (path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span> &#125; &#125;, <span class="hljs-title class_">StringLiteral</span>: &#123; <span class="hljs-title function_">enter</span>(<span class="hljs-params">path</span>) &#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span> &#125; &#125; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title function_">enter</span>(<span class="hljs-params">path</span>) &#123; <span class="hljs-keyword">if</span> (path.<span class="hljs-property">node</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;NumericLiteral&quot;</span>) &#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = (path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span> &#125; <span class="hljs-keyword">if</span> (path.<span class="hljs-property">node</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;StringLiteral&quot;</span>) &#123; path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span> &#125; &#125; &#125;<br></code></pre></td></tr></table></figure><p>以上几种写法中有用到了 <code>enter</code> 方法，在节点的遍历过程中，进入节点（enter）与退出（exit）节点都会访问一次节点，<code>traverse</code> 默认在进入节点时进行节点的处理，如果要在退出节点时处理，那么在 <code>visitor</code> 中就必须声明 <code>exit</code> 方法。</p><h3 id="babel-x2F-types"><a href="#babel-x2F-types" class="headerlink" title="@babel&#x2F;types#"></a>@babel&#x2F;types<a href="https://www.cnblogs.com/ikdl/p/16228740.html#babeltypes">#</a></h3><p><code>@babel/types</code> 主要用于构建新的 AST 节点，前面的示例代码为 <code>const a = 1;</code>，如果想要增加内容，比如变成 <code>const a = 1; const b = a * 5 + 1;</code>，就可以通过 <code>@babel/types</code> 来实现。</p><p>首先观察一下 AST 语法树，原语句只有一个 <code>VariableDeclaration</code> 节点，现在增加了一个：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101420807-432415896.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101420807-432415896.png" alt="10"></a></p><p>那么我们的思路就是在遍历节点时，遍历到 <code>VariableDeclaration</code> 节点，就在其后面增加一个 <code>VariableDeclaration</code> 节点，生成 <code>VariableDeclaration</code> 节点，可以使用 <code>types.variableDeclaration()</code> 方法，在 types 中各种方法名称和我们在 AST 中看到的是一样的，只不过首字母是小写的，所以我们不需要知道所有方法的情况下，也能大致推断其方法名，只知道这个方法还不行，还得知道传入的参数是什么，可以查文档，不过K哥这里推荐直接看源码，非常清晰明了，以 Pycharm 为例，按住 Ctrl 键，再点击方法名，就进到源码里了：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101421832-1311123747.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101421832-1311123747.png" alt="11"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">variableDeclaration</span>(<span class="hljs-params">kind: <span class="hljs-string">&quot;var&quot;</span> | <span class="hljs-string">&quot;let&quot;</span> | <span class="hljs-string">&quot;const&quot;</span>, declarations: <span class="hljs-built_in">Array</span>&lt;BabelNodeVariableDeclarator&gt;</span>)<br></code></pre></td></tr></table></figure><p>可以看到需要 <code>kind</code> 和 <code>declarations</code> 两个参数，其中 <code>declarations</code> 是 <code>VariableDeclarator</code> 类型的节点组成的列表，所以我们可以先写出以下 <code>visitor</code> 部分的代码，其中 <code>path.insertAfter()</code> 是在该节点之后插入新节点的意思：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">VariableDeclaration</span>(path) &#123; <span class="hljs-keyword">let</span> declaration = types.<span class="hljs-title function_">variableDeclaration</span>(<span class="hljs-string">&quot;const&quot;</span>, [declarator]) path.<span class="hljs-title function_">insertAfter</span>(declaration) &#125; &#125;<br></code></pre></td></tr></table></figure><p>接下来我们还需要进一步定义 <code>declarator</code>，也就是 <code>VariableDeclarator</code> 类型的节点，查询其源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">variableDeclarator</span>(<span class="hljs-params">id: BabelNodeLVal, init?: BabelNodeExpression</span>)<br></code></pre></td></tr></table></figure><p>观察 AST，id 为 <code>Identifier</code> 对象，init 为 <code>BinaryExpression</code> 对象，如下图所示：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101422299-1490782652.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101422299-1490782652.png" alt="12"></a></p><p>先来处理 id，可以使用 <code>types.identifier()</code> 方法来生成，其源码为 <code>function identifier(name: string)</code>，name 在这里就是 b 了，此时 <code>visitor</code> 代码就可以这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">VariableDeclaration</span>(path) &#123; <span class="hljs-keyword">let</span> declarator = types.<span class="hljs-title function_">variableDeclarator</span>(types.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">&quot;b&quot;</span>), init) <span class="hljs-keyword">let</span> declaration = types.<span class="hljs-title function_">variableDeclaration</span>(<span class="hljs-string">&quot;const&quot;</span>, [declarator]) path.<span class="hljs-title function_">insertAfter</span>(declaration) &#125; &#125;<br></code></pre></td></tr></table></figure><p>然后再来看 init 该如何定义，首先仍然是看 AST 结构：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101423687-1031514148.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101423687-1031514148.png" alt="13"></a></p><p>init 为 <code>BinaryExpression</code> 对象，left 左边是 <code>BinaryExpression</code>，right 右边是 <code>NumericLiteral</code>，可以用 <code>types.binaryExpression()</code> 方法来生成 init，其源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">binaryExpression</span>(<span class="hljs-params"> operator: <span class="hljs-string">&quot;+&quot;</span> | <span class="hljs-string">&quot;-&quot;</span> | <span class="hljs-string">&quot;/&quot;</span> | <span class="hljs-string">&quot;%&quot;</span> | <span class="hljs-string">&quot;*&quot;</span> | <span class="hljs-string">&quot;**&quot;</span> | <span class="hljs-string">&quot;&amp;&quot;</span> | <span class="hljs-string">&quot;|&quot;</span> | <span class="hljs-string">&quot;&gt;&gt;&quot;</span> | <span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span> | <span class="hljs-string">&quot;&lt;&lt;&quot;</span> | <span class="hljs-string">&quot;^&quot;</span> | <span class="hljs-string">&quot;==&quot;</span> | <span class="hljs-string">&quot;===&quot;</span> | <span class="hljs-string">&quot;!=&quot;</span> | <span class="hljs-string">&quot;!==&quot;</span> | <span class="hljs-string">&quot;in&quot;</span> | <span class="hljs-string">&quot;instanceof&quot;</span> | <span class="hljs-string">&quot;&gt;&quot;</span> | <span class="hljs-string">&quot;&lt;&quot;</span> | <span class="hljs-string">&quot;&gt;=&quot;</span> | <span class="hljs-string">&quot;&lt;=&quot;</span>, left: BabelNodeExpression | BabelNodePrivateName, right: BabelNodeExpression </span>)<br></code></pre></td></tr></table></figure><p>此时 <code>visitor</code> 代码就可以这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">VariableDeclaration</span>(path) &#123; <span class="hljs-keyword">let</span> init = types.<span class="hljs-title function_">binaryExpression</span>(<span class="hljs-string">&quot;+&quot;</span>, left, right) <span class="hljs-keyword">let</span> declarator = types.<span class="hljs-title function_">variableDeclarator</span>(types.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">&quot;b&quot;</span>), init) <span class="hljs-keyword">let</span> declaration = types.<span class="hljs-title function_">variableDeclaration</span>(<span class="hljs-string">&quot;const&quot;</span>, [declarator]) path.<span class="hljs-title function_">insertAfter</span>(declaration) &#125; &#125;<br></code></pre></td></tr></table></figure><p>然后继续构造 left 和 right，和前面的方法一样，观察 AST 语法树，查询对应方法应该传入的参数，层层嵌套，直到把所有的节点都构造完毕，最终的 <code>visitor</code> 代码应该是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">VariableDeclaration</span>(path) &#123; <span class="hljs-keyword">let</span> left = types.<span class="hljs-title function_">binaryExpression</span>(<span class="hljs-string">&quot;*&quot;</span>, types.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">&quot;a&quot;</span>), types.<span class="hljs-title function_">numericLiteral</span>(<span class="hljs-number">5</span>)) <span class="hljs-keyword">let</span> right = types.<span class="hljs-title function_">numericLiteral</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">let</span> init = types.<span class="hljs-title function_">binaryExpression</span>(<span class="hljs-string">&quot;+&quot;</span>, left, right) <span class="hljs-keyword">let</span> declarator = types.<span class="hljs-title function_">variableDeclarator</span>(types.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">&quot;b&quot;</span>), init) <span class="hljs-keyword">let</span> declaration = types.<span class="hljs-title function_">variableDeclaration</span>(<span class="hljs-string">&quot;const&quot;</span>, [declarator]) path.<span class="hljs-title function_">insertAfter</span>(declaration) path.<span class="hljs-title function_">stop</span>() &#125; &#125;<br></code></pre></td></tr></table></figure><p>注意：<code>path.insertAfter()</code> 插入节点语句后面加了一句 <code>path.stop()</code>，表示插入完成后立即停止遍历当前节点和后续的子节点，添加的新节点也是 <code>VariableDeclaration</code>，如果不加停止语句的话，就会无限循环插入下去。</p><p>插入新节点后，再转换成 JavaScript 代码，就可以看到多了一行新代码，如下图所示：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101426333-165530584.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101426333-165530584.png" alt="14"></a></p><h2 id="常见混淆还原"><a href="#常见混淆还原" class="headerlink" title="常见混淆还原#"></a>常见混淆还原<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E5%B8%B8%E8%A7%81%E6%B7%B7%E6%B7%86%E8%BF%98%E5%8E%9F">#</a></h2><p>了解了 AST 和 babel 后，就可以对 JavaScript 混淆代码进行还原了，以下是部分样例，带你进一步熟悉 babel 的各种操作。</p><h3 id="字符串还原"><a href="#字符串还原" class="headerlink" title="字符串还原#"></a>字符串还原<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%98%E5%8E%9F">#</a></h3><p>文章开头的图中举了个例子，正常字符被换成了 Unicode 编码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>[<span class="hljs-string">&#x27;\u006c\u006f\u0067&#x27;</span>](<span class="hljs-string">&#x27;\u0048\u0065\u006c\u006c\u006f\u0020\u0077\u006f\u0072\u006c\u0064\u0021&#x27;</span>)<br></code></pre></td></tr></table></figure><p>观察 AST 结构：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101426636-489998048.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101426636-489998048.png" alt="15"></a></p><p>我们发现 Unicode 编码对应的是 <code>raw</code>，而 <code>rawValue</code> 和 <code>value</code> 都是正常的，所以我们可以将 <code>raw</code> 替换成 <code>rawValue</code> 或 <code>value</code> 即可，需要注意的是引号的问题，本来是 <code>console[&quot;log&quot;]</code>，你还原后变成了 <code>console[log]</code>，自然会报错的，除了替换值以外，这里直接删除 extra 节点，或者删除 raw 值也是可以的，所以以下几种写法都可以还原代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> code = <span class="hljs-string">`console[&#x27;\u006c\u006f\u0067&#x27;](&#x27;\u0048\u0065\u006c\u006c\u006f\u0020\u0077\u006f\u0072\u006c\u0064\u0021&#x27;)`</span> <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code) <span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">StringLiteral</span>(path) &#123; <span class="hljs-comment">// 以下方法均可 // path.node.extra.raw = path.node.rawValue // path.node.extra.raw = &#x27;&quot;&#x27; + path.node.value + &#x27;&quot;&#x27; // delete path.node.extra delete path.node.extra.raw &#125; &#125; traverse(ast, visitor) const result = generate(ast) console.log(result.code)</span><br></code></pre></td></tr></table></figure><p>还原结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>[<span class="hljs-string">&quot;log&quot;</span>](<span class="hljs-string">&quot;Hello world!&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="表达式还原"><a href="#表达式还原" class="headerlink" title="表达式还原#"></a>表达式还原<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%98%E5%8E%9F">#</a></h3><p>之前K哥写过 <a href="https://mp.weixin.qq.com/s/ddNNxTx66-tg55Vmzo-wJQ">JSFuck 混淆的还原</a>，其中有介绍 <code>![]</code> 可表示 false，<code>!![]</code> 或者 <code>!+[]</code> 可表示 true，在一些混淆代码中，经常有这些操作，把简单的表达式复杂化，往往需要执行一下语句，才能得到真正的结果，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = !![]+!![]+!![]; <span class="hljs-keyword">const</span> b = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">12.34</span> * <span class="hljs-number">2.12</span>) <span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span> &gt;&gt; <span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">1</span> <span class="hljs-keyword">const</span> d = <span class="hljs-title class_">String</span>(<span class="hljs-number">21.3</span> + <span class="hljs-number">14</span> * <span class="hljs-number">1.32</span>) <span class="hljs-keyword">const</span> e = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;1.893&quot;</span> + <span class="hljs-string">&quot;45.9088&quot;</span>) <span class="hljs-keyword">const</span> f = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;23.2334&quot;</span> + <span class="hljs-string">&quot;21.89112&quot;</span>) <span class="hljs-keyword">const</span> g = <span class="hljs-number">20</span> &lt; <span class="hljs-number">18</span> ? <span class="hljs-string">&#x27;未成年&#x27;</span> : <span class="hljs-string">&#x27;成年&#x27;</span><br></code></pre></td></tr></table></figure><p>想要执行语句，我们需要了解 <code>path.evaluate()</code> 方法，该方法会对 path 对象进行执行操作，自动计算出结果，返回一个对象，其中的 <code>confident</code> 属性表示置信度，<code>value</code> 表示计算结果，使用 <code>types.valueToNode()</code> 方法创建节点，使用 <code>path.replaceInline()</code> 方法将节点替换成计算结果生成的新节点，替换方法有一下几种：</p><ul><li><code>replaceWith</code>：用一个节点替换另一个节点；</li><li><code>replaceWithMultiple</code>：用多个节点替换另一个节点；</li><li><code>replaceWithSourceString</code>：将传入的源码字符串解析成对应 Node 后再替换，性能较差，不建议使用；</li><li><code>replaceInline</code>：用一个或多个节点替换另一个节点，相当于同时有了前两个函数的功能。</li></ul><p>对应的 AST 处理代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>) <span class="hljs-keyword">const</span> code = <span class="hljs-string">` const a = !![]+!![]+!![]; const b = Math.floor(12.34 * 2.12) const c = 10 &gt;&gt; 3 &lt;&lt; 1 const d = String(21.3 + 14 * 1.32) const e = parseInt(&quot;1.893&quot; + &quot;45.9088&quot;) const f = parseFloat(&quot;23.2334&quot; + &quot;21.89112&quot;) const g = 20 &lt; 18 ? &#x27;未成年&#x27; : &#x27;成年&#x27; `</span> <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code) <span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-string">&quot;BinaryExpression|CallExpression|ConditionalExpression&quot;</span>(path) &#123; <span class="hljs-keyword">const</span> &#123;confident, value&#125; = path.evaluate() <span class="hljs-keyword">if</span> (confident)&#123; path.<span class="hljs-title function_">replaceInline</span>(types.<span class="hljs-title function_">valueToNode</span>(value)) &#125; &#125; &#125; <span class="hljs-title function_">traverse</span>(ast, visitor) <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">generate</span>(ast) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>)<br></code></pre></td></tr></table></figure><p>最终结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">3</span>; <span class="hljs-keyword">const</span> b = <span class="hljs-number">26</span>; <span class="hljs-keyword">const</span> c = <span class="hljs-number">2</span>; <span class="hljs-keyword">const</span> d = <span class="hljs-string">&quot;39.78&quot;</span>; <span class="hljs-keyword">const</span> e = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;1.89345.9088&quot;</span>); <span class="hljs-keyword">const</span> f = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;23.233421.89112&quot;</span>); <span class="hljs-keyword">const</span> g = <span class="hljs-string">&quot;\u6210\u5E74&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="删除未使用变量"><a href="#删除未使用变量" class="headerlink" title="删除未使用变量#"></a>删除未使用变量<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E5%88%A0%E9%99%A4%E6%9C%AA%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F">#</a></h3><p>有时候代码里会有一些并没有使用到的多余变量，删除这些多余变量有助于更加高效的分析代码，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>; <span class="hljs-keyword">const</span> b = a * <span class="hljs-number">2</span>; <span class="hljs-keyword">const</span> c = <span class="hljs-number">2</span>; <span class="hljs-keyword">const</span> d = b + <span class="hljs-number">1</span>; <span class="hljs-keyword">const</span> e = <span class="hljs-number">3</span>; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d)<br></code></pre></td></tr></table></figure><p>删除多余变量，首先要了解 <code>NodePath</code> 中的 <code>scope</code>，<code>scope</code> 的作用主要是查找标识符的作用域、获取并修改标识符的所有引用等，删除未使用变量主要用到了 <code>scope.getBinding()</code> 方法，传入的值是当前节点能够引用到的标识符名称，返回的关键属性有以下几个：</p><ul><li><code>identifier</code>：标识符的 Node 对象；</li><li><code>path</code>：标识符的 NodePath 对象；</li><li><code>constant</code>：标识符是否为常量；</li><li><code>referenced</code>：标识符是否被引用；</li><li><code>references</code>：标识符被引用的次数；</li><li><code>constantViolations</code>：如果标识符被修改，则会存放所有修改该标识符节点的 Path 对象；</li><li><code>referencePaths</code>：如果标识符被引用，则会存放所有引用该标识符节点的 Path 对象。</li></ul><p>所以我们可以通过 <code>constantViolations</code>、<code>referenced</code>、<code>references</code>、<code>referencePaths</code> 多个参数来判断变量是否可以被删除，AST 处理代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> code = <span class="hljs-string">` const a = 1; const b = a * 2; const c = 2; const d = b + 1; const e = 3; console.log(d) `</span> <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code) <span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">VariableDeclarator</span>(path)&#123; <span class="hljs-keyword">const</span> binding = path.<span class="hljs-property">scope</span>.<span class="hljs-title function_">getBinding</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">id</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// 如标识符被修改过，则不能进行删除动作。 if (!binding || binding.constantViolations.length &gt; 0) &#123; return; &#125; // 未被引用 if (!binding.referenced) &#123; path.remove(); &#125; // 被引用次数为0 // if (binding.references === 0) &#123; // path.remove(); // &#125; // 长度为0，变量没有被引用过 // if (binding.referencePaths.length === 0) &#123; // path.remove(); // &#125; &#125; &#125; traverse(ast, visitor) const result = generate(ast) console.log(result.code)</span><br></code></pre></td></tr></table></figure><p>处理后的代码（未使用的 b、c、e 变量已被删除）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>; <span class="hljs-keyword">const</span> b = a * <span class="hljs-number">2</span>; <span class="hljs-keyword">const</span> d = b + <span class="hljs-number">1</span>; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<br></code></pre></td></tr></table></figure><h3 id="删除冗余逻辑代码"><a href="#删除冗余逻辑代码" class="headerlink" title="删除冗余逻辑代码#"></a>删除冗余逻辑代码<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E5%88%A0%E9%99%A4%E5%86%97%E4%BD%99%E9%80%BB%E8%BE%91%E4%BB%A3%E7%A0%81">#</a></h3><p>有时候为了增加逆向难度，会有很多嵌套的 if-else 语句，大量判断为假的冗余逻辑代码，同样可以利用 AST 将其删除掉，只留下判断为真的，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> example = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">let</span> a; <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123; a = <span class="hljs-number">1</span>; &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span>) &#123; a = <span class="hljs-number">2</span>; &#125; <span class="hljs-keyword">else</span> &#123; a = <span class="hljs-number">3</span>; &#125; &#125; <span class="hljs-keyword">return</span> a; &#125;;<br></code></pre></td></tr></table></figure><p>观察 AST，判断条件对应的是 <code>test</code> 节点，if 对应的是 <code>consequent</code> 节点，else 对应的是 <code>alternate</code> 节点，如下图所示：</p><p><a href="https://img2022.cnblogs.com/other/2501174/202204/2501174-20220427101427003-221259515.png"><img src="/2025/02/14/%E9%80%86%E5%90%91%E8%BF%9B%E9%98%B6%EF%BC%8C%E5%88%A9%E7%94%A8-AST-%E6%8A%80%E6%9C%AF%E8%BF%98%E5%8E%9F-JavaScript-%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81/2501174-20220427101427003-221259515.png" alt="16"></a></p><p>AST 处理思路以及代码：</p><ol><li>筛选出 <code>BooleanLiteral</code> 和 <code>NumericLiteral</code> 节点，取其对应的值，即 <code>path.node.test.value</code>；</li><li>判断 <code>value</code> 值为真，则将节点替换成 <code>consequent</code> 节点下的内容，即 <code>path.node.consequent.body</code>；</li><li>判断 <code>value</code> 值为假，则替换成 <code>alternate</code> 节点下的内容，即 <code>path.node.alternate.body</code>；</li><li>有的 if 语句可能没有写 else，也就没有 <code>alternate</code>，所以这种情况下判断 <code>value</code> 值为假，则直接移除该节点，即 <code>path.remove()</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/types&#x27;</span>); <span class="hljs-keyword">const</span> code = <span class="hljs-string">` const example = function () &#123; let a; if (false) &#123; a = 1; &#125; else &#123; if (1) &#123; a = 2; &#125; else &#123; a = 3; &#125; &#125; return a; &#125;; `</span> <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code) <span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title function_">enter</span>(<span class="hljs-params">path</span>) &#123; <span class="hljs-keyword">if</span> (types.<span class="hljs-title function_">isBooleanLiteral</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">test</span>) || types.<span class="hljs-title function_">isNumericLiteral</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">test</span>)) &#123; <span class="hljs-keyword">if</span> (path.<span class="hljs-property">node</span>.<span class="hljs-property">test</span>.<span class="hljs-property">value</span>) &#123; path.<span class="hljs-title function_">replaceInline</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">consequent</span>.<span class="hljs-property">body</span>); &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">if</span> (path.<span class="hljs-property">node</span>.<span class="hljs-property">alternate</span>) &#123; path.<span class="hljs-title function_">replaceInline</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">alternate</span>.<span class="hljs-property">body</span>); &#125; <span class="hljs-keyword">else</span> &#123; path.<span class="hljs-title function_">remove</span>() &#125; &#125; &#125; &#125; &#125; <span class="hljs-title function_">traverse</span>(ast, visitor) <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">generate</span>(ast) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>)<br></code></pre></td></tr></table></figure><p>处理结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> example = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">let</span> a; a = <span class="hljs-number">2</span>; <span class="hljs-keyword">return</span> a; &#125;;<br></code></pre></td></tr></table></figure><h3 id="switch-case-反控制流平坦化"><a href="#switch-case-反控制流平坦化" class="headerlink" title="switch-case 反控制流平坦化#"></a>switch-case 反控制流平坦化<a href="https://www.cnblogs.com/ikdl/p/16228740.html#switch-case-%E5%8F%8D%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96">#</a></h3><p>控制流平坦化是混淆当中最常见的，通过 <code>if-else</code> 或者 <code>while-switch-case</code> 语句分解步骤，示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> _0x34e16a = <span class="hljs-string">&#x27;3,4,0,5,1,2&#x27;</span>[<span class="hljs-string">&#x27;split&#x27;</span>](<span class="hljs-string">&#x27;,&#x27;</span>); <span class="hljs-keyword">let</span> _0x2eff02 = <span class="hljs-number">0x0</span>; <span class="hljs-keyword">while</span> (!![]) &#123; <span class="hljs-keyword">switch</span> (_0x34e16a[_0x2eff02++]) &#123; <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-keyword">let</span> _0x38cb15 = _0x4588f1 + _0x470e97; <span class="hljs-keyword">continue</span>; <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-keyword">let</span> _0x1e0e5e = _0x37b9f3[<span class="hljs-title function_">_0x50cee0</span>(<span class="hljs-number">0x2e0</span>, <span class="hljs-number">0x2e8</span>, <span class="hljs-number">0x2e1</span>, <span class="hljs-number">0x2e4</span>)]; <span class="hljs-keyword">continue</span>; <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-keyword">let</span> _0x35d732 = [<span class="hljs-title function_">_0x388d4b</span>(-<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x139</span>, -<span class="hljs-number">0x138</span>)](_0x38cb15 &gt;&gt; _0x4588f1); <span class="hljs-keyword">continue</span>; <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-keyword">let</span> _0x4588f1 = <span class="hljs-number">0x1</span>; <span class="hljs-keyword">continue</span>; <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-keyword">let</span> _0x470e97 = <span class="hljs-number">0x2</span>; <span class="hljs-keyword">continue</span>; <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-keyword">let</span> _0x37b9f3 = <span class="hljs-number">0x5</span> || _0x38cb15; <span class="hljs-keyword">continue</span>; &#125; <span class="hljs-keyword">break</span>; &#125;<br></code></pre></td></tr></table></figure><p>AST 还原思路：</p><ol><li>获取控制流原始数组，将 <code>&#39;3,4,0,5,1,2&#39;[&#39;split&#39;](&#39;,&#39;)</code> 之类的语句转化成 <code>[&#39;3&#39;,&#39;4&#39;,&#39;0&#39;,&#39;5&#39;,&#39;1&#39;,&#39;2&#39;]</code> 之类的数组，得到该数组之后，也可以选择把 split 语句对应的节点删除掉，因为最终代码里这条语句就没用了；</li><li>遍历第一步得到的控制流数组，依次取出每个值所对应的 case 节点；</li><li>定义一个数组，储存每个 case 节点 <code>consequent</code> 数组里面的内容，并删除 <code>continue</code> 语句对应的节点；</li><li>遍历完成后，将第三步的数组替换掉整个 while 节点，也就是 <code>WhileStatement</code>。</li></ol><p>不同思路，写法多样，对于如何获取控制流数组，可以有以下思路：</p><ol><li>获取到 <code>While</code> 语句节点，然后使用 <code>path.getAllPrevSiblings()</code> 方法获取其前面的所有兄弟节点，遍历每个兄弟节点，找到与 <code>switch()</code> 里面数组的变量名相同的节点，然后再取节点的值进行后续处理；</li><li>直接取 <code>switch()</code> 里面数组的变量名，然后使用 <code>scope.getBinding()</code> 方法获取到它绑定的节点，然后再取这个节点的值进行后续处理。</li></ol><p>所以 AST 处理代码就有两种写法，方法一：（code.js 即为前面的示例代码，为了方便操作，这里使用 fs 从文件中读取代码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>) <span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>); <span class="hljs-keyword">const</span> code = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;code.js&quot;</span>, &#123;<span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf-8&quot;</span>&#125;); <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code) <span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">WhileStatement</span>(path) &#123; <span class="hljs-comment">// switch 节点 let switchNode = path.node.body.body[0]; // switch 语句内的控制流数组名，本例中是 _0x34e16a let arrayName = switchNode.discriminant.object.name; // 获得所有 while 前面的兄弟节点，本例中获取到的是声明两个变量的节点，即 const _0x34e16a 和 let _0x2eff02 let prevSiblings = path.getAllPrevSiblings(); // 定义缓存控制流数组 let array = [] // forEach 方法遍历所有节点 prevSiblings.forEach(pervNode =&gt; &#123; let &#123;id, init&#125; = pervNode.node.declarations[0]; // 如果节点 id.name 与 switch 语句内的控制流数组名相同 if (arrayName === id.name) &#123; // 获取节点整个表达式的参数、分割方法、分隔符 let object = init.callee.object.value; let property = init.callee.property.value; let argument = init.arguments[0].value; // 模拟执行 &#x27;3,4,0,5,1,2&#x27;[&#x27;split&#x27;](&#x27;,&#x27;) 语句 array = object[property](argument) // 也可以直接取参数进行分割，方法不通用，比如分隔符换成 | 就不行了 // array = init.callee.object.value.split(&#x27;,&#x27;); &#125; // 前面的兄弟节点就可以删除了 pervNode.remove(); &#125;); // 储存正确顺序的控制流语句 let replace = []; // 遍历控制流数组，按正确顺序取 case 内容 array.forEach(index =&gt; &#123; let consequent = switchNode.cases[index].consequent; // 如果最后一个节点是 continue 语句，则删除 ContinueStatement 节点 if (types.isContinueStatement(consequent[consequent.length - 1])) &#123; consequent.pop(); &#125; // concat 方法拼接多个数组，即正确顺序的 case 内容 replace = replace.concat(consequent); &#125; ); // 替换整个 while 节点，两种方法都可以 path.replaceWithMultiple(replace); // path.replaceInline(replace); &#125; &#125; traverse(ast, visitor) const result = generate(ast) console.log(result.code)</span><br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>); <span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).<span class="hljs-property">default</span> <span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>) <span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>); <span class="hljs-keyword">const</span> code = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;code.js&quot;</span>, &#123;<span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf-8&quot;</span>&#125;); <span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code) <span class="hljs-keyword">const</span> visitor = &#123; <span class="hljs-title class_">WhileStatement</span>(path) &#123; <span class="hljs-comment">// switch 节点 let switchNode = path.node.body.body[0]; // switch 语句内的控制流数组名，本例中是 _0x34e16a let arrayName = switchNode.discriminant.object.name; // 获取控制流数组绑定的节点 let bindingArray = path.scope.getBinding(arrayName); // 获取节点整个表达式的参数、分割方法、分隔符 let init = bindingArray.path.node.init; let object = init.callee.object.value; let property = init.callee.property.value; let argument = init.arguments[0].value; // 模拟执行 &#x27;3,4,0,5,1,2&#x27;[&#x27;split&#x27;](&#x27;,&#x27;) 语句 let array = object[property](argument) // 也可以直接取参数进行分割，方法不通用，比如分隔符换成 | 就不行了 // let array = init.callee.object.value.split(&#x27;,&#x27;); // switch 语句内的控制流自增变量名，本例中是 _0x2eff02 let autoIncrementName = switchNode.discriminant.property.argument.name; // 获取控制流自增变量名绑定的节点 let bindingAutoIncrement = path.scope.getBinding(autoIncrementName); // 可选择的操作：删除控制流数组绑定的节点、自增变量名绑定的节点 bindingArray.path.remove(); bindingAutoIncrement.path.remove(); // 储存正确顺序的控制流语句 let replace = []; // 遍历控制流数组，按正确顺序取 case 内容 array.forEach(index =&gt; &#123; let consequent = switchNode.cases[index].consequent; // 如果最后一个节点是 continue 语句，则删除 ContinueStatement 节点 if (types.isContinueStatement(consequent[consequent.length - 1])) &#123; consequent.pop(); &#125; // concat 方法拼接多个数组，即正确顺序的 case 内容 replace = replace.concat(consequent); &#125; ); // 替换整个 while 节点，两种方法都可以 path.replaceWithMultiple(replace); // path.replaceInline(replace); &#125; &#125; traverse(ast, visitor) const result = generate(ast) console.log(result.code)</span><br></code></pre></td></tr></table></figure><p>以上代码运行后，原来的 <code>switch-case</code> 控制流就被还原了，变成了按顺序一行一行的代码，更加简洁明了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> _0x4588f1 = <span class="hljs-number">0x1</span>; <span class="hljs-keyword">let</span> _0x470e97 = <span class="hljs-number">0x2</span>; <span class="hljs-keyword">let</span> _0x38cb15 = _0x4588f1 + _0x470e97; <span class="hljs-keyword">let</span> _0x37b9f3 = <span class="hljs-number">0x5</span> || _0x38cb15; <span class="hljs-keyword">let</span> _0x1e0e5e = _0x37b9f3[<span class="hljs-title function_">_0x50cee0</span>(<span class="hljs-number">0x2e0</span>, <span class="hljs-number">0x2e8</span>, <span class="hljs-number">0x2e1</span>, <span class="hljs-number">0x2e4</span>)]; <span class="hljs-keyword">let</span> _0x35d732 = [<span class="hljs-title function_">_0x388d4b</span>(-<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x139</span>, -<span class="hljs-number">0x138</span>)](_0x38cb15 &gt;&gt; _0x4588f1);<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料#"></a>参考资料<a href="https://www.cnblogs.com/ikdl/p/16228740.html#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a></h2><p>本文有参考以下资料，也是比较推荐的在线学习资料：</p><ul><li>Youtube 视频，Babel 入门：<a href="https://www.youtube.com/watch?v=UeVq_U5obnE">https://www.youtube.com/watch?v=UeVq_U5obnE</a> （作者 Nicolò Ribaudo，视频中的 PPT 资料可在 K 哥爬虫公众号后台回复 Babel 免费获取！）</li><li>官方手册 Babel Handbook：<a href="https://github.com/jamiebuilds/babel-handbook">https://github.com/jamiebuilds/babel-handbook</a></li><li>非官方 Babel API 中文文档：<a href="https://evilrecluse.top/Babel-traverse-api-doc/">https://evilrecluse.top/Babel-traverse-api-doc/</a></li></ul><h2 id="END"><a href="#END" class="headerlink" title="END#"></a>END<a href="https://www.cnblogs.com/ikdl/p/16228740.html#end">#</a></h2><p>Babel 编译器国内的资料其实不是很多，多看源码、同时在线对照可视化的 AST 语法树，耐心一点儿一层一层分析即可，本文中的案例也只是最基本操作，实际遇到一些混淆还得视情况进行修改，比如需要加一些类型判断来限制等，后续K哥会用实战来带领大家进一步熟悉解混淆当中的其他操作。  </p>]]></content>
    
    
    
    <tags>
      
      <tag>AST</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫逆向基础，理解 JavaScript 模块化编程 webpack</title>
    <link href="/2025/02/14/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%8C%E7%90%86%E8%A7%A3-JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-webpack/"/>
    <url>/2025/02/14/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%8C%E7%90%86%E8%A7%A3-JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫逆向基础，理解-JavaScript-模块化编程-webpack"><a href="#爬虫逆向基础，理解-JavaScript-模块化编程-webpack" class="headerlink" title="爬虫逆向基础，理解 JavaScript 模块化编程 webpack"></a>爬虫逆向基础，理解 JavaScript 模块化编程 webpack</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>关注微信公众号：K哥爬虫，QQ交流群：808574309，持续分享爬虫进阶、JS&#x2F;安卓逆向等技术干货！ 简介 在分析一些站点的 JavaScript 代码时，比较简单的代码，函数通常都是一个一个的，例如： function a()  function b() {c</p></blockquote><hr><p><a href="https://img-blog.csdnimg.cn/6ba8f23e02bd445aa65813eb7d6ea82c.png"><img src="/2025/02/14/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%8C%E7%90%86%E8%A7%A3-JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-webpack/6ba8f23e02bd445aa65813eb7d6ea82c.png"></a></p><blockquote><p>关注微信公众号：K哥爬虫，QQ交流群：808574309，持续分享爬虫进阶、JS&#x2F;安卓逆向等技术干货！</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介#"></a>简介<a href="https://www.cnblogs.com/ikdl/p/15434381.html#%E7%AE%80%E4%BB%8B">#</a></h2><p>在分析一些站点的 JavaScript 代码时，比较简单的代码，函数通常都是一个一个的，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>)&#125; <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>)&#125; <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>但是稍微复杂一点的站点，通常会遇到类似如下的代码结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) &#123; <span class="hljs-keyword">function</span> <span class="hljs-title function_">n</span>(<span class="hljs-params">t</span>) &#123; <span class="hljs-keyword">return</span> i[t].<span class="hljs-title function_">call</span>(a, b, c, d) &#125; &#125;([ <span class="hljs-keyword">function</span>(<span class="hljs-params">t, e</span>) &#123;&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">t, e, n</span>) &#123;&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">t, e, r</span>) &#123;&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">t, e, o</span>) &#123;&#125; ]);<br></code></pre></td></tr></table></figure><p>这种写法在 JavaScript 中很常见，对于熟悉 JavaScript 的人来说可能非常简单，但是爬虫工程师大多数都是用 Python 或者 Java 来写代码的，看到这种语法就有可能懵了，由于在剥离 JS 加密代码时会经常遇到，所以理解这种语法对于爬虫工程师来说是非常重要的。</p><p>这种写法貌似没有官方的名称，相当于进行了模块化编程，因此大多数人称其为 webpack，上面的示例看起来比较费劲，简单优化一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span> (<span class="hljs-params">allModule</span>) &#123; <span class="hljs-keyword">function</span> <span class="hljs-title function_">useModule</span>(<span class="hljs-params">whichModule</span>) &#123; allModule[whichModule].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;hello world!&quot;</span>); &#125; <span class="hljs-title function_">useModule</span>(<span class="hljs-number">0</span>) &#125;([ <span class="hljs-keyword">function</span> <span class="hljs-title function_">module0</span>(<span class="hljs-params">param</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;module0: &quot;</span> + param)&#125;, <span class="hljs-keyword">function</span> <span class="hljs-title function_">module1</span>(<span class="hljs-params">param</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;module1: &quot;</span> + param)&#125;, <span class="hljs-keyword">function</span> <span class="hljs-title function_">module2</span>(<span class="hljs-params">param</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;module2: &quot;</span> + param)&#125;, ]);<br></code></pre></td></tr></table></figure><p>运行以上代码，会输出 <code>module0: hello world!</code>，相信通过浅显易懂的变量名和函数名，应该就可以看懂大致含义了，调用 <code>useModule(0)</code>，从所有函数里选择第一个，将 <code>hello world!</code> 传递给 <code>module0</code> 并输出。</p><p>仔细观察以上代码，我们会发现主要用到了 <code>!function()&#123;&#125;()</code> 和 <code>function.call()</code> 语法，接下来就一一介绍一下。</p><h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式#"></a>函数声明与函数表达式<a href="https://www.cnblogs.com/ikdl/p/15434381.html#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">#</a></h2><p>在 ECMAScript（JavaScript 的一个标准）中，有两个最常用的创建函数对象的方法，即使用函数声明或者函数表达式，ECMAScript 规范明确了一点，即函数声明必须始终带有一个标识符，也就是我们所说的函数名，而函数表达式则可以省略。</p><p>函数声明，会给函数指定一个名字，会在代码执行以前被加载到作用域中，所以<strong>调用函数在函数声明之前或之后都是可以的</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>) <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">arg</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg) &#125;<br></code></pre></td></tr></table></figure><p>函数表达式，创建一个匿名函数，然后将这个匿名函数赋给一个变量，在代码执行到函数表达式的时候才会有定义，所以<strong>调用函数在函数表达式之后才能正确运行</strong>，否则是会报错的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg) &#125; <span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="IIFE-立即调用函数表达式"><a href="#IIFE-立即调用函数表达式" class="headerlink" title="IIFE 立即调用函数表达式#"></a>IIFE 立即调用函数表达式<a href="https://www.cnblogs.com/ikdl/p/15434381.html#iife-%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">#</a></h2><p>IIFE 全称 Immediately-invoked Function Expressions，译为立即调用函数表达式，也称为自执行函数、立即执行函数、自执行匿名函数等，IIFE 是一种语法，这种模式本质上就是函数表达式（命名的或者匿名的）在创建后立即执行。当函数变成立即执行的函数表达式时，表达式中的变量不能从外部访问。IIFE 主要用来隔离作用域，避免污染。</p><h3 id="IIFE-基本语法"><a href="#IIFE-基本语法" class="headerlink" title="IIFE 基本语法#"></a>IIFE 基本语法<a href="https://www.cnblogs.com/ikdl/p/15434381.html#iife-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">#</a></h3><p>IIFE 的写法非常灵活，主要有以下几种格式：</p><p>1、匿名函数前面加上一元操作符，后面加上 <code>()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;(); -<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;(); +<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;(); ~<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;();<br></code></pre></td></tr></table></figure><p>2、匿名函数后面加上 <code>()</code>，然后再用 <code>()</code> 将整个括起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;());<br></code></pre></td></tr></table></figure><p>3、先用 <code>()</code> 将匿名函数括起来，再在后面加上 <code>()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;)();<br></code></pre></td></tr></table></figure><p>4、使用箭头函数表达式，先用 <code>()</code> 将箭头函数表达式括起来，再在后面加上 <code>()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;)()<br></code></pre></td></tr></table></figure><p>5、匿名函数前面加上 <code>void</code> 关键字，后面加上 <code>()</code>， <code>void</code> 指定要计算或运行一个表达式，但是不返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">void</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;();<br></code></pre></td></tr></table></figure><p>有的时候，我们还有可能见到立即执行函数前面后分号的情况，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;()) ;!<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I AM IIFE&quot;</span>) &#125;()<br></code></pre></td></tr></table></figure><p>这是因为立即执行函数通常作为一个单独模块使用一般是没有问题的，但是还是建议在立即执行函数前面或者后面加上分号，这样可以有效地与前面或者后面的代码进行隔离，否则可能出现意想不到的错误。</p><h3 id="IIFE-参数传递"><a href="#IIFE-参数传递" class="headerlink" title="IIFE 参数传递#"></a>IIFE 参数传递<a href="https://www.cnblogs.com/ikdl/p/15434381.html#iife-%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">#</a></h3><p>将参数放在末尾的 <code>()</code> 里即可实现参数传递：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I AM IIFE&quot;</span>; (<span class="hljs-keyword">function</span> (<span class="hljs-params">param</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(param) &#125;)(text); <span class="hljs-comment">// I AM IIFE</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dict = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;20&quot;</span>&#125;; (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dict.<span class="hljs-property">name</span>); &#125;)(dict); <span class="hljs-comment">// Bob</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]; (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123; sum += list[i]; &#125; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum); &#125;)(list); <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><h2 id="Function-prototype-call-x2F-apply-x2F-bind"><a href="#Function-prototype-call-x2F-apply-x2F-bind" class="headerlink" title="Function.prototype.call() &#x2F; apply() &#x2F; bind()#"></a>Function.prototype.call() &#x2F; apply() &#x2F; bind()<a href="https://www.cnblogs.com/ikdl/p/15434381.html#functionprototypecall--apply--bind">#</a></h2><p><code>Function.prototype.call()</code>、<code>Function.prototype.apply()</code>、<code>Function.prototype.bind()</code> 都是比较常用的方法。它们的作用一模一样，即<strong>改变函数中的 <code>this</code> 指向</strong>，它们的区别如下：</p><ul><li><code>call()</code> 方法会立即执行这个函数，接受一个多个参数，参数之间用逗号隔开；</li><li><code>apply()</code> 方法会立即执行这个函数，接受一个包含多个参数的数组；</li><li><code>bind()</code> 方法不会立即执行这个函数，返回的是一个修改过后的函数，便于稍后调用，接受的参数和 <code>call()</code> 一样。</li></ul><h3 id="call"><a href="#call" class="headerlink" title="call()#"></a>call()<a href="https://www.cnblogs.com/ikdl/p/15434381.html#call">#</a></h3><p><code>call()</code> 方法接受多个参数，第一个参数 thisArg 指定了函数体内 this 对象的指向，如果这个函数处于非严格模式下，指定为 null 或 undefined 时会自动替换为指向全局对象（浏览器中就是 window 对象），在严格模式下，函数体内的 this 还是为 null。从第二个参数开始往后，每个参数被依次传入函数，基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.<span class="hljs-title function_">call</span>(thisArg, arg1, arg2, ...)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a, b, c</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b + c) &#125; test.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>) &#125; <span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>&#125; test.<span class="hljs-title function_">call</span>(data) <span class="hljs-comment">// John Doe</span><br></code></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply()#"></a>apply()<a href="https://www.cnblogs.com/ikdl/p/15434381.html#apply">#</a></h3><p><code>apply()</code> 方法接受两个参数，第一个参数 thisArg 与 <code>call()</code> 方法一致，第二个参数为一个带下标的集合，从 ECMAScript 第5版开始，这个集合可以为数组，也可以为类数组，<code>apply()</code> 方法把这个集合中的元素作为参数传递给被调用的函数，基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.<span class="hljs-title function_">apply</span>(thisArg, [arg1, arg2, ...])<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a, b, c</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b + c) &#125; test.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>) &#125; <span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>&#125; test.<span class="hljs-title function_">apply</span>(data) <span class="hljs-comment">// John Doe</span><br></code></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind()#"></a>bind()<a href="https://www.cnblogs.com/ikdl/p/15434381.html#bind">#</a></h3><p><code>bind()</code> 方法和 <code>call()</code> 接受的参数是相同的，只不过 <code>bind()</code> 返回的是一个函数，基本语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.<span class="hljs-title function_">bind</span>(thisArg, arg1, arg2, ...)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a, b, c</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b + c) &#125; test.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)() <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>) &#125; <span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>&#125; test.<span class="hljs-title function_">bind</span>(data)() <span class="hljs-comment">// John Doe</span><br></code></pre></td></tr></table></figure><h2 id="理解-webpack"><a href="#理解-webpack" class="headerlink" title="理解 webpack#"></a>理解 webpack<a href="https://www.cnblogs.com/ikdl/p/15434381.html#%E7%90%86%E8%A7%A3-webpack">#</a></h2><p>有了以上知识后，我们再来理解一下模块化编程，也就是前面所说的 webpack 写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span> (<span class="hljs-params">allModule</span>) &#123; <span class="hljs-keyword">function</span> <span class="hljs-title function_">useModule</span>(<span class="hljs-params">whichModule</span>) &#123; allModule[whichModule].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;hello world!&quot;</span>); &#125; <span class="hljs-title function_">useModule</span>(<span class="hljs-number">0</span>) &#125;([ <span class="hljs-keyword">function</span> <span class="hljs-title function_">module0</span>(<span class="hljs-params">param</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;module0: &quot;</span> + param)&#125;, <span class="hljs-keyword">function</span> <span class="hljs-title function_">module1</span>(<span class="hljs-params">param</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;module1: &quot;</span> + param)&#125;, <span class="hljs-keyword">function</span> <span class="hljs-title function_">module2</span>(<span class="hljs-params">param</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;module2: &quot;</span> + param)&#125;, ]);<br></code></pre></td></tr></table></figure><p>首先，这整个代码是一个 IIFE 立即调用函数表达式，传递的参数是一个数组，里面包含三个方法，分别是 <code>module0</code>、<code>module1</code> 和 <code>module2</code>，可以将其视为三个模块，那么 IIFE 接受的参数 <code>allModule</code> 就包含这三个模块，IIFE 里面还包含一个函数 <code>useModule()</code>，可以将其视为模块加载器，即要使用哪个模块，示例中 <code>useModule(0)</code> 即表示调用第一个模块，函数里面使用 <code>call()</code> 方法改变函数中的 <code>this</code> 指向并传递参数，调用相应的模块进行输出。</p><h2 id="改写-webpack"><a href="#改写-webpack" class="headerlink" title="改写 webpack#"></a>改写 webpack<a href="https://www.cnblogs.com/ikdl/p/15434381.html#%E6%94%B9%E5%86%99-webpack">#</a></h2><p>对于我们爬虫逆向当中经常遇到的 webpack 模块化的写法，可以很容易对其进行改写，以下以一段加密代码为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto-js&quot;</span>) !<span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) &#123; <span class="hljs-keyword">function</span> <span class="hljs-title function_">acvs</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> kk = func[<span class="hljs-number">1</span>].<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">1e3</span>); <span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">r</span>: <span class="hljs-string">&quot;I LOVE PYTHON&quot;</span>, <span class="hljs-attr">e</span>: kk, <span class="hljs-attr">i</span>: <span class="hljs-string">&quot;62bs819idl00oac2&quot;</span>, <span class="hljs-attr">k</span>: <span class="hljs-string">&quot;0123456789abcdef&quot;</span> &#125; <span class="hljs-keyword">return</span> func[<span class="hljs-number">0</span>].<span class="hljs-title function_">call</span>(data); &#125; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密文本：&quot;</span> + <span class="hljs-title function_">acvs</span>()) <span class="hljs-keyword">function</span> <span class="hljs-title function_">odsc</span>(<span class="hljs-params">account</span>) &#123; <span class="hljs-keyword">var</span> cr = <span class="hljs-literal">false</span>; <span class="hljs-keyword">var</span> regExp = <span class="hljs-regexp">/(^\d&#123;7,8&#125;$)|(^0\d&#123;10,12&#125;$)/</span>; <span class="hljs-keyword">if</span> (regExp.<span class="hljs-title function_">test</span>(account)) &#123; cr = <span class="hljs-literal">true</span>; &#125; <span class="hljs-keyword">return</span> cr; &#125; <span class="hljs-keyword">function</span> <span class="hljs-title function_">mkle</span>(<span class="hljs-params">account</span>) &#123; <span class="hljs-keyword">var</span> cr = <span class="hljs-literal">false</span>; <span class="hljs-keyword">var</span> regExp = <span class="hljs-regexp">/^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>; <span class="hljs-keyword">if</span> (regExp.<span class="hljs-title function_">test</span>(account)) &#123; cr = <span class="hljs-literal">true</span>; &#125; <span class="hljs-keyword">return</span> cr; &#125; &#125;([ <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-string">&quot;&quot;</span>, t = <span class="hljs-number">0</span>; t &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>.<span class="hljs-property">length</span>; t++) &#123; <span class="hljs-keyword">var</span> o = <span class="hljs-variable language_">this</span>.<span class="hljs-property">e</span> ^ <span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>.<span class="hljs-title function_">charCodeAt</span>(t); n += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(o) &#125; <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(n) &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(x * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()) &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123; <span class="hljs-keyword">var</span> a = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">MD5</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">k</span>); <span class="hljs-keyword">var</span> c = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(a); <span class="hljs-keyword">var</span> d = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(e, c, &#123; <span class="hljs-attr">iv</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">i</span> &#125;); <span class="hljs-keyword">return</span> d + <span class="hljs-string">&quot;&quot;</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123; <span class="hljs-keyword">var</span> b = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">MD5</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">k</span>); <span class="hljs-keyword">var</span> d = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(b); <span class="hljs-keyword">var</span> a = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(e, d, &#123; <span class="hljs-attr">iv</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">i</span> &#125;).<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>); <span class="hljs-keyword">return</span> a &#125; ]);<br></code></pre></td></tr></table></figure><p>可以看到关键的加密入口函数是 <code>acvs()</code>，<code>acvs()</code> 里面又调用了 IIFE 参数列表里面的第一个和第二个函数，剩下的其他函数都是干扰项，而第一个函数中用到了 r 和 e 参数，将其直接传入即可，最终改写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">r, e</span>) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-string">&quot;&quot;</span>, t = <span class="hljs-number">0</span>; t &lt; r.<span class="hljs-property">length</span>; t++) &#123; <span class="hljs-keyword">var</span> o = e ^ r.<span class="hljs-title function_">charCodeAt</span>(t); n += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(o) &#125; <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(n) &#125; <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">x</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(x * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()) &#125; <span class="hljs-keyword">function</span> <span class="hljs-title function_">acvs</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">var</span> kk = <span class="hljs-title function_">b</span>(<span class="hljs-number">1e3</span>); <span class="hljs-keyword">var</span> r = <span class="hljs-string">&quot;I LOVE PYTHON&quot;</span>; <span class="hljs-keyword">return</span> <span class="hljs-title function_">a</span>(r, kk); &#125; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加密文本：&quot;</span> + <span class="hljs-title function_">acvs</span>())<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结#"></a>总结<a href="https://www.cnblogs.com/ikdl/p/15434381.html#%E6%80%BB%E7%BB%93">#</a></h2><p>看完本文后，你可能会觉得 webpack 也不过如此，看起来确实比较简单，但实际上我们在分析具体站点时往往不会像上述例子这么简单，本文旨在让大家简单理解一下模块化编程 webpack 的原理，后续 K 哥将会带领大家实战分析比较复杂的 webpack！敬请关注！</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 逆向之 Hook，吃着火锅唱着歌，突然就被麻匪劫了！</title>
    <link href="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/"/>
    <url>/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-逆向之-Hook，吃着火锅唱着歌，突然就被麻匪劫了！"><a href="#JS-逆向之-Hook，吃着火锅唱着歌，突然就被麻匪劫了！" class="headerlink" title="JS 逆向之 Hook，吃着火锅唱着歌，突然就被麻匪劫了！"></a>JS 逆向之 Hook，吃着火锅唱着歌，突然就被麻匪劫了！</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>JS 逆向中什么是 Hook？吃着火锅唱着歌，突然就被麻匪劫了！这就是 Hook！</p></blockquote><hr><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/640.gif" alt="图片"></p><p>点击上方「蓝字」关注我们</p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/640.1.webp" alt="图片"></p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/640.2.webp" alt="图片"></p><h2 id="什么是-Hook？"><a href="#什么是-Hook？" class="headerlink" title="什么是 Hook？"></a>什么是 Hook？</h2><p>Hook 中文译为钩子，Hook 实际上是 Windows 中提供的一种用以替换 DOS 下“中断”的系统机制，Hook 的概念在 Windows 桌面软件开发很常见，特别是各种事件触发的机制，在对特定的系统事件进行 Hook 后，一旦发生已 Hook 事件，对该事件进行 Hook 的程序就会收到系统的通知，这时程序就能在第一时间对该事件做出响应。在程序中将其理解为“劫持”可能会更好理解，我们可以通过 Hook 技术来劫持某个对象，把某个对象的程序拉出来替换成我们自己改写的代码片段，修改参数或替换返回值，从而控制它与其他对象的交互。</p><p>通俗来讲，Hook 其实就是拦路打劫，马邦德带着老婆，出了城，吃着火锅，还唱着歌，突然就被麻匪劫了，张麻子劫下县长马邦德的火车，摇身一变化身县长，带着手下赶赴鹅城上任。Hook 的过程，就是张麻子顶替马邦德的过程。</p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/640.3.webp" alt="图片"></p><h2 id="JS-逆向中的-Hook"><a href="#JS-逆向中的-Hook" class="headerlink" title="JS 逆向中的 Hook"></a>JS 逆向中的 Hook</h2><p>在 JavaScript 逆向中，替换原函数的过程都可以被称为 Hook，以下先用一段简单的代码理解 Hook 的过程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;I&#x27;m<span class="hljs-symbol">&amp;nbsp;</span>a.&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>a<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;I&#x27;m<span class="hljs-symbol">&amp;nbsp;</span>b.&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>a()<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>I&#x27;m<span class="hljs-symbol">&amp;nbsp;</span>b.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>直接覆盖原函数是最简单的做法，以上代码将 a 函数进行了重写，再次调用 a 函数将会输出 <code>I&#39;m b.</code>，如果还想执行原来 <code>a</code> 函数的内容，可以使用中间变量进行储存：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;I&#x27;m<span class="hljs-symbol">&amp;nbsp;</span>a.&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>c<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>a;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>a<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;I&#x27;m<span class="hljs-symbol">&amp;nbsp;</span>b.&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>a()<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>I&#x27;m<span class="hljs-symbol">&amp;nbsp;</span>b.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>c()<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>I&#x27;m<span class="hljs-symbol">&amp;nbsp;</span>a.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，调用 a 函数会输出 <code>I&#39;m b.</code>，调用 c 函数会输出 <code>I&#39;m a.</code>。</p><p>这种原函数直接覆盖的方法通常只用来进行临时调试，实用性不大，但是它能够帮助我们理解 Hook 的过程，在实际 JS 逆向过程中，我们会用到更加高级一点的方法，比如 <code>Object.defineProperty()</code>。</p><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h2><p>基本语法：<code>Object.defineProperty(obj, prop, descriptor)</code>，它的作用就是直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，接收的三个参数含义如下：</p><p><code>obj</code>：需要定义属性的当前对象；</p><p><code>prop</code>：当前需要定义的属性名；</p><p><code>descriptor</code>：属性描述符，可以取以下值：</p><table><thead><tr><th>属性名</th><th>默认值</th><th>含义</th></tr></thead><tbody><tr><td>get</td><td>undefined</td><td>存取描述符，目标属性获取值的方法</td></tr><tr><td>set</td><td>undefined</td><td>存取描述符，目标属性设置值的方法</td></tr><tr><td>value</td><td>undefined</td><td>数据描述符，设置属性的值</td></tr><tr><td>writable</td><td>false</td><td>数据描述符，目标属性的值是否可以被重写</td></tr><tr><td>enumerable</td><td>false</td><td>目标属性是否可以被枚举</td></tr><tr><td>configurable</td><td>false</td><td>目标属性是否可以被删除或是否可以再次修改特性</td></tr></tbody></table><p>通常情况下，对象的定义与赋值是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>people<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>&#123;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>people.name<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Bob&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>people[<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;age&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>]<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;18&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(people)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-symbol">&amp;nbsp;</span>name:<span class="hljs-symbol">&amp;nbsp;</span>&#x27;Bob&#x27;,<span class="hljs-symbol">&amp;nbsp;</span>age:<span class="hljs-symbol">&amp;nbsp;</span>&#x27;18&#x27;<span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 <code>Object.defineProperty()</code> 方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>people<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>&#123;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(people,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;name&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Bob&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>writable<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>是否可以被重写<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(people.name)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>&#x27;Bob&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>people.name<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Tom&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(people.name)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>&#x27;Tom&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Hook 中，使用最多的是存取描述符，即 get 和 set。</p><p><strong>get</strong>：属性的 getter 函数，如果没有 getter，则为 undefined，当访问该属性时，会调用此函数，执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的 this 并不一定是定义该属性的对象），该函数的返回值会被用作属性的值。</p><p><strong>set</strong>：属性的 setter 函数，如果没有 setter，则为 undefined，当属性值被修改时，会调用此函数，该方法接受一个参数，也就是被赋予的新值，会传入赋值时的 this 对象。</p><p>用一个例子来演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>people<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Bob&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>count<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>定义一个<span class="hljs-symbol">&amp;nbsp;</span>age<span class="hljs-symbol">&amp;nbsp;</span>获取值时返回定义好的变量<span class="hljs-symbol">&amp;nbsp;</span>count<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(people,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;age&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;获取值！&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>count;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>set<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>val<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;设置值！&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>count<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>val<span class="hljs-symbol">&amp;nbsp;</span>+<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(people.age);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>people.age<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(people.age);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">获取值！<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>设置值！<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>获取值！<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过这样的方法，我们就可以在设置某个值的时候，添加一些代码，比如 <code>debugger;</code>，让其断下，然后利用调用栈进行调试，找到参数加密、或者参数生成的地方，需要注意的是，网站加载时首先要运行我们的 Hook 代码，再运行网站自己的代码，才能够成功断下，这个过程我们可以称之为 Hook 代码的注入，以下将介绍几种主流的注入方法。</p><h2 id="Hook-注入的几种方法"><a href="#Hook-注入的几种方法" class="headerlink" title="Hook 注入的几种方法"></a>Hook 注入的几种方法</h2><p>以下以某奇艺 cookie 中的  <code>__dfp</code>  值为例，来演示具体如何注入 Hook。</p><h3 id="1、Fiddler-插件注入"><a href="#1、Fiddler-插件注入" class="headerlink" title="1、Fiddler 插件注入"></a>1、Fiddler 插件注入</h3><p>来到某奇艺首页，可以看到其 cookie 里面有个 <code>__dfp</code> 值：</p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/svg_3E.svg" alt="图片"></p><p>如果直接搜索是搜不到的，我们想通过 Hook 的方式，让在生成 <code>__dfp</code> 值的地方断下，就可以编写如下自执行函数：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;use<span class="hljs-symbol">&amp;nbsp;</span>strict&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;cookie&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>set<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>val<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(val.indexOf(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;__dfp&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>!=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Hook捕获到cookie设置-<span class="hljs-symbol">&amp;gt;</span>&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>val);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>if (val.indexOf(&#39;__dfp&#39;) != -1) &#123;debugger;&#125;</code> 的意思是检索 <code>__dfp</code> 在字符串中首次出现的位置，等于 -1 表示这个字符串值没有出现，反之则出现。如果出现了，那么就 debugger 断下，这里要注意的是不能写成 <code>if (val == &#39;__dfp&#39;) &#123;debugger&#125;</code>，因为 val 传过来的值类似于 <code>__dfp=xxxxxxxxxx</code>，这样写是无法断下的。</p><p>有了代码该如何使用呢？也就是怎么注入 Hook 代码呢？这里推荐 Fiddler 抓包工具搭配编程猫的插件使用，插件可以在公众号输入关键字【<strong>Fiddler插件</strong>】获取，其原理可以理解为拦截 —&gt; 加工 —&gt; 放行的一个过程，利用 Fiddler 替换响应，在 Fiddler 拦截到数据后，在源码第一行插入 Hook 代码，由于 Hook 代码是一个自执行函数，那么网页一旦加载，就必然会先运行 Hook 代码。安装完成后如下图所示，打开抓包，点击开启注入 Hook：</p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/svg_3E.svg" alt="图片"></p><p>浏览器清除 cookie 后重新进入某奇艺的页面，可以看到成功断下，在 console 控制台可以看到捕获的一些 cookie 值，此时的 <code>val</code> 就是 <code>__dfp</code> 的值，接下来在右侧的 Call Stack 调用栈里就可以看到一些函数的调用过程，依次向上跟进就能够找到最开始 <code>__dfp</code> 生成的地方。  </p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/svg_3E.svg" alt="图片"></p><h3 id="2、TamperMonkey-注入"><a href="#2、TamperMonkey-注入" class="headerlink" title="2、TamperMonkey 注入"></a>2、TamperMonkey 注入</h3><p>TamperMonkey 俗称油猴插件，是一款免费的浏览器扩展和最为流行的用户脚本管理器，支持很多主流的浏览器， 包括 Chrome、Microsoft Edge、Safari、Opera、Firefox、UC 浏览器、360 浏览器、QQ 浏览器等等，基本上实现了脚本的一次编写，所有平台都能运行，可以说是基于浏览器的应用算是真正的跨平台了。用户可以在 GreasyFork、OpenUserJS 等平台直接获取别人发布的脚本，功能众多且强大，比如视频解析、去广告等。</p><p>我们依旧以某奇艺的 cookie 为例来演示如何编写 TamperMonkey 脚本，首先去应用商店安装 TamperMonkey，安装过程不再赘述，然后点击图标，添加新脚本，或者点击管理面板，再点击加号新建脚本，写入以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>==UserScript==<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@name<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>Cookie<span class="hljs-symbol">&amp;nbsp;</span>Hook<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@namespace<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>http://tampermonkey.net/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@version<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>0.1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@description<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>Cookie<span class="hljs-symbol">&amp;nbsp;</span>Hook<span class="hljs-symbol">&amp;nbsp;</span>脚本示例<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@author<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>K哥爬虫<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@match<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@icon<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>https://www.kuaidaili.com/img/favicon.ico<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@grant<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>none<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>@run-at<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>document-start<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>==/UserScript==<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;use<span class="hljs-symbol">&amp;nbsp;</span>strict&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;cookie&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>set<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>val<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(val.indexOf(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;__dfp&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>!=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Hook捕获到cookie设置-<span class="hljs-symbol">&amp;gt;</span>&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>val);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/svg_3E.svg" alt="图片"></p><p>主体的 JavaScript 自执行函数和前面都是一样的，这里需要注意的是最前面的注释，每个选项都是有意义的，所有的选项参考 TamperMonkey 官方文档<sup>[1]</sup>，以下列出了比较常用、比较重要的部分选项（其中需要特别注意 <code>@match</code>、<code>@include</code> 和 <code>@run-at</code>选项）：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>@name</td><td>脚本的名称</td></tr><tr><td>@namespace</td><td>命名空间，用来区分相同名称的脚本，一般写作者名字或者网址就可以</td></tr><tr><td>@version</td><td>脚本版本，油猴脚本的更新会读取这个版本号</td></tr><tr><td>@description</td><td>描述这个脚本是干什么用的</td></tr><tr><td>@author</td><td>编写这个脚本的作者的名字</td></tr><tr><td><strong>@match</strong></td><td>从字符串的起始位置匹配正则表达式，只有匹配的网址才会执行对应的脚本，例如 <code>*</code> 匹配所有，<code>https://www.baidu.com/*</code> 匹配百度等，可以参考 Python re 模块里面的 <code>re.match()</code> 方法，允许多个实例</td></tr><tr><td><strong>@include</strong></td><td>和 @match 类似，只有匹配的网址才会执行对应的脚本，但是 @include 不会从字符串起始位置匹配，例如 <code>*://*baidu.com/*</code> 匹配百度，具体区别可以参考TamperMonkey 官方文档[1]</td></tr><tr><td>@icon</td><td>脚本的 icon 图标</td></tr><tr><td>@grant</td><td>指定脚本运行所需权限，如果脚本拥有相应的权限，就可以调用油猴扩展提供的 API 与浏览器进行交互。如果设置为 none 的话，则不使用沙箱环境，脚本会直接运行在网页的环境中，这时候无法使用大部分油猴扩展的 API。如果不指定的话，油猴会默认添加几个最常用的 API</td></tr><tr><td>@require</td><td>如果脚本依赖其他 JS 库的话，可以使用 require 指令导入，在运行脚本之前先加载其它库</td></tr><tr><td><strong>@run-at</strong></td><td>脚本注入时机，该选项是能不能 hook 到的关键，有五个值可选：<code>document-start</code>：网页开始时；<code>document-body</code>：body出现时；<code>document-end</code>：载入时或者之后执行；<code>document-idle</code>：载入完成后执行，默认选项；<code>context-menu</code>：在浏览器上下文菜单中单击该脚本时，一般将其设置为 <code>document-start</code></td></tr></tbody></table><p>清除 cookie，开启 TamperMonkey 插件，再次来到某奇艺首页，可以看到也成功被断下，同样的也可以跟进调用栈来进一步分析  <code>__dfp</code> 值的来源。</p><p><img src="/JS%20%E9%80%86%E5%90%91%E4%B9%8B%20Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/svg%253E.svg" alt="图片"></p><h3 id="3、浏览器插件注入"><a href="#3、浏览器插件注入" class="headerlink" title="3、浏览器插件注入"></a>3、浏览器插件注入</h3><p>浏览器插件官方叫法应该是浏览器扩展（Extension），浏览器插件能够增强浏览器功能，同样也能够帮助我们 Hook，浏览器插件的编写并不复杂，以 Chrome 插件为例，只需要保证项目下有一个 manifest.json 文件即可，它用来设置所有和插件相关的配置，必须放在根目录。其中 <code>manifest_version</code>、<code>name</code>、<code>version</code> 3个参数是必不可少的，如果想要深入学习，可以参考小茗同学<sup>[2]</sup>的博客和 Google 官方文档<sup>[3]</sup>。需要注意的是，火狐浏览器插件不一定能在其他浏览器上运行，而 Chrome 插件除了能运行在 Chrome 浏览器之外，还可以运行在所有 webkit 内核的国产浏览器，比如 360 极速浏览器、360 安全浏览器、搜狗浏览器、QQ 浏览器等等。我们还是以某奇艺的 cookie 来演示如何编写一个 Chrome 浏览器 Hook 插件。</p><p>新建 manifest.json 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;name&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Cookie<span class="hljs-symbol">&amp;nbsp;</span>Hook&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>插件名称<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;version&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;1.0&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>插件版本<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;description&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Cookie<span class="hljs-symbol">&amp;nbsp;</span>Hook&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>插件描述<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;manifest_version&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>清单版本，必须是2或者3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;content_scripts&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>[&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;matches&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>[<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;<span class="hljs-symbol">&amp;lt;</span>all_urls<span class="hljs-symbol">&amp;gt;</span>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>],<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>匹配所有地址<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;js&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>[<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;cookie_hook.js&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>],<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>注入的代码文件名和路径，如果有多个，则依次注入<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;all_frames&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>允许将内容脚本嵌入页面的所有框架中<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;permissions&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>[<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;tabs&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>],<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>权限申请，tabs<span class="hljs-symbol">&amp;nbsp;</span>表示标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;run_at&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;document_start&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>代码注入的时间<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建 cookie_hook.js 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>hook<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;use<span class="hljs-symbol">&amp;nbsp;</span>strict&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;cookie&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>set<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>val<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(val.indexOf(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;__dfp&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>!=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Hook捕获到cookie设置-<span class="hljs-symbol">&amp;gt;</span>&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>val);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>script<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.createElement(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;script&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>script.textContent<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;(&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>+<span class="hljs-symbol">&amp;nbsp;</span>hook<span class="hljs-symbol">&amp;nbsp;</span>+<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;)()&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.head<span class="hljs-symbol">&amp;nbsp;</span>||<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.documentElement).appendChild(script);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>script.parentNode.removeChild(script);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将这两个文件放到同一个文件夹，打开 chrome 的扩展程序, 打开开发者模式，加载已解压的扩展程序，选择创建的文件夹即可：</p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/svg_3E.svg" alt="图片"></p><p>来到某奇艺页面，清除 cookie 后重新进入，可以看到同样也成功断下，跟踪调用栈就可以找到其值生成的地方：  </p><p><img src="/2025/02/14/JS-%E9%80%86%E5%90%91%E4%B9%8B-Hook%EF%BC%8C%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%8C%E7%AA%81%E7%84%B6%E5%B0%B1%E8%A2%AB%E9%BA%BB%E5%8C%AA%E5%8A%AB%E4%BA%86%EF%BC%81/svg_3E.svg" alt="图片"></p><h2 id="常用-Hook-代码总汇"><a href="#常用-Hook-代码总汇" class="headerlink" title="常用 Hook 代码总汇"></a>常用 Hook 代码总汇</h2><p>除了使用上述的 <code>Object.defineProperty()</code> 方法，还可以直接捕获相关接口，然后重写这个接口，以下列出了常见的 Hook 代码。注意：以下只是关键的 Hook 代码，具体注入的方式不同，要进行相关的修改。</p><h3 id="Hook-Cookie"><a href="#Hook-Cookie" class="headerlink" title="Hook Cookie"></a>Hook Cookie</h3><p>Cookie Hook 用于定位 Cookie 中关键参数生成位置，以下代码演示了当 Cookie 中匹配到了 <code>__dfp</code> 关键字， 则插入断点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;use<span class="hljs-symbol">&amp;nbsp;</span>strict&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;cookie&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>set<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>val<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(val.indexOf(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;__dfp&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>!=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Hook捕获到cookie设置-<span class="hljs-symbol">&amp;gt;</span>&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>val);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>val;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>cookieTemp;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;,<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;use<span class="hljs-symbol">&amp;nbsp;</span>strict&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>org<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.cookie.__lookupSetter__(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;cookie&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__defineSetter__(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;cookie&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>cookie<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(cookie.indexOf(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;__dfp&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>!=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>org<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>cookie;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__defineGetter__(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;cookie&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>org;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hook-Header"><a href="#Hook-Header" class="headerlink" title="Hook Header"></a>Hook Header</h3><p>Header Hook 用于定位 Header 中关键参数生成位置，以下代码演示了当 Header 中包含 <code>Authorization</code> 关键字时，则插入断点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>org<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.XMLHttpRequest.prototype.setRequestHeader;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.XMLHttpRequest.prototype.setRequestHeader<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>key,<span class="hljs-symbol">&amp;nbsp;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(key<span class="hljs-symbol">&amp;nbsp;</span>==<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Authorization&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>org.apply(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>this<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>arguments<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hook-URL"><a href="#Hook-URL" class="headerlink" title="Hook URL"></a>Hook URL</h3><p>URL Hook 用于定位请求 URL 中关键参数生成位置，以下代码演示了当请求的 URL 里包含 <code>login</code> 关键字时，则插入断点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>open<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.XMLHttpRequest.prototype.open;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.XMLHttpRequest.prototype.open<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>method,<span class="hljs-symbol">&amp;nbsp;</span>url,<span class="hljs-symbol">&amp;nbsp;</span>async<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>if<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>(url.indexOf(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;login&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>!=<span class="hljs-symbol">&amp;nbsp;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>open.apply(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>this<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>arguments<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hook-JSON-stringify"><a href="#Hook-JSON-stringify" class="headerlink" title="Hook JSON.stringify"></a>Hook JSON.stringify</h3><p><code>JSON.stringify()</code> 方法用于将 JavaScript 值转换为 JSON 字符串，在某些站点的加密过程中可能会遇到，以下代码演示了遇到 <code>JSON.stringify()</code> 时，则插入断点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>stringify<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>JSON<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.stringify;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>JSON<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.stringify<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>params<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Hook<span class="hljs-symbol">&amp;nbsp;</span>JSON.stringify<span class="hljs-symbol">&amp;nbsp;</span>——<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>params);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>stringify(params);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hook-JSON-parse"><a href="#Hook-JSON-parse" class="headerlink" title="Hook  JSON.parse"></a>Hook  JSON.parse</h3><p><code>JSON.parse()</code> 方法用于将一个 JSON 字符串转换为对象，在某些站点的加密过程中可能会遇到，以下代码演示了遇到 <code>JSON.parse()</code> 时，则插入断点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>parse<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>JSON<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.parse;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>JSON<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.parse<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>params<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;Hook<span class="hljs-symbol">&amp;nbsp;</span>JSON.parse<span class="hljs-symbol">&amp;nbsp;</span>——<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;nbsp;</span>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>params);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>parse(params);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hook-eval"><a href="#Hook-eval" class="headerlink" title="Hook eval"></a>Hook eval</h3><p>JavaScript <code>eval()</code> 函数的作用是计算 JavaScript 字符串，并把它作为脚本代码来执行。如果参数是一个表达式，<code>eval()</code> 函数将执行表达式。如果参数是 Javascript 语句，<code>eval()</code> 将执行 Javascript 语句，经常被用来动态执行 JS。以下代码执行后，之后所有的 <code>eval()</code> 操作都会在控制台打印输出将要执行的 JS 源码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>保存原始方法<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__cr_eval<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.eval;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>重写<span class="hljs-symbol">&amp;nbsp;</span>eval<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>myeval<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>src<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(src);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;===============<span class="hljs-symbol">&amp;nbsp;</span>eval<span class="hljs-symbol">&amp;nbsp;</span>end<span class="hljs-symbol">&amp;nbsp;</span>===============&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__cr_eval(src);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>屏蔽<span class="hljs-symbol">&amp;nbsp;</span>JS<span class="hljs-symbol">&amp;nbsp;</span>中对原生函数<span class="hljs-symbol">&amp;nbsp;</span>native<span class="hljs-symbol">&amp;nbsp;</span>属性的检测<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>_myeval<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span>myeval.bind(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>null<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>_myeval.toString<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__cr_eval.toString;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;eval&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>_myeval<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Hook-Function"><a href="#Hook-Function" class="headerlink" title="Hook Function"></a>Hook Function</h3><p>以下代码执行后，所有的函数操作都会在控制台打印输出将要执行的 JS 源码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>保存原始方法<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__cr_fun<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.Function;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>重写<span class="hljs-symbol">&amp;nbsp;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>myfun<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>var<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>args<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Array<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.prototype.slice.call(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>arguments<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>).join(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;,&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>),<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>src<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>arguments<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>[<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>arguments<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.length<span class="hljs-symbol">&amp;nbsp;</span>-<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>];<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(src);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>console<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.log(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;===============<span class="hljs-symbol">&amp;nbsp;</span>Function<span class="hljs-symbol">&amp;nbsp;</span>end<span class="hljs-symbol">&amp;nbsp;</span>===============&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>debugger<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__cr_fun.apply(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>this<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>arguments<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>//<span class="hljs-symbol">&amp;nbsp;</span>屏蔽js中对原生函数native属性的检测<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>myfun.toString<span class="hljs-symbol">&amp;nbsp;</span>=<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>function<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>return<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.__cr_fun<span class="hljs-symbol">&amp;nbsp;</span>+<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&quot;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Object<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.defineProperty(<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>window<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;Function&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,<span class="hljs-symbol">&amp;nbsp;</span>&#123;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-symbol">&amp;nbsp;</span>myfun<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&#125;);<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&#125;)();<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]</p><p>TamperMonkey 官方文档: <em><a href="https://www.tampermonkey.net/documentation.php">https://www.tampermonkey.net/documentation.php</a></em></p><p>[2]</p><p>小茗同学: <em><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html">https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html</a></em></p><p>[3]</p><p>Google 官方文档: <em><a href="https://developer.chrome.com/docs/extensions/">https://developer.chrome.com/docs/extensions/</a></em></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>hook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【爬虫知识】浏览器开发者工具使用技巧总结</title>
    <link href="/2025/02/14/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <url>/2025/02/14/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="【爬虫知识】浏览器开发者工具使用技巧总结-K哥爬虫-博客园"><a href="#【爬虫知识】浏览器开发者工具使用技巧总结-K哥爬虫-博客园" class="headerlink" title="【爬虫知识】浏览器开发者工具使用技巧总结 - K哥爬虫 - 博客园"></a>【爬虫知识】浏览器开发者工具使用技巧总结 - K哥爬虫 - 博客园</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>总览 浏览器开发者工具在爬虫中常用来进行简单的抓包分析、JS逆向调试，打开方式： F12； 快捷键 Ctrl+Shift+I； 鼠标右键检查或者审查元素； 浏览器右上角 —&gt; 更多工具 —&gt; 开发者工具 常见禁用开发者工具手段：<a href="https://blog.csdn.net/cplvfx/article">https://blog.csdn.net/cplvfx/article</a></p></blockquote><hr><h2 id="总览"><a href="#总览" class="headerlink" title="总览#"></a>总览<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E6%80%BB%E8%A7%88">#</a></h2><p>浏览器开发者工具在爬虫中常用来进行简单的抓包分析、JS逆向调试，打开方式：</p><ol><li>F12；</li><li>快捷键 Ctrl+Shift+I；</li><li>鼠标右键检查或者审查元素；</li><li>浏览器右上角 —&gt; 更多工具 —&gt; 开发者工具</li></ol><p>常见禁用开发者工具手段：<a href="https://blog.csdn.net/cplvfx/article/details/108518077">https://blog.csdn.net/cplvfx/article/details/108518077</a></p><p>官方文档：<a href="https://developer.chrome.com/docs/devtools/">https://developer.chrome.com/docs/devtools/</a></p><p><a href="https://i.loli.net/2021/07/09/hL1nVdZiz86b9Nu.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/hL1nVdZiz86b9Nu.png" alt="01.png"></a></p><ul><li><p>Elements（元素面板）：使用“元素”面板可以通过自由操纵 DOM 和 CSS 来重您网站的布局和设计。</p></li><li><p>Console（控制台面板）：在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为 shell，在页面上与 JavaScript 交互。</p></li><li><p>Sources（源代码面板）：在源代码面板中设置断点来调试 JavaScript ，或者通过 Workspaces（工作区）连接本地文件来使用开发者工具的实时编辑器。</p></li><li><p>Network（网络面板）：从发起网页页面请求 Request 后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间等），并可以根据这个进行网络性能优化。</p></li><li><p>Performance（性能面板）：使用时间轴面板，可以通过记录和查看网站生命周期内发生的各种事件来提高页面运行时的性能。</p></li><li><p>Memory（内存面板）：分析 web 应用或者页面的执行时间以及内存使用情况。</p></li><li><p>Application（应用面板）：记录网站加载的所有资源信息，包括存储数据（Local Storage、<br>Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式<br>表等。</p></li><li><p>Security（安全面板）：使用安全面板调试混合内容问题，证书问题等等。</p></li><li><p>Lighthouse（诊断面板）：对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化<br>建议。</p></li><li><p><a href="https://i.loli.net/2021/07/09/UVHxN2KscdyzePW.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/UVHxN2KscdyzePW.png" alt="02.png"></a>（元素选择）：可以直接点击页面的元素，会自动跳转到对应的源代码。</p></li><li><p><a href="https://i.loli.net/2021/07/09/4kUOL8IAMSTy7Yv.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/4kUOL8IAMSTy7Yv.png" alt="03.png"></a>（终端模拟）：模拟各种终端设备，支持自定义终端。</p></li><li><p><a href="https://i.loli.net/2021/07/09/8j2SnU7pocidkh9.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/8j2SnU7pocidkh9.png" alt="04.png"></a>（设置）：开发者工具设置，包括一些外观、快捷置、终端设备、地理位置设置等。</p></li><li><p><a href="https://i.loli.net/2021/07/09/5eOyUgp3M1rYlIL.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/5eOyUgp3M1rYlIL.png" alt="05.png"></a>（自定义）：自定义和控制开发者工具，包括调整工具的位置、全局搜索、运行命令、其他工具等。</p></li></ul><hr><h2 id="终端模拟"><a href="#终端模拟" class="headerlink" title="终端模拟#"></a>终端模拟<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E7%BB%88%E7%AB%AF%E6%A8%A1%E6%8B%9F">#</a></h2><p>点击 <a href="https://i.loli.net/2021/07/09/4kUOL8IAMSTy7Yv.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/4kUOL8IAMSTy7Yv.png" alt="03.png"></a> 可以模拟各种终端设备，适合查看手机页面的数据，点击【More tools】—&gt; 【Sensors】可以模拟终端的地理位置、终端朝向等；工具栏可以选择要模拟的终端型号，其中 Responsive 是自适应。</p><p><a href="https://i.loli.net/2021/07/09/6StXTABvaLV38MK.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/6StXTABvaLV38MK.png" alt="06.png"></a></p><hr><h2 id="Network-面板"><a href="#Network-面板" class="headerlink" title="Network 面板#"></a>Network 面板<a href="https://www.cnblogs.com/ikdl/p/15131937.html#network-%E9%9D%A2%E6%9D%BF">#</a></h2><p><a href="https://img-blog.csdnimg.cn/20210709140344886.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709140344886.png" alt="07.png"></a></p><h3 id="Controls-控制器"><a href="#Controls-控制器" class="headerlink" title="Controls 控制器#"></a>Controls 控制器<a href="https://www.cnblogs.com/ikdl/p/15131937.html#controls-%E6%8E%A7%E5%88%B6%E5%99%A8">#</a></h3><ul><li><p>Preserve log：是否在页面重加载后，清除请求列表。</p></li><li><p>Disable cache：是否启用缓存。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709140841900.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709140841900.png" alt="08.png"></a>：是否开启抓包。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709140841901.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709140841901.png" alt="09.png"></a>：清除请求。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709140841904.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709140841904.png" alt="10.png"></a>：是否隐藏 Filter（过滤器）窗格。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709141140555.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709141140555.png" alt="11.png"></a>：搜索。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709140841907.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709140841907.png" alt="12.png"></a>：Network conditions，网络条件，允许在各种网络环境中测试网站，包括 3G，离线等，还可以自定义限制最大下载和上传流量。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709140841906.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709140841906.png" alt="13.png"></a>：Import&#x2F;Export HAR file，导入导出抓包数据。</p></li></ul><h3 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器#"></a>Filter 过滤器<a href="https://www.cnblogs.com/ikdl/p/15131937.html#filter-%E8%BF%87%E6%BB%A4%E5%99%A8">#</a></h3><ul><li><p>Hide data URLs：data URLs 指一些嵌入到文档中的小型文件，在请求表里面以 data: 开头的文件就是，如较为常见的 svg 文件。勾选 Hide data URLs复选框即可隐藏此类文件。</p></li><li><p>All：显示所有请求。</p></li><li><p>XHR：全称 XMLHttpRequest，是一种创建 AJAX 请求的 JavaScript API，通常抓取 Ajax 请求可以选择 XHR。</p></li><li><p>WS：全称 WebSocket，是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p></li><li><p>Manifest 安卓开发文件名，属于 AndroidManifest.xml 文件，在简单的 Android 系统的应用中提出了重要的信息码。</p></li><li><p>Has blocked cookies：仅显示具有阻止响应 cookie 的请求。</p></li><li><p>Blocked Requests：只显示被阻止的请求。</p></li></ul><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试#"></a>断点调试<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95">#</a></h2><h3 id="常规断点调试"><a href="#常规断点调试" class="headerlink" title="常规断点调试#"></a>常规断点调试<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E5%B8%B8%E8%A7%84%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95">#</a></h3><p>适用于分析关键函数代码逻辑</p><p><a href="https://img-blog.csdnimg.cn/20210709160630209.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709160630209.png" alt="14.png"></a></p><ol><li>Ctrl+Shift+F 或者右上角三个点打开全局搜索，搜索关键字。</li><li>定位到可疑代码，点击行号埋下断点。</li><li>调试代码，分析逻辑，其中 console 模板可以直接编写 JS 代码进行调试。</li></ol><p>各个选项功能：</p><ul><li><p><a href="https://img-blog.csdnimg.cn/20210709160629882.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709160629882.png" alt="15.png"></a>：执行到下一个断点。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709160629952.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709160629952.png" alt="16.png"></a>：执行下一步，不会进入所调用的函数内部。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709160916133.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709160916133.png" alt="17.png"></a>：进入所调用的函数内部。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709160629987.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709160629987.png" alt="18.png"></a>：跳出函数内部。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709160629988.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709160629988.png" alt="19.png"></a>：一步步执行代码，遇到有函数调用，则进入函数。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709161014258.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709161014258.png" alt="20.png"></a>：停用断点。</p></li><li><p><a href="https://img-blog.csdnimg.cn/20210709161014259.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709161014259.png" alt="21.png"></a>：不要在出现异常时暂停。</p></li><li><p>Breakpoints：可以看到已经埋下的断点。</p></li><li><p>Scope：可以看到当前局部或者全局变量的值，可对值进行修改。</p></li><li><p>Call Stack：可以看到当前代码调用的堆栈信息，代码执行顺序为由下至上。</p></li></ul><h3 id="XHR-断点"><a href="#XHR-断点" class="headerlink" title="XHR 断点#"></a>XHR 断点<a href="https://www.cnblogs.com/ikdl/p/15131937.html#xhr-%E6%96%AD%E7%82%B9">#</a></h3><p>匹配 url 中关键词，匹配到则跳转到参数生成处，适用 于url 中的加密参数全局搜索搜不到，可采用这种方式拦截。</p><p><a href="https://img-blog.csdnimg.cn/20210709164051767.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709164051767.png" alt="22.png"></a></p><h3 id="行为断点"><a href="#行为断点" class="headerlink" title="行为断点#"></a>行为断点<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E8%A1%8C%E4%B8%BA%E6%96%AD%E7%82%B9">#</a></h3><p>Event Listener Breakpoints，事件侦听器断点，当鼠标点击、移动、键盘按键等行为或者其他事件发生时可以触发断点，比如 Mouse —&gt; click，可快速定位点击按钮后，所执行的 JS。</p><p><a href="https://img-blog.csdnimg.cn/20210709165528899.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709165528899.png" alt="23.png"></a></p><hr><h2 id="插入-JS"><a href="#插入-JS" class="headerlink" title="插入 JS#"></a>插入 JS<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E6%8F%92%E5%85%A5-js">#</a></h2><p>在 sources —&gt; snippets 下可以新建 JS 脚本。</p><p><a href="https://img-blog.csdnimg.cn/20210709170118377.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709170118377.png" alt="24.png"></a></p><hr><h2 id="打印-windows-对象的值"><a href="#打印-windows-对象的值" class="headerlink" title="打印 windows 对象的值#"></a>打印 windows 对象的值<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E6%89%93%E5%8D%B0-windows-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%80%BC">#</a></h2><p>在 console 中输入如下代码，如只打印 <code>_$</code> 开头的变量值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>) &#123; <span class="hljs-keyword">if</span> (p.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) !== <span class="hljs-string">&quot;_$&quot;</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p + <span class="hljs-string">&quot; &gt;&gt;&gt; &quot;</span> + <span class="hljs-built_in">eval</span>(p)) &#125;<br></code></pre></td></tr></table></figure><h2 id="无限-debugger-防调试"><a href="#无限-debugger-防调试" class="headerlink" title="无限 debugger 防调试#"></a>无限 debugger 防调试<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E6%97%A0%E9%99%90-debugger-%E9%98%B2%E8%B0%83%E8%AF%95">#</a></h2><p>某些页面打开调试工具会出现无限 debugger 的现象：</p><p><a href="https://img-blog.csdnimg.cn/20210709170934721.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709170934721.png" alt="25.png"></a></p><h3 id="中间人拦截替换无限-debug-函数"><a href="#中间人拦截替换无限-debug-函数" class="headerlink" title="中间人拦截替换无限 debug 函数#"></a>中间人拦截替换无限 debug 函数<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%8B%A6%E6%88%AA%E6%9B%BF%E6%8D%A2%E6%97%A0%E9%99%90-debug-%E5%87%BD%E6%95%B0">#</a></h3><p>查看调用栈，点击第二行跳转到原函数：</p><p><a href="https://img-blog.csdnimg.cn/20210709171704286.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709171704286.png" alt="26.png"></a></p><p>可以看到 <code>_0x2ba9bc[_0x20b2(&#39;0x79&#39;)]</code> 和 <code>_0x2ba9bc[_0x20b2(&#39;0x7a&#39;)]</code> 分别对应 debu 和 gger，连起来就是 debugger，在本地重写这个 JS，直接将这两个值置空：</p><p><a href="https://img-blog.csdnimg.cn/20210709171930922.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709171930922.png" alt="27.png"></a></p><p>使用插件 ReRes，编写规则，遇到此 JS，就替换成我们本地经过修改过的 JS，替换后无限 debugger 就不存在了：</p><p><a href="https://img-blog.csdnimg.cn/20210709172236551.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709172236551.png" alt="28.png"></a><br><a href="https://img-blog.csdnimg.cn/20210709172236589.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709172236589.png" alt="29.png"></a></p><h3 id="方法置空"><a href="#方法置空" class="headerlink" title="方法置空#"></a>方法置空<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E6%96%B9%E6%B3%95%E7%BD%AE%E7%A9%BA">#</a></h3><p>直接在 Console 中将无限 debugger 的函数重写置空也可以破解无限 debugger，缺点是刷新后失效。</p><h3 id="解除定时器"><a href="#解除定时器" class="headerlink" title="解除定时器#"></a>解除定时器<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E8%A7%A3%E9%99%A4%E5%AE%9A%E6%97%B6%E5%99%A8">#</a></h3><p>适用于定时器类触发的 debug：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">99999</span>; i++)<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(i);<br></code></pre></td></tr></table></figure><hr><h2 id="Hook-钩子"><a href="#Hook-钩子" class="headerlink" title="Hook 钩子#"></a>Hook 钩子<a href="https://www.cnblogs.com/ikdl/p/15131937.html#hook-%E9%92%A9%E5%AD%90">#</a></h2><p>钩子英文 Hook，在 windows 系统中，所有的都是消息，按了一下键盘，就是一个消息，Hook 的意思就是勾住，在消息过去之前先把消息勾住，不让其执行，然后自己优先处理。也就是这个技术提供了一个入口，能够针对不同的消息或者 api 在执行前，先执行我的操作。“我的操作”就是钩子函数。在开发者工具中以 chrome 插件的方式，在匹配到关键词处插入断点。</p><p>创建一个文件夹，文件夹中创建一个钩子函数文件 inject.js 以及插件的配置文件 manifest.json ：</p><p><a href="https://img-blog.csdnimg.cn/20210709173720234.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709173720234.png" alt="30.ong"></a></p><p>打开 chrome 的扩展程序, 打开开发者模式，加载已解压的扩展程序，选择创建的文件夹即可：</p><p><a href="https://img-blog.csdnimg.cn/20210709174101479.png"><img src="/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%20-%20K%E5%93%A5%E7%88%AC%E8%99%AB%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD/20210709174101479.png" alt="31.png"></a></p><h3 id="配置文件-manifest-json"><a href="#配置文件-manifest-json" class="headerlink" title="配置文件 manifest.json#"></a>配置文件 manifest.json<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-manifestjson">#</a></h3><p>以一个 header 钩子为例，其配置文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Injection&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RequestHeader钩子&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;manifest_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;content_scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;matches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;&lt;all_urls&gt;&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;inject.js&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;all_frames&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;tabs&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;run_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;document_start&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>header 钩子用于定位 header 中关键参数生成位置，以下代码演示了当 header 中包含 <code>Authorization</code> 时，则插入断点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> code = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">var</span> org = <span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setRequestHeader</span>; <span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setRequestHeader</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">key,value</span>)&#123; <span class="hljs-keyword">if</span>(key==<span class="hljs-string">&#x27;Authorization&#x27;</span>)&#123; <span class="hljs-keyword">debugger</span>; &#125; <span class="hljs-keyword">return</span> org.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>); &#125; &#125; <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>); script.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;(&#x27;</span> + code + <span class="hljs-string">&#x27;)()&#x27;</span>; (<span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">appendChild</span>(script); script.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(script);<br></code></pre></td></tr></table></figure><h3 id="cookie-钩子"><a href="#cookie-钩子" class="headerlink" title="cookie 钩子#"></a>cookie 钩子<a href="https://www.cnblogs.com/ikdl/p/15131937.html#cookie-%E9%92%A9%E5%AD%90">#</a></h3><p>cookie 钩子用于定位 cookie 中关键参数生成位置，以下代码演示了当 cookie 中匹配到了 <code>abcdefghijk</code>， 则插入断点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> code = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">var</span> org = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">__lookupSetter__</span>(<span class="hljs-string">&#x27;cookie&#x27;</span>); <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">__defineSetter__</span>(<span class="hljs-string">&quot;cookie&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">cookie</span>)&#123; <span class="hljs-keyword">if</span>(cookie.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;abcdefghijk&#x27;</span>)&gt;-<span class="hljs-number">1</span>)&#123; <span class="hljs-keyword">debugger</span>; &#125; org = cookie; &#125;); <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">__defineGetter__</span>(<span class="hljs-string">&quot;cookie&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> org;&#125;); &#125; <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>); script.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;(&#x27;</span> + code + <span class="hljs-string">&#x27;)()&#x27;</span>; (<span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">appendChild</span>(script); script.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(script);<br></code></pre></td></tr></table></figure><h3 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子#"></a>请求钩子<a href="https://www.cnblogs.com/ikdl/p/15131937.html#%E8%AF%B7%E6%B1%82%E9%92%A9%E5%AD%90">#</a></h3><p>请求钩子用于定位请求中关键参数生成位置，以下代码演示了当请求的 url 里包含 <code>AbCdE</code> 时，则插入断点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> code = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">var</span> open = <span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">open</span>; <span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">open</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">method, url, <span class="hljs-keyword">async</span></span>)&#123; <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;AbCdE&quot;</span>)&gt;-<span class="hljs-number">1</span>)&#123; <span class="hljs-keyword">debugger</span>; &#125; <span class="hljs-keyword">return</span> open.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>); &#125;; &#125; <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>); script.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;(&#x27;</span> + code + <span class="hljs-string">&#x27;)()&#x27;</span>; (<span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">appendChild</span>(script); script.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(script);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【爬虫知识】爬虫常见加密解密算法</title>
    <link href="/2025/02/14/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95-K%E5%93%A5%E7%88%AC%E8%99%AB-%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    <url>/2025/02/14/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95-K%E5%93%A5%E7%88%AC%E8%99%AB-%E5%8D%9A%E5%AE%A2%E5%9B%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="【爬虫知识】爬虫常见加密解密算法"><a href="#【爬虫知识】爬虫常见加密解密算法" class="headerlink" title="【爬虫知识】爬虫常见加密解密算法"></a>【爬虫知识】爬虫常见加密解密算法</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>简介 本文总结了在爬虫中常见的各种加密算法、编码算法的原理、在 JavaScript 中和 Python 中的基本实现方法，遇到 JS 加密的时候可以快速还原加密过程，有的网站在加密的过程中可能还经过了其他处理，但是大致的方法是一样的。 常见加密算法： 对称加密（加密解密密钥相同）：DES、3DES</p></blockquote><hr><p><a href="https://img2020.cnblogs.com/blog/2501174/202108/2501174-20210816091906408-1932195692.png"><img src="/2025/02/14/%E3%80%90%E7%88%AC%E8%99%AB%E7%9F%A5%E8%AF%86%E3%80%91%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95-K%E5%93%A5%E7%88%AC%E8%99%AB-%E5%8D%9A%E5%AE%A2%E5%9B%AD/2501174-20210816091906408-1932195692.png"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介#"></a>简介<a href="https://www.cnblogs.com/ikdl/p/15146160.html#%E7%AE%80%E4%BB%8B">#</a></h2><p>本文总结了在爬虫中常见的各种加密算法、编码算法的原理、在 JavaScript 中和 Python 中的基本实现方法，遇到 JS 加密的时候可以快速还原加密过程，有的网站在加密的过程中可能还经过了其他处理，但是大致的方法是一样的。</p><p>常见加密算法：</p><ol><li>对称加密（加密解密密钥相同）：DES、3DES、AES、RC4、Rabbit</li><li>非对称加密（区分公钥和私钥）：RSA、DSA、ECC</li><li>消息摘要算法&#x2F;签名算法：MD5、SHA、HMAC、PBKDF2</li></ol><p>常见编码算法：Base64</p><h3 id="JavaScript-加密解密模块"><a href="#JavaScript-加密解密模块" class="headerlink" title="JavaScript 加密解密模块#"></a>JavaScript 加密解密模块<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%A8%A1%E5%9D%97">#</a></h3><h4 id="Crypto-JS"><a href="#Crypto-JS" class="headerlink" title="Crypto-JS#"></a>Crypto-JS<a href="https://www.cnblogs.com/ikdl/p/15146160.html#crypto-js">#</a></h4><p>Crypto-JS 支持 MD5、SHA、RIPEMD-160、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、Rabbit、RC4 等，<strong>不支持 RSA、ECC</strong>，是应用比较广的加密模块，使用命令 <code>npm install crypto-js</code> 安装。</p><p>参考资料：</p><ul><li><p>Crypto-JS 文档：<a href="https://cryptojs.gitbook.io/docs/">https://cryptojs.gitbook.io/docs/</a></p></li><li><p>Crypto-JS Github：<a href="https://github.com/brix/crypto-js">https://github.com/brix/crypto-js</a></p></li></ul><h4 id="Node-RSA"><a href="#Node-RSA" class="headerlink" title="Node-RSA#"></a>Node-RSA<a href="https://www.cnblogs.com/ikdl/p/15146160.html#node-rsa">#</a></h4><p>Node-RSA 对 RSA 算法提供了支持，使用命令 <code>npm install node-rsa</code> 安装。</p><p>参考资料：Node-RSA Github：<a href="https://github.com/rzcoder/node-rsa">https://github.com/rzcoder/node-rsa</a></p><h4 id="JSEncrypt"><a href="#JSEncrypt" class="headerlink" title="JSEncrypt#"></a>JSEncrypt<a href="https://www.cnblogs.com/ikdl/p/15146160.html#jsencrypt">#</a></h4><p>参考资料：JSEncrypt 对 RSA 算法提供了更加全面的支持，使用命令 <code>npm install jsencrypt</code> 安装。</p><ul><li>JSEncrypt 文档：<a href="http://travistidwell.com/jsencrypt/">http://travistidwell.com/jsencrypt/</a></li><li>JSEncrypt Github：<a href="https://github.com/travist/jsencrypt">https://github.com/travist/jsencrypt</a></li></ul><h3 id="Python-加密解密库"><a href="#Python-加密解密库" class="headerlink" title="Python 加密解密库#"></a>Python 加密解密库<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%BA%93">#</a></h3><h4 id="Cryptodome-amp-Crypto"><a href="#Cryptodome-amp-Crypto" class="headerlink" title="Cryptodome &amp; Crypto#"></a>Cryptodome &amp; Crypto<a href="https://www.cnblogs.com/ikdl/p/15146160.html#cryptodome--crypto">#</a></h4><p>在 Python 中有很多算法是通过第三方库 Cryptodome 或者 Crypto 来实现的，Cryptodome 几乎是 Crypto 的替代品，Crypto 已经停止更新好多年了，有很多未知错误，所以<strong>不建议安装 Crypto ！</strong></p><p>Cryptodome 支持几乎所有主流加密算法，包括 MD5、SHA、BLAKE2b、BLAKE2s、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、ECC、RSA、RC4 等。</p><p>Cryptodome 使用命令 <code>pip install pycryptodome</code> 进行安装，Crypto 使用命令 <code>pip install pycrypto</code> 进行安装。</p><p>参考资料：</p><ul><li><p>Crypto 库：<a href="https://www.dlitz.net/software/pycrypto/">https://www.dlitz.net/software/pycrypto/</a></p></li><li><p>Cryptodome 库：<a href="https://www.pycryptodome.org/en/latest/">https://www.pycryptodome.org/en/latest/</a></p></li></ul><h4 id="Hashlib"><a href="#Hashlib" class="headerlink" title="Hashlib#"></a>Hashlib<a href="https://www.cnblogs.com/ikdl/p/15146160.html#hashlib">#</a></h4><p>Python 的标准库 hashlib 提供了常见的摘要算法，如 MD5，SHA、BLAKE2b、BLAKE2s 等。</p><p>参考资料：</p><ul><li>hashlib 库：<a href="https://docs.python.org/3/library/hashlib.html">https://docs.python.org/3/library/hashlib.html</a></li><li>廖雪峰 hashlib：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744">https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744</a></li></ul><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC#"></a>HMAC<a href="https://www.cnblogs.com/ikdl/p/15146160.html#hmac">#</a></h4><p>Python 的标准库 hmac 对 HMAC 算法提供了支持。</p><p>参考资料：</p><ul><li>hmac 库：<a href="https://docs.python.org/3/library/hmac.html">https://docs.python.org/3/library/hmac.html</a></li><li>廖雪峰 hmac：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296">https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296</a></li></ul><h4 id="pyDes"><a href="#pyDes" class="headerlink" title="pyDes#"></a>pyDes<a href="https://www.cnblogs.com/ikdl/p/15146160.html#pydes">#</a></h4><p>Python 的第三方库 pyDes 对 DES 算法提供了支持。使用命令 <code>pip install pydes</code> 进行安装。</p><p>参考资料：pyDes 库：<a href="https://github.com/twhiteman/pyDes">https://github.com/twhiteman/pyDes</a></p><h4 id="ESA"><a href="#ESA" class="headerlink" title="ESA#"></a>ESA<a href="https://www.cnblogs.com/ikdl/p/15146160.html#esa">#</a></h4><p>Python 的第三方库 rsa 对 RSA 算法提供了支持。使用命令 <code>pip install rsa</code> 进行安装。</p><p>参考资料：rsa 库：<a href="https://stuvel.eu/python-rsa-doc/">https://stuvel.eu/python-rsa-doc/</a></p><h2 id="加密解密基本参数"><a href="#加密解密基本参数" class="headerlink" title="加密解密基本参数#"></a>加密解密基本参数<a href="https://www.cnblogs.com/ikdl/p/15146160.html#%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0">#</a></h2><p>在一些对称和非对称加密算法中，经常会用到以下三个参数：初始向量 iv、加密模式 mode、填充方式 padding，先介绍一下这三个参数的含义和作用：</p><h3 id="初始向量-iv"><a href="#初始向量-iv" class="headerlink" title="初始向量 iv#"></a>初始向量 iv<a href="https://www.cnblogs.com/ikdl/p/15146160.html#%E5%88%9D%E5%A7%8B%E5%90%91%E9%87%8F-iv">#</a></h3><p>在密码学中，初始向量（initialization vector，缩写为 iv），又称初始变数（starting variable，缩写为 sv），与密钥结合使用，作为加密数据的手段，它是一个固定长度的值，iv 的长度取决于加密方法，通常与使用的加密密钥或密码块的长度相当，一般在使用过程中会要求它是随机数或拟随机数，使用随机数产生的初始向量才能达到语义安全，让攻击者难以对原文一致且使用同一把密钥生成的密文进行破解。</p><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Initialization_vector">https://en.wikipedia.org/wiki/Initialization_vector</a></p><h3 id="加密模式-mode"><a href="#加密模式-mode" class="headerlink" title="加密模式 mode#"></a>加密模式 mode<a href="https://www.cnblogs.com/ikdl/p/15146160.html#%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F-mode">#</a></h3><p>目前流行的加密和数字认证算法，都是采用块加密方式，就是将需要加密的明文分成固定大小的数据块，然后对其执行密码算法，得到密文。数据块的大小通常采用跟密钥一样的长度。加密模式在加密算法的基础上发展出来，同时也可以独立于加密算法而存在，加密模式定义了怎样通过重复利用加密算法将大于一个数据块大小的明文转化为密文，描述了加密每一数据块的过程。目前利用较多的加密模式有以下几种：</p><ul><li><p><strong>ECB：Electronic Code Book（电子码本模式）</strong>，是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</p></li><li><p><strong>CBC：Cipher Block Chaining（密码块链接模式）</strong>，是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。</p></li><li><p><strong>PCBC：Propagating Cipher Block Chaining（填充密码块链接模式）</strong>，也称为明文密码块链接模式（Plaintext Cipher Block Chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</p></li><li><p><strong>CFB：Cipher Feedback（密码反馈模式）</strong>，可以将块密码变为自同步的流密码，类似于 CBC，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程。</p></li><li><p><strong>OFB：Output Feedback（输出反馈模式）</strong>，可以将块密码变成同步的流密码，它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。</p></li><li><p><strong>CTR：Counter mode（计数器模式）</strong>，也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter），在 CTR 模式中，有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</p></li></ul><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation</a></p><h3 id="填充方式-padding"><a href="#填充方式-padding" class="headerlink" title="填充方式 padding#"></a>填充方式 padding<a href="https://www.cnblogs.com/ikdl/p/15146160.html#%E5%A1%AB%E5%85%85%E6%96%B9%E5%BC%8F-padding">#</a></h3><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式最后一块数据在加密前需要进行填充。有数种填充方法，其中最简单的一种是在明文的最后填充空字符以使其长度为块长度的整数倍。常见填充方式有以下几种：</p><ul><li><p><strong>PKCS7</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为需要填充的字节长度值。</p></li><li><p><strong>PKCS5</strong>：PKCS5 作为 PKCS7 的子集算法，概念上没有什么区别，只是在 blockSize 上固定为 8 bytes，即块大小固定为 8 字节。</p></li><li><p><strong>ZeroPadding</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为 0 。</p></li><li><p><strong>ISO10126</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充随机数值。</p></li><li><p><strong>ANSIX923</strong>：在填充时首先获取需要填充的字节长度 &#x3D; 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充数字零。</p></li></ul><p>参考资料：</p><ul><li>维基百科：<a href="https://en.wikipedia.org/wiki/Padding_(cryptography)">https://en.wikipedia.org/wiki/Padding_(cryptography)</a></li><li>PKCS7&#x2F;PKCS5 填充算法：<a href="https://segmentfault.com/a/1190000019793040">https://segmentfault.com/a/1190000019793040</a></li></ul><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64#"></a>Base64<a href="https://www.cnblogs.com/ikdl/p/15146160.html#base64">#</a></h2><p>简介：Base64 是一种用 64 个字符来表示任意二进制数据的方法。</p><p>参考资料：</p><ul><li>Base64 百度百科：<a href="https://baike.baidu.com/item/base64/8545775">https://baike.baidu.com/item/base64/8545775</a></li><li>Base64 维基百科：<a href="https://en.wikipedia.org/wiki/Base64">https://en.wikipedia.org/wiki/Base64</a></li></ul><h3 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function base64Encode() &#123; var srcs = CryptoJS.enc.Utf8.parse(text); var encodeData = CryptoJS.enc.Base64.stringify(srcs); return encodeData &#125; function base64Decode() &#123; var srcs = CryptoJS.enc.Base64.parse(encodeData); var decodeData = srcs.toString(CryptoJS.enc.Utf8); return decodeData &#125; var text = &quot;I love Python!&quot; var encodeData = base64Encode() var decodeData = base64Decode() console.log(&quot;Base64 编码: &quot;, encodeData) console.log(&quot;Base64 解码: &quot;, decodeData) // Base64 编码: SSBsb3ZlIFB5dGhvbiE= // Base64 解码: I love Python!</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_encode</span>(<span class="hljs-params">text</span>): encode_data = base64.b64encode(text.encode()) <span class="hljs-keyword">return</span> encode_data <span class="hljs-keyword">def</span> <span class="hljs-title function_">base64_decode</span>(<span class="hljs-params">encode_data</span>): decode_data = base64.b64decode(encode_data) <span class="hljs-keyword">return</span> decode_data <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: text = <span class="hljs-string">&#x27;I love Python!&#x27;</span> encode_data = base64_encode(text) decode_data = base64_decode(encode_data) <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 编码：&#x27;</span>, encode_data) <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 解码：&#x27;</span>, decode_data) <span class="hljs-comment"># Base64 编码： b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27; # Base64 解码： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5#"></a>MD5<a href="https://www.cnblogs.com/ikdl/p/15146160.html#md5">#</a></h2><p>简介：全称 MD5 消息摘要算法（英文名称：MD5 Message-Digest Algorithm），又称哈希算法、散列算法，由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于 1992 年作为 RFC 1321 被公布，用以取代 MD4 算法。摘要算法是单向加密的，也就是说明文通过摘要算法加密之后，是不能解密的。摘要算法的第二个特点密文是固定长度的，它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。之所以叫摘要算法，它的算法就是提取明文重要的特征。所以，两个不同的明文，使用了摘要算法之后，有可能他们的密文是一样的，不过这个概率非常的低。</p><p>参考资料：</p><ul><li>RFC 1321：<a href="https://datatracker.ietf.org/doc/rfc1321/">https://datatracker.ietf.org/doc/rfc1321/</a></li><li>MD5 维基百科：<a href="https://en.wikipedia.org/wiki/MD5">https://en.wikipedia.org/wiki/MD5</a></li></ul><h3 id="JavaScript-实现-1"><a href="#JavaScript-实现-1" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-1">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function MD5Test() &#123; var text = &quot;I love python!&quot; return CryptoJS.MD5(text).toString() &#125; console.log(MD5Test()) // 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-1"><a href="#Python-实现-1" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-1">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_test1</span>(): md5 = hashlib.new(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-built_in">print</span>(md5.hexdigest()) <span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_test2</span>(): md5 = hashlib.md5() md5.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) md5.update(<span class="hljs-string">&#x27;python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-built_in">print</span>(md5.hexdigest()) <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: md5_test1() <span class="hljs-comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8 md5_test2() # 21169ee3acd4a24e1fcb4322cfd9a2b8</span><br></code></pre></td></tr></table></figure><h2 id="PBKDF2"><a href="#PBKDF2" class="headerlink" title="PBKDF2#"></a>PBKDF2<a href="https://www.cnblogs.com/ikdl/p/15146160.html#pbkdf2">#</a></h2><p>简介：英文名称：Password-Based Key Derivation Function 2，PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。PBKDF2 将伪随机函数（例如 HMAC），把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，如果重复的次数足够大，破解的成本就会变得很高。</p><p>参考资料：</p><ul><li>RFC 8018：<a href="https://datatracker.ietf.org/doc/rfc8018/">https://datatracker.ietf.org/doc/rfc8018/</a></li><li>PBKDF2 维基百科：<a href="https://en.wikipedia.org/wiki/PBKDF2">https://en.wikipedia.org/wiki/PBKDF2</a></li></ul><h3 id="JavaScript-实现-2"><a href="#JavaScript-实现-2" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-2">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function pbkdf2Encrypt() &#123; var text = &quot;I love Python!&quot; var salt = &quot;43215678&quot; // key 长度 128，10 次重复运算 var encryptedData = CryptoJS.PBKDF2(text, salt, &#123;keySize: 128/32,iterations: 10&#125;); return encryptedData.toString() &#125; console.log(pbkdf2Encrypt()) // 7fee6e8350cfe96314c76aaa6e853a50</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-2"><a href="#Python-实现-2" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-2">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii <span class="hljs-keyword">from</span> Cryptodome.Hash <span class="hljs-keyword">import</span> SHA1 <span class="hljs-keyword">from</span> Cryptodome.Protocol.KDF <span class="hljs-keyword">import</span> PBKDF2 text = <span class="hljs-string">&#x27;I love Python!&#x27;</span> salt = <span class="hljs-string">b&#x27;43215678&#x27;</span> result = PBKDF2(text, salt, count=<span class="hljs-number">10</span>, hmac_hash_module=SHA1) result = binascii.hexlify(result) <span class="hljs-built_in">print</span>(result) <span class="hljs-comment"># b&#x27;7fee6e8350cfe96314c76aaa6e853a50&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA#"></a>SHA<a href="https://www.cnblogs.com/ikdl/p/15146160.html#sha">#</a></h2><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），由美国国家安全局（NSA）所设计，主要适用于数字签名标准（Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，MD5 的密文是 32 位，而 SHA-1 是 40 位，版本越强，密文越长，代价是速度越慢。</p><p>参考资料：</p><ul><li>RFC 3174：<a href="https://datatracker.ietf.org/doc/rfc3174/">https://datatracker.ietf.org/doc/rfc3174/</a></li><li>SHA 维基百科：<a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms">https://en.wikipedia.org/wiki/Secure_Hash_Algorithms</a></li></ul><h3 id="JavaScript-实现-3"><a href="#JavaScript-实现-3" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-3">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function SHA1Encrypt() &#123; var text = &quot;I love python!&quot; return CryptoJS.SHA1(text).toString(); &#125; console.log(SHA1Encrypt()) // 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-3"><a href="#Python-实现-3" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-3">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib <span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1_test1</span>(): sha1 = hashlib.new(<span class="hljs-string">&#x27;sha1&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-built_in">print</span>(sha1.hexdigest()) <span class="hljs-keyword">def</span> <span class="hljs-title function_">sha1_test2</span>(): sha1 = hashlib.sha1() sha1.update(<span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-built_in">print</span>(sha1.hexdigest()) <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: sha1_test1() <span class="hljs-comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb sha1_test2() # 23c02b203bd2e2ca19da911f1d270a06d86719fb</span><br></code></pre></td></tr></table></figure><h2 id="HMAC-1"><a href="#HMAC-1" class="headerlink" title="HMAC#"></a>HMAC<a href="https://www.cnblogs.com/ikdl/p/15146160.html#hmac-1">#</a></h2><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash 函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、对报文进行 Hash 运算，形成固定长度的认证码。通信双方通过认证码的校验来确定报文的合法性。</p><p>参考资料：</p><ul><li>RFC 2104：<a href="https://datatracker.ietf.org/doc/rfc2104/">https://datatracker.ietf.org/doc/rfc2104/</a></li><li>HMAC 维基百科：<a href="https://en.wikipedia.org/wiki/HMAC">https://en.wikipedia.org/wiki/HMAC</a></li></ul><h3 id="JavaScript-实现-4"><a href="#JavaScript-实现-4" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-4">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function HMACEncrypt() &#123; var text = &quot;I love python!&quot; var key = &quot;secret&quot; return CryptoJS.HmacMD5(text, key).toString(); // return CryptoJS.HmacSHA1(text, key).toString(); // return CryptoJS.HmacSHA256(text, key).toString(); &#125; console.log(HMACEncrypt())</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-4"><a href="#Python-实现-4" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-4">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hmac <span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_test1</span>(): message = <span class="hljs-string">b&#x27;I love python!&#x27;</span> key = <span class="hljs-string">b&#x27;secret&#x27;</span> md5 = hmac.new(key, message, digestmod=<span class="hljs-string">&#x27;MD5&#x27;</span>) <span class="hljs-built_in">print</span>(md5.hexdigest()) <span class="hljs-keyword">def</span> <span class="hljs-title function_">hmac_test2</span>(): key = <span class="hljs-string">&#x27;secret&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>) sha1 = hmac.new(key, digestmod=<span class="hljs-string">&#x27;sha1&#x27;</span>) sha1.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)) sha1.update(<span class="hljs-string">&#x27;Python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)) <span class="hljs-built_in">print</span>(sha1.hexdigest()) <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: hmac_test1() <span class="hljs-comment"># 9c503a1f852edcc3526ea56976c38edf hmac_test2() # 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span><br></code></pre></td></tr></table></figure><h2 id="DES"><a href="#DES" class="headerlink" title="DES#"></a>DES<a href="https://www.cnblogs.com/ikdl/p/15146160.html#des">#</a></h2><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 4772：<a href="https://datatracker.ietf.org/doc/rfc4772/">https://datatracker.ietf.org/doc/rfc4772/</a></li><li>DES 维基百科：<a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard">https://en.wikipedia.org/wiki/Data_Encryption_Standard</a></li></ul><h3 id="JavaScript-实现-5"><a href="#JavaScript-实现-5" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-5">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function desEncrypt() &#123; var key = CryptoJS.enc.Utf8.parse(desKey), iv = CryptoJS.enc.Utf8.parse(desIv), srcs = CryptoJS.enc.Utf8.parse(text), // CBC 加密模式，Pkcs7 填充方式 encrypted = CryptoJS.DES.encrypt(srcs, key, &#123; iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 &#125;); return encrypted.toString(); &#125; function desDecrypt() &#123; var key = CryptoJS.enc.Utf8.parse(desKey), iv = CryptoJS.enc.Utf8.parse(desIv), srcs = encryptedData, // CBC 加密模式，Pkcs7 填充方式 decrypted = CryptoJS.DES.decrypt(srcs, key, &#123; iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 &#125;); return decrypted.toString(CryptoJS.enc.Utf8); &#125; var text = &quot;I love Python!&quot; // 待加密对象 var desKey = &quot;6f726c64f2c2057&quot; // 密钥 var desIv = &quot;0123456789ABCDEF&quot; // 初始向量 var encryptedData = desEncrypt() var decryptedData = desDecrypt() console.log(&quot;加密字符串: &quot;, encryptedData) console.log(&quot;解密字符串: &quot;, decryptedData) // 加密字符串: +ndbEkWNw2QAfIYQtwC14w== // 解密字符串: I love Python!</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-5"><a href="#Python-实现-5" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-5">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii <span class="hljs-comment"># 加密模式 CBC，填充方式 PAD_PKCS5 from pyDes import des, CBC, PAD_PKCS5 def des_encrypt(key, text, iv): k = des(key, CBC, iv, pad=None, padmode=PAD_PKCS5) en = k.encrypt(text, padmode=PAD_PKCS5) return binascii.b2a_hex(en) def des_decrypt(key, text, iv): k = des(key, CBC, iv, pad=None, padmode=PAD_PKCS5) de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5) return de if __name__ == &#x27;__main__&#x27;: secret_key = &#x27;12345678&#x27; # 密钥 text = &#x27;I love Python!&#x27; # 加密对象 iv = secret_key # 偏移量 secret_str = des_encrypt(secret_key, text, iv) print(&#x27;加密字符串：&#x27;, secret_str) clear_str = des_decrypt(secret_key, secret_str, iv) print(&#x27;解密字符串：&#x27;, clear_str) # 加密字符串： b&#x27;302d3abf2421169239f829b38a9545f1&#x27; # 解密字符串： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES#"></a>3DES<a href="https://www.cnblogs.com/ikdl/p/15146160.html#3des">#</a></h2><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、 Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 1851：<a href="https://datatracker.ietf.org/doc/rfc1851/">https://datatracker.ietf.org/doc/rfc1851/</a></li><li>3DES 维基百科：<a href="https://en.wikipedia.org/wiki/Triple_DES">https://en.wikipedia.org/wiki/Triple_DES</a></li></ul><h3 id="JavaScript-实现-6"><a href="#JavaScript-实现-6" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-6">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function tripleDesEncrypt() &#123; var key = CryptoJS.enc.Utf8.parse(desKey), iv = CryptoJS.enc.Utf8.parse(desIv), srcs = CryptoJS.enc.Utf8.parse(text), // ECB 加密方式，Iso10126 填充方式 encrypted = CryptoJS.TripleDES.encrypt(srcs, key, &#123; iv: iv, mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Iso10126 &#125;); return encrypted.toString(); &#125; function tripleDesDecrypt() &#123; var key = CryptoJS.enc.Utf8.parse(desKey), iv = CryptoJS.enc.Utf8.parse(desIv), srcs = encryptedData, // ECB 加密方式，Iso10126 填充方式 decrypted = CryptoJS.TripleDES.decrypt(srcs, key, &#123; iv: iv, mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Iso10126 &#125;); return decrypted.toString(CryptoJS.enc.Utf8); &#125; var text = &quot;I love Python!&quot; // 待加密对象 var desKey = &quot;6f726c64f2c2057c&quot; // 密钥 var desIv = &quot;0123456789ABCDEF&quot; // 偏移量 var encryptedData = tripleDesEncrypt() var decryptedData = tripleDesDecrypt() console.log(&quot;加密字符串: &quot;, encryptedData) console.log(&quot;解密字符串: &quot;, decryptedData) // 加密字符串: 3J0NX7x6GbewjjhoW2HKqg== // 解密字符串: I love Python!</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-6"><a href="#Python-实现-6" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-6">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> DES3 <span class="hljs-keyword">from</span> Cryptodome <span class="hljs-keyword">import</span> Random <span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数 def add_to_16(value): while len(value) % 16 != 0: value += &#x27;\0&#x27; return str.encode(value) def des_encrypt(key, text, iv): # 加密模式 OFB cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv) encrypted_text = cipher_encrypt.encrypt(text.encode(&quot;utf-8&quot;)) return encrypted_text def des_decrypt(key, text, iv): # 加密模式 OFB cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv) decrypted_text = cipher_decrypt.decrypt(text) return decrypted_text if __name__ == &#x27;__main__&#x27;: key = &#x27;12345678&#x27; # 密钥，16 位 text = &#x27;I love Python!&#x27; # 加密对象 iv = Random.new().read(DES3.block_size) # DES3.block_size == 8 secret_str = des_encrypt(key, text, iv) print(&#x27;加密字符串：&#x27;, secret_str) clear_str = des_decrypt(key, secret_str, iv) print(&#x27;解密字符串：&#x27;, clear_str) # 加密字符串： b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27; # 解密字符串： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES#"></a>AES<a href="https://www.cnblogs.com/ikdl/p/15146160.html#aes">#</a></h2><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，它本身只有一个密钥，即用来实现加密，也用于解密。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 3268：<a href="https://datatracker.ietf.org/doc/rfc3268/">https://datatracker.ietf.org/doc/rfc3268/</a></li><li>AES 维基百科：<a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></li></ul><h3 id="JavaScript-实现-7"><a href="#JavaScript-实现-7" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-7">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function tripleAesEncrypt() &#123; var key = CryptoJS.enc.Utf8.parse(aesKey), iv = CryptoJS.enc.Utf8.parse(aesIv), srcs = CryptoJS.enc.Utf8.parse(text), // CBC 加密方式，Pkcs7 填充方式 encrypted = CryptoJS.AES.encrypt(srcs, key, &#123; iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 &#125;); return encrypted.toString(); &#125; function tripleAesDecrypt() &#123; var key = CryptoJS.enc.Utf8.parse(aesKey), iv = CryptoJS.enc.Utf8.parse(aesIv), srcs = encryptedData, // CBC 加密方式，Pkcs7 填充方式 decrypted = CryptoJS.AES.decrypt(srcs, key, &#123; iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 &#125;); return decrypted.toString(CryptoJS.enc.Utf8); &#125; var text = &quot;I love Python!&quot; // 待加密对象 var aesKey = &quot;6f726c64f2c2057c&quot; // 密钥，16 倍数 var aesIv = &quot;0123456789ABCDEF&quot; // 偏移量，16 倍数 var encryptedData = tripleAesEncrypt() var decryptedData = tripleAesDecrypt() console.log(&quot;加密字符串: &quot;, encryptedData) console.log(&quot;解密字符串: &quot;, decryptedData) // 加密字符串: dZL7TLJR786VGvuUvqYGoQ== // 解密字符串: I love Python!</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-7"><a href="#Python-实现-7" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-7">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> AES <span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数 def add_to_16(value): while len(value) % 16 != 0: value += &#x27;\0&#x27; return str.encode(value) # 加密方法 def aes_encrypt(key, t, iv): aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv)) # 初始化加密器 encrypt_aes = aes.encrypt(add_to_16(t)) # 先进行 aes 加密 encrypted_text = str(base64.encodebytes(encrypt_aes), encoding=&#x27;utf-8&#x27;) # 执行加密并转码返回 bytes return encrypted_text # 解密方法 def aes_decrypt(key, t, iv): aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv)) # 初始化加密器 base64_decrypted = base64.decodebytes(t.encode(encoding=&#x27;utf-8&#x27;)) # 优先逆向解密 base64 成 bytes decrypted_text = str(aes.decrypt(base64_decrypted), encoding=&#x27;utf-8&#x27;).replace(&#x27;\0&#x27;, &#x27;&#x27;) # 执行解密密并转码返回str return decrypted_text if __name__ == &#x27;__main__&#x27;: secret_key = &#x27;12345678&#x27; # 密钥 text = &#x27;I love Python!&#x27; # 加密对象 iv = secret_key # 初始向量 encrypted_str = aes_encrypt(secret_key, text, iv) print(&#x27;加密字符串：&#x27;, encrypted_str) decrypted_str = aes_decrypt(secret_key, encrypted_str, iv) print(&#x27;解密字符串：&#x27;, decrypted_str) # 加密字符串： lAVKvkQh+GtdNpoKf4/mHA== # 解密字符串： I love Python!</span><br></code></pre></td></tr></table></figure><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4#"></a>RC4<a href="https://www.cnblogs.com/ikdl/p/15146160.html#rc4">#</a></h2><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，现在逐渐不推荐使用了。</p><p>参考资料：</p><ul><li>RFC 7465：<a href="https://datatracker.ietf.org/doc/rfc7465/">https://datatracker.ietf.org/doc/rfc7465/</a></li><li>RC4 维基百科：<a href="https://en.wikipedia.org/wiki/RC4">https://en.wikipedia.org/wiki/RC4</a></li></ul><h3 id="JavaScript-实现-8"><a href="#JavaScript-实现-8" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-8">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function RC4Encrypt() &#123; return CryptoJS.RC4.encrypt(text, key).toString(); &#125; function RC4Decrypt()&#123; return CryptoJS.RC4.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8); &#125; var text = &quot;I love Python!&quot; var key = &quot;6f726c64f2c2057c&quot; var encryptedData = RC4Encrypt() var decryptedData = RC4Decrypt() console.log(&quot;加密字符串: &quot;, encryptedData) console.log(&quot;解密字符串: &quot;, decryptedData) // 加密字符串: U2FsdGVkX18hMm9WWdoEQGPolnXzlg9ryArdGNwv // 解密字符串: I love Python!</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-8"><a href="#Python-实现-8" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-8">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> ARC4 <span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_encrypt</span>(<span class="hljs-params">key, t</span>): enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)) res = enc.encrypt(t.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) res = base64.b64encode(res) <span class="hljs-keyword">return</span> res <span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">key, t</span>): data = base64.b64decode(t) enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)) res = enc.decrypt(data) <span class="hljs-keyword">return</span> res <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>: secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span> <span class="hljs-comment"># 密钥 text = &#x27;I love Python!&#x27; # 加密对象 encrypted_str = rc4_encrypt(secret_key, text) print(&#x27;加密字符串：&#x27;, encrypted_str) decrypted_str = rc4_decrypt(secret_key, encrypted_str) print(&#x27;解密字符串：&#x27;, decrypted_str) # 加密字符串： b&#x27;8tNVu3/U/veJR2KgyBw=&#x27; # 解密字符串： b&#x27;I love Python!&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit#"></a>Rabbit<a href="https://www.cnblogs.com/ikdl/p/15146160.html#rabbit">#</a></h2><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p><p>参考资料：</p><ul><li>RFC 4503：<a href="https://datatracker.ietf.org/doc/rfc4503/">https://datatracker.ietf.org/doc/rfc4503/</a></li><li>Rabbit 维基百科：<a href="https://en.wikipedia.org/wiki/Rabbit_(cipher)">https://en.wikipedia.org/wiki/Rabbit_(cipher)</a></li></ul><h3 id="JavaScript-实现-9"><a href="#JavaScript-实现-9" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-9">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块 var CryptoJS = require(&#x27;crypto-js&#x27;) function rabbitEncrypt() &#123; return CryptoJS.Rabbit.encrypt(text, key).toString(); &#125; function rabbitDecrypt() &#123; return CryptoJS.Rabbit.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8); &#125; var text = &quot;I love Python!&quot; var key = &quot;6f726c64f2c2057&quot; var encryptedData = rabbitEncrypt() var decryptedData = rabbitDecrypt() console.log(&quot;加密字符串: &quot;, encryptedData) console.log(&quot;解密字符串: &quot;, decryptedData) // 加密字符串: U2FsdGVkX1+ZVCHRXlhmG5Xw87YPWMNIBlbukuh8 // 解密字符串: I love Python!</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-9"><a href="#Python-实现-9" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-9">#</a></h3><p>目前没有找到有第三方库可以直接实现 Rabbit 算法，在 Python 中实现可以参考：<a href="https://asecuritysite.com/encryption/rabbit2">https://asecuritysite.com/encryption/rabbit2</a></p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA#"></a>RSA<a href="https://www.cnblogs.com/ikdl/p/15146160.html#rsa">#</a></h2><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p><p>参考资料：</p><ul><li>RSA 维基百科：<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">https://en.wikipedia.org/wiki/RSA_(cryptosystem)</a></li></ul><h3 id="JavaScript-实现-10"><a href="#JavaScript-实现-10" class="headerlink" title="JavaScript 实现#"></a>JavaScript 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#javascript-%E5%AE%9E%E7%8E%B0-10">#</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 node-rsa 加密模块 var NodeRSA = require(&#x27;node-rsa&#x27;); function rsaEncrypt() &#123; pubKey = new NodeRSA(publicKey,&#x27;pkcs8-public&#x27;); var encryptedData = pubKey.encrypt(text, &#x27;base64&#x27;); return encryptedData &#125; function rsaDecrypt() &#123; priKey = new NodeRSA(privatekey,&#x27;pkcs8-private&#x27;); var decryptedData = priKey.decrypt(encryptedData, &#x27;utf8&#x27;); return decryptedData &#125; var key = new NodeRSA(&#123;b: 512&#125;); //生成512位秘钥 var publicKey = key.exportKey(&#x27;pkcs8-public&#x27;); //导出公钥 var privatekey = key.exportKey(&#x27;pkcs8-private&#x27;); //导出私钥 var text = &quot;I love Python!&quot; var encryptedData = rsaEncrypt() var decryptedData = rsaDecrypt() console.log(&quot;公钥:\n&quot;, publicKey) console.log(&quot;私钥:\n&quot;, privatekey) console.log(&quot;加密字符串: &quot;, encryptedData) console.log(&quot;解密字符串: &quot;, decryptedData) /* 公钥: -----BEGIN PUBLIC KEY----- MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOV1BwTJSVce/QjJAro5fXG9WzOpal09 Qtv1yuXKE81vZSNTHxW6dICwPT/kjCfC3bA5Qs6wnYBANuwD6wlAS0UCAwEAAQ== -----END PUBLIC KEY----- 私钥: -----BEGIN PRIVATE KEY----- MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA5XUHBMlJVx79CMkC ujl9cb1bM6lqXT1C2/XK5coTzW9lI1MfFbp0gLA9P+SMJ8LdsDlCzrCdgEA27APr CUBLRQIDAQABAkAiXwJbJC+5PioXG80tyhjRZdT4iyMkrl2Kh2oKO9f1iLaBXLya D0HW82wFh+cUy8GcMl9jse8DE8wd1TdORmHhAiEA/rwmWjXHVgDqcH/fqk8Ufku0 fXvs56h5QDoh1so5vokCIQDmmL3JDW6Y7RuK2qwFbHBZtYPRFRVdn5X1oqU2FOSX 3QIhAOVTjVN5RtNuT6Cn/jvcpZ5tmTe+8TA8w6vGqeAsfn/BAiBvKKIUEQ2HWoU0 YkUaODPQiteIKomqIAvB5S2O7HNlYQIgWMuLUxGZbbcAmIX+YmRXuET97S7OWv+z WHVfb/rbXtI= -----END PRIVATE KEY----- 加密字符串: hHXTF1K3w55Wd6OSjVYtqxceJ5VhlySNUahel9pwKD92Ef7wIT7DYPuJRKiqz5tuHtUqujbmbZBSL0qDE/EA+A== 解密字符串: I love Python! */</span><br></code></pre></td></tr></table></figure><h3 id="Python-实现-10"><a href="#Python-实现-10" class="headerlink" title="Python 实现#"></a>Python 实现<a href="https://www.cnblogs.com/ikdl/p/15146160.html#python-%E5%AE%9E%E7%8E%B0-10">#</a></h3><p>模块：rsa：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> rsa <span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa_encrypt</span>(<span class="hljs-params">pu_key, t</span>): <span class="hljs-comment"># 公钥加密 rsa = rsa.encrypt(t.encode(&quot;utf-8&quot;), pu_key) return rsa def rsa_decrypt(pr_key, t): # 私钥解密 rsa = rsa.decrypt(t, pr_key).decode(&quot;utf-8&quot;) return rsa if __name__ == &quot;__main__&quot;: public_key, private_key = rsa.newkeys(512) # 生成公钥、私钥 print(&#x27;公钥：&#x27;, public_key) print(&#x27;私钥：&#x27;, private_key) text = &#x27;I love Python!&#x27; # 加密对象 encrypted_str = rsa_encrypt(public_key, text) print(&#x27;加密字符串：&#x27;, encrypted_str) decrypted_str = rsa_decrypt(private_key, encrypted_str) print(&#x27;解密字符串：&#x27;, decrypted_str) &#x27;&#x27;&#x27; 公钥： PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537) 私钥： PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139) 加密字符串： b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot; 解密字符串： I love Python! &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>模块 Cryptodome：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">from</span> Cryptodome.PublicKey <span class="hljs-keyword">import</span> RSA <span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5 data = <span class="hljs-string">&quot;cKK8B2rWwfwWeXhz&quot;</span> public_key = <span class="hljs-string">&quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span> rsa_key = RSA.import_key(base64.b64decode(public_key)) <span class="hljs-comment"># 导入读取到的公钥 cipher = PKCS1_v1_5.new(rsa_key) # 生成对象 cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=&quot;utf-8&quot;))) print(cipher_text)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫逆向基础，认识 SM1-SM9、ZUC 国密算法</title>
    <link href="/2025/02/14/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%8C%E8%AE%A4%E8%AF%86-SM1-SM9%E3%80%81ZUC-%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2025/02/14/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%8C%E8%AE%A4%E8%AF%86-SM1-SM9%E3%80%81ZUC-%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫逆向基础，认识-SM1-SM9、ZUC-国密算法-K哥爬虫-博客园"><a href="#爬虫逆向基础，认识-SM1-SM9、ZUC-国密算法-K哥爬虫-博客园" class="headerlink" title="爬虫逆向基础，认识 SM1-SM9、ZUC 国密算法 - K哥爬虫 - 博客园"></a>爬虫逆向基础，认识 SM1-SM9、ZUC 国密算法 - K哥爬虫 - 博客园</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>关注微信公众号：K哥爬虫，QQ交流群：808574309，持续分享爬虫进阶、JS&#x2F;安卓逆向等技术干货！ 【01x00】 简介 国密即国家密码局认定的国产加密算法，爬虫工程师在做 JS 逆向的时候，会遇到各种各样的加密算法，其中 RSA、AES、SHA 等算法是最常见的，这些算法都是国外的，在 K 哥</p></blockquote><hr><p><a href="https://img2020.cnblogs.com/blog/2501174/202111/2501174-20211112100307631-620006729.png"><img src="/2025/02/14/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%8C%E8%AE%A4%E8%AF%86-SM1-SM9%E3%80%81ZUC-%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/2501174-20211112100307631-620006729.png"></a></p><blockquote><p>关注微信公众号：K哥爬虫，QQ交流群：808574309，持续分享爬虫进阶、JS&#x2F;安卓逆向等技术干货！</p></blockquote><h2 id="【01x00】-简介"><a href="#【01x00】-简介" class="headerlink" title="【01x00】 简介#"></a>【01x00】 简介<a href="https://www.cnblogs.com/ikdl/p/15529503.html#01x00-%E7%AE%80%E4%BB%8B">#</a></h2><p>国密即国家密码局认定的国产加密算法，爬虫工程师在做 JS 逆向的时候，会遇到各种各样的加密算法，其中 RSA、AES、SHA 等算法是最常见的，这些算法都是国外的，在 K 哥以前的文章里也有介绍：<a href="https://mp.weixin.qq.com/s/4QTee0M9ukN6olgoR_LMug">《【爬虫知识】爬虫常见加密解密算法》</a></p><p>事实上从 2010 年开始，我国国家密码管理局就已经开始陆续发布了一系列国产加密算法，这其中就包括 SM1、SM2、SM3 、SM4、SM7、SM9、ZUC（祖冲之加密算法）等，SM 代表商密，即商业密码，是指用于商业的、不涉及国家秘密的密码技术。<strong>SM1 和 SM7 的算法不公开</strong>，其余算法都已成为 ISO&#x2F;IEC 国际标准。</p><p>在这些国产加密算法中，<strong>SM2、SM3、SM4 三种加密算法是比较常见的</strong>，在爬取部分 gov 网站时，也可能会遇到这些算法，所以作为爬虫工程师是有必要了解一下这些算法的，如下图所示某 gov 网站就使用了 SM2 和 SM4 加密算法：</p><p><a href="https://img2020.cnblogs.com/other/2501174/202111/2501174-20211109161120830-777299949.png"><img src="/2025/02/14/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80%EF%BC%8C%E8%AE%A4%E8%AF%86-SM1-SM9%E3%80%81ZUC-%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/2501174-20211109161120830-777299949.png" alt="01.png"></a></p><h2 id="【02x00】算法概述"><a href="#【02x00】算法概述" class="headerlink" title="【02x00】算法概述#"></a>【02x00】算法概述<a href="https://www.cnblogs.com/ikdl/p/15529503.html#02x00%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0">#</a></h2><table><thead><tr><th>算法名称</th><th>算法类别</th><th>应用领域</th><th>特点</th></tr></thead><tbody><tr><td>SM1</td><td>对称（分组）加密算法</td><td>芯片</td><td>分组长度、密钥长度均为 128 比特</td></tr><tr><td>SM2</td><td>非对称（基于椭圆曲线 ECC）加密算法</td><td>数据加密</td><td>ECC 椭圆曲线密码机制 256 位，相比 RSA 处理速度快，消耗更少</td></tr><tr><td>SM3</td><td>散列（hash）函数算法</td><td>完整性校验</td><td>安全性及效率与 SHA-256 相当，压缩函数更复杂</td></tr><tr><td>SM4</td><td>对称（分组）加密算法</td><td>数据加密和局域网产品</td><td>分组长度、密钥长度均为 128 比特，计算轮数多</td></tr><tr><td>SM7</td><td>对称（分组）加密算法</td><td>非接触式 IC 卡</td><td>分组长度、密钥长度均为 128 比特</td></tr><tr><td>SM9</td><td>标识加密算法（IBE）</td><td>端对端离线安全通讯</td><td>加密强度等同于 3072 位密钥的 RSA 加密算法</td></tr><tr><td>ZUC</td><td>对称（序列）加密算法</td><td>移动通信 4G 网络</td><td>流密码</td></tr></tbody></table><h2 id="【03x00】算法详解"><a href="#【03x00】算法详解" class="headerlink" title="【03x00】算法详解#"></a>【03x00】算法详解<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x00%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3">#</a></h2><h3 id="【03x01】SM1-分组加密算法"><a href="#【03x01】SM1-分组加密算法" class="headerlink" title="【03x01】SM1 分组加密算法#"></a>【03x01】SM1 分组加密算法<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x01sm1-%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">#</a></h3><p>SM1 为分组加密算法，对称加密，分组长度和密钥长度都为 128 位，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。算法安全保密强度及相关软硬件实现性能与 AES 相当，该算法不公开，仅以 IP 核的形式存在于芯片中，调用该算法时，需要通过加密芯片的接口进行调用，采用该算法已经研制了系列芯片、智能 IC 卡、智能密码钥匙、加密卡、加密机等安全产品，广泛应用于电子政务、电子商务及国民经济的各个应用领域（包括国家政务通、警务通等重要领域），一般了解的人比较少，爬虫工程师也不会遇到这种加密算法。</p><h3 id="【03x02】SM2-椭圆曲线公钥加密算法"><a href="#【03x02】SM2-椭圆曲线公钥加密算法" class="headerlink" title="【03x02】SM2 椭圆曲线公钥加密算法#"></a>【03x02】SM2 椭圆曲线公钥加密算法<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x02sm2-%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">#</a></h3><p>SM2 为椭圆曲线（ECC）公钥加密算法，非对称加密，SM2 算法和 RSA 算法都是公钥加密算法，SM2 算法是一种更先进安全的算法，在我们国家商用密码体系中被用来替换 RSA 算法，在不少 gov 网站会见到此类加密算法。我国学者对椭圆曲线密码的研究从 20 世纪 80 年代开始，目前已取得不少成果，SM2 椭圆曲线公钥密码算法比 RSA 算法有以下优势：</p><table><thead><tr><th></th><th>SM2</th><th>RSA</th></tr></thead><tbody><tr><td>安全性</td><td>256 位 SM2 强度已超过 RSA-2048</td><td>一般</td></tr><tr><td>算法结构</td><td>基本椭圆曲线（ECC）</td><td>基于特殊的可逆模幂运算</td></tr><tr><td>计算复杂度</td><td>完全指数级</td><td>亚指数级</td></tr><tr><td>存储空间（密钥长度）</td><td>192-256 bit</td><td>2048-4096 bit</td></tr><tr><td>秘钥生成速度</td><td>较 RSA 算法快百倍以上</td><td>慢</td></tr><tr><td>解密加密速度</td><td>较快</td><td>一般</td></tr></tbody></table><h3 id="【03x03】SM3-杂凑算法"><a href="#【03x03】SM3-杂凑算法" class="headerlink" title="【03x03】SM3 杂凑算法#"></a>【03x03】SM3 杂凑算法<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x03sm3-%E6%9D%82%E5%87%91%E7%AE%97%E6%B3%95">#</a></h3><p>SM3 为密码杂凑算法，采用密码散列（hash）函数标准，用于替代 MD5&#x2F;SHA-1&#x2F;SHA-2 等国际算法，是在 SHA-256 基础上改进实现的一种算法，消息分组长度为 512 位，摘要值长度为 256 位，其中使用了异或、模、模加、移位、与、或、非运算，由填充、迭代过程、消息扩展和压缩函数所构成。在商用密码体系中，SM3 主要用于数字签名及验证、消息认证码生成及验证、随机数生成等。据国家密码管理局表示，其安全性及效率要高于 MD5 算法和 SHA-1 算法，与 SHA-256 相当。</p><h3 id="【03x04】SM4-分组加密算法"><a href="#【03x04】SM4-分组加密算法" class="headerlink" title="【03x04】SM4 分组加密算法#"></a>【03x04】SM4 分组加密算法<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x04sm4-%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">#</a></h3><p>SM4 为无线局域网标准的分组加密算法，对称加密，用于替代 DES&#x2F;AES 等国际算法，SM4 算法与 AES 算法具有相同的密钥长度和分组长度，均为 128 位，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。加密算法与密钥扩展算法都采用 32 轮非线性迭代结构，解密算法与加密算法的结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</p><table><thead><tr><th></th><th>SM4</th><th>DES</th><th>AES</th></tr></thead><tbody><tr><td>计算轮数</td><td>32</td><td>16（3DES 为 16*3）</td><td>10&#x2F;12&#x2F;14</td></tr><tr><td>密码部件</td><td>S 盒、非线性变换、线性变换、合成变换</td><td>标准算术和逻辑运算、先替换后置换，不含线性变换</td><td>S 盒、行移位变换、列混合变换、圈密钥加变换（AddRoundKey）</td></tr></tbody></table><h3 id="【03x05】SM7-分组加密算法"><a href="#【03x05】SM7-分组加密算法" class="headerlink" title="【03x05】SM7 分组加密算法#"></a>【03x05】SM7 分组加密算法<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x05sm7-%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">#</a></h3><p>SM7 为分组加密算法，对称加密，该算法不公开，应用包括身份识别类应用（非接触式 IC 卡、门禁卡、工作证、参赛证等），票务类应用（大型赛事门票、展会门票等），支付与通卡类应用（积分消费卡、校园一卡通、企业一卡通等）。爬虫工程师基本上不会遇到此类算法。</p><h3 id="【03x06】SM9-标识加密算法"><a href="#【03x06】SM9-标识加密算法" class="headerlink" title="【03x06】SM9 标识加密算法#"></a>【03x06】SM9 标识加密算法<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x06sm9-%E6%A0%87%E8%AF%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">#</a></h3><p>SM9 为标识加密算法（Identity-Based Cryptography），非对称加密，标识加密将用户的标识（如微信号、邮件地址、手机号码、QQ 号等）作为公钥，省略了交换数字证书和公钥过程，使得安全系统变得易于部署和管理，适用于互联网应用的各种新兴应用的安全保障，如基于云技术的密码服务、电子邮件安全、智能终端保护、物联网安全、云存储安全等等。这些安全应用可采用手机号码或邮件地址作为公钥，实现数据加密、身份认证、通话加密、通道加密等。在商用密码体系中，SM9 主要用于用户的身份认证，据新华网公开报道，SM9 的加密强度等同于 3072 位密钥的 RSA 加密算法。</p><h3 id="【03x07】ZUC-祖冲之算法"><a href="#【03x07】ZUC-祖冲之算法" class="headerlink" title="【03x07】ZUC 祖冲之算法#"></a>【03x07】ZUC 祖冲之算法<a href="https://www.cnblogs.com/ikdl/p/15529503.html#03x07zuc-%E7%A5%96%E5%86%B2%E4%B9%8B%E7%AE%97%E6%B3%95">#</a></h3><p>ZUC 为流密码算法，对称加密，该机密性算法可适用于 3GPP LTE 通信中的加密和解密，该算法包括祖冲之算法（ZUC）、机密性算法（128-EEA3）和完整性算法（128-EIA3）三个部分。已经被国际组织 3GPP 推荐为 4G 无线通信的第三套国际加密和完整性标准的候选算法。</p><h2 id="【04x00】编程语言实现"><a href="#【04x00】编程语言实现" class="headerlink" title="【04x00】编程语言实现#"></a>【04x00】编程语言实现<a href="https://www.cnblogs.com/ikdl/p/15529503.html#04x00%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0">#</a></h2><h3 id="【04x01】Python-语言实现"><a href="#【04x01】Python-语言实现" class="headerlink" title="【04x01】Python 语言实现#"></a>【04x01】Python 语言实现<a href="https://www.cnblogs.com/ikdl/p/15529503.html#04x01python-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0">#</a></h3><p>在 Python 里面并没有比较官方的库来实现国密算法，这里仅列出了其中两个较为完善的第三方库，需要注意的是，SM1 和 SM7 算法不公开，目前大多库仅实现了 SM2、SM3、SM4 三种密算法。</p><ul><li>snowland-smx-python：<a href="https://gitee.com/snowlandltd/snowland-smx-python">https://gitee.com/snowlandltd/snowland-smx-python</a></li><li>gmssl：<a href="https://github.com/duanhongyi/gmssl">https://github.com/duanhongyi/gmssl</a></li><li>gmssl-python：<a href="https://github.com/gongxian-ding/gmssl-python">https://github.com/gongxian-ding/gmssl-python</a></li></ul><p>其中 gmssl-python 是 gmssl 的改进版，gmssl-python 新增支持了 SM9 算法，不过截止本文编写时，gmssl-python 并未发布 pypi，也未 PR 到 gmssl，使用 <code>pip install gmssl</code> 安装的 gmssl 不支持 SM9 算法。若要使用 SM9 算法，可下载 gmssl-python 源码手动安装。</p><p>以 gmssl 的 SM2 算法为例，实现如下（其他算法和详细用法可参考其官方文档）：</p><p>SM2 加密（encrypt）和解密（decrypt）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm2 <span class="hljs-comment"># 16 进制的公钥和私钥 private_key = &#x27;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#x27; public_key = &#x27;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#x27; sm2_crypt = sm2.CryptSM2(public_key=public_key, private_key=private_key) # 待加密数据和加密后数据为 bytes 类型 data = b&quot;this is the data to be encrypted&quot; enc_data = sm2_crypt.encrypt(data) dec_data = sm2_crypt.decrypt(enc_data) print(&#x27;enc_data: &#x27;, enc_data.hex()) print(&#x27;dec_data: &#x27;, dec_data) # enc_data: 3cb96dd2e0b6c24df8e22a5da3951d061a6ee6ce99f46a446426feca83e501073288b1553ca8d91fad79054e26696a27c982492466dafb5ed06a573fb09947f2aed8dfae243b095ab88115c584bb6f0814efe2f338a00de42b244c99698e81c7913c1d82b7609557677a36681dd10b646229350ad0261b51ca5ed6030d660947 # dec_data: b&#x27;this is the data to be encrypted&#x27;</span><br></code></pre></td></tr></table></figure><p>SM2 签名（sign）和校验（verify）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm2, func <span class="hljs-comment"># 16 进制的公钥和私钥 private_key = &#x27;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#x27; public_key = &#x27;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#x27; sm2_crypt = sm2.CryptSM2(public_key=public_key, private_key=private_key) # 待签名数据为 bytes 类型 data = b&quot;this is the data to be signed&quot; random_hex_str = func.random_hex(sm2_crypt.para_len) # 16 进制 sign = sm2_crypt.sign(data, random_hex_str) verify = sm2_crypt.verify(sign, data) print(&#x27;sign: &#x27;, sign) print(&#x27;verify: &#x27;, verify) # sign: 45cfe5306b1a87cf5d0034ef6712babdd1d98547e75bcf89a17f3bcb617150a3f111ab05597601bab8c41e2b980754b74ebe9a169a59db37d549569910ae273a # verify: True</span><br></code></pre></td></tr></table></figure><h3 id="【04x02】JavaScript-语言实现"><a href="#【04x02】JavaScript-语言实现" class="headerlink" title="【04x02】JavaScript 语言实现#"></a>【04x02】JavaScript 语言实现<a href="https://www.cnblogs.com/ikdl/p/15529503.html#04x02javascript-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0">#</a></h3><p>在 JavaScript 中已有比较成熟的实现库，这里推荐 sm-crypto，目前支持 SM2、SM3 和 SM4，需要注意的是，SM2 非对称加密的结果由 C1、C2、C3 三部分组成，其中 C1 是生成随机数的计算出的椭圆曲线点，C2 是密文数据，C3 是 SM3 的摘要值，最开始的国密标准的结果是按 C1C2C3 顺序的，新标准的是按 C1C3C2 顺序存放的，sm-crypto 支持设置 cipherMode，也就是 C1C2C3 的排列顺序。</p><p>sm-crypto：<a href="https://www.npmjs.com/package/sm-crypto">https://www.npmjs.com/package/sm-crypto</a></p><p>以 SM2 算法为例，实现如下（其他算法和详细用法可参考其官方文档）：</p><p>SM2 加密（encrypt）和解密（decrypt）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sm2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sm-crypto&#x27;</span>).<span class="hljs-property">sm2</span> <span class="hljs-comment">// 1 - C1C3C2，0 - C1C2C3，默认为1 const cipherMode = 1 // 获取密钥对 let keypair = sm2.generateKeyPairHex() let publicKey = keypair.publicKey // 公钥 let privateKey = keypair.privateKey // 私钥 let msgString = &quot;this is the data to be encrypted&quot; let encryptData = sm2.doEncrypt(msgString, publicKey, cipherMode) // 加密结果 let decryptData = sm2.doDecrypt(encryptData, privateKey, cipherMode) // 解密结果 console.log(&quot;encryptData: &quot;, encryptData) console.log(&quot;decryptData: &quot;, decryptData) // encryptData: ddf261103fae06d0efe20ea0fe0d82bcc170e8efd8eeae24e9559b3835993f0ed2acb8ba6782fc21941ee74ca453d77664a5cb7dbb91517e6a3b0c27db7ce587ae7af54f8df48d7fa822b7062e2af66c112aa57de94d12ba28e5ba96bf4439d299b41da4a5282d054696adc64156d248049d1eb1d0af28d76b542fe8a95d427e // decryptData: this is the data to be encrypted</span><br></code></pre></td></tr></table></figure><p>SM2 签名（sign）和校验（verify）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sm2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sm-crypto&#x27;</span>).<span class="hljs-property">sm2</span> <span class="hljs-comment">// 获取密钥对 let keypair = sm2.generateKeyPairHex() let publicKey = keypair.publicKey // 公钥 let privateKey = keypair.privateKey // 私钥 // 纯签名 + 生成椭圆曲线点 let msgString = &quot;this is the data to be signed&quot; let sigValueHex = sm2.doSignature(msgString, privateKey) // 签名 let verifyResult = sm2.doVerifySignature(msgString, sigValueHex, publicKey) // 验签结果 console.log(&quot;sigValueHex: &quot;, sigValueHex) console.log(&quot;verifyResult: &quot;, verifyResult) // sigValueHex: 924cbb9f2b5adb554ef77129ff1e3a00b2da42017ad3ec2f806d824a77646987ba8c8c4fb94576c38bc11ae69cc98ebbb40b5d47715171ec7dcea913dfc6ccc1 // verifyResult: true</span><br></code></pre></td></tr></table></figure><h3 id="【04x03】其他语言实现以及参考资料"><a href="#【04x03】其他语言实现以及参考资料" class="headerlink" title="【04x03】其他语言实现以及参考资料#"></a>【04x03】其他语言实现以及参考资料<a href="https://www.cnblogs.com/ikdl/p/15529503.html#04x03%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a></h3><ul><li>Java 语言实现：<ul><li><a href="https://github.com/bcgit/bc-csharp">https://github.com/bcgit/bc-csharp</a></li><li><a href="https://github.com/xjfuuu/SM2_SM3_SM4Encrypt">https://github.com/xjfuuu/SM2_SM3_SM4Encrypt</a></li></ul></li><li>Go 语言实现：<a href="https://github.com/tjfoc/gmsm">https://github.com/tjfoc/gmsm</a></li><li>开源国密算法工具箱：<a href="http://gmssl.org/">http://gmssl.org/</a></li><li>国密算法源代码下载：<a href="http://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71">http://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71</a></li><li>国家密码管理局：<a href="https://www.sca.gov.cn/">https://www.sca.gov.cn/</a></li><li>密码标准委员会：<a href="http://www.gmbz.org.cn/">http://www.gmbz.org.cn/</a></li></ul><h2 id="【05x00】附：GM-x2F-T-密码行业标准"><a href="#【05x00】附：GM-x2F-T-密码行业标准" class="headerlink" title="【05x00】附：GM&#x2F;T 密码行业标准#"></a>【05x00】附：GM&#x2F;T 密码行业标准<a href="https://www.cnblogs.com/ikdl/p/15529503.html#05x00%E9%99%84gmt-%E5%AF%86%E7%A0%81%E8%A1%8C%E4%B8%9A%E6%A0%87%E5%87%86">#</a></h2><ul><li><a href="http://www.gmbz.org.cn/main/viewfile/20180117202410524608.html">GM&#x2F;T 0001.1-2012：祖冲之序列密码算法：第1部分：算法描述</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180107233806310781.html">GM&#x2F;T 0001.2-2012：祖冲之序列密码算法：第2部分：基于祖冲之算法的机密性算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180107234058336917.html">GM&#x2F;T 0001.3-2012：祖冲之序列密码算法：第3部分：基于祖冲之算法的完整性算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108015515787986.html">GM&#x2F;T 0003.1-2012：SM2 椭圆曲线公钥密码算法第1部分：总则</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023346264349.html">GM&#x2F;T 0003.2-2012：SM2 椭圆曲线公钥密码算法第2部分：数字签名算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023456003485.html">GM&#x2F;T 0003.3-2012：SM2 椭圆曲线公钥密码算法第3部分：密钥交换协议</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023602687857.html">GM&#x2F;T 0003.4-2012：SM2 椭圆曲线公钥密码算法第4部分：公钥加密算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/2018010802371372251.html">GM&#x2F;T 0003.5-2012：SM2 椭圆曲线公钥密码算法第5部分：参数定义</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023812835219.html">GM&#x2F;T 0004-2012：SM3 密码杂凑算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html">GM&#x2F;T 0002-2012：SM4 分组密码算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/2018011002473633053.html">GM&#x2F;T 0044.1-2016：SM9 标识密码算法 第1部分：总则</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110024900801385.html">GM&#x2F;T 0044.2-2016：SM9 标识密码算法 第2部分：数字签名算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110025010004565.html">GM&#x2F;T 0044.3-2016：SM9 标识密码算法 第3部分：密钥交换协议</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110025115084846.html">GM&#x2F;T 0044.4-2016：SM9 标识密码算法 第4部分：密钥封装机制和公钥加密算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110025229918536.html">GM&#x2F;T 0044.5-2016：SM9 标识密码算法 第5部分：参数定义</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用java imageio调整图片DPI，例如从96调整为300</title>
    <link href="/2025/02/13/%E7%94%A8java-imageio%E8%B0%83%E6%95%B4%E5%9B%BE%E7%89%87DPI%EF%BC%8C%E4%BE%8B%E5%A6%82%E4%BB%8E96%E8%B0%83%E6%95%B4%E4%B8%BA300/"/>
    <url>/2025/02/13/%E7%94%A8java-imageio%E8%B0%83%E6%95%B4%E5%9B%BE%E7%89%87DPI%EF%BC%8C%E4%BE%8B%E5%A6%82%E4%BB%8E96%E8%B0%83%E6%95%B4%E4%B8%BA300/</url>
    
    <content type="html"><![CDATA[<h1 id="用java-imageio调整图片DPI，例如从96调整为300-古语云-博客园"><a href="#用java-imageio调整图片DPI，例如从96调整为300-古语云-博客园" class="headerlink" title="用java imageio调整图片DPI，例如从96调整为300 - 古语云 - 博客园"></a>用java imageio调整图片DPI，例如从96调整为300 - 古语云 - 博客园</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>因项目需求把图片的DPI值提升到300，否则OCR识别产生错乱：直接上源码：1、图片处理接口： 2、JEPG图片的实现类 3、PNG图片的实现类</p></blockquote><hr><p><code>package</code> <code>util.image.dpi;</code></p><p><code>import</code> <code>java.awt.image.BufferedImage;</code></p><p><code>import</code> <code>java.io.ByteArrayOutputStream;</code></p><p><code>import</code> <code>java.io.IOException;</code></p><p><code>import</code> <code>java.net.MalformedURLException;</code></p><p><code>import</code> <code>java.util.Iterator;</code></p><p><code>import</code> <code>javax.imageio.IIOImage;</code></p><p><code>import</code> <code>javax.imageio.ImageIO;</code></p><p><code>import</code> <code>javax.imageio.ImageTypeSpecifier;</code></p><p><code>import</code> <code>javax.imageio.ImageWriteParam;</code></p><p><code>import</code> <code>javax.imageio.ImageWriter;</code></p><p><code>import</code> <code>javax.imageio.metadata.IIOInvalidTreeException;</code></p><p><code>import</code> <code>javax.imageio.metadata.IIOMetadata;</code></p><p><code>import</code> <code>javax.imageio.metadata.IIOMetadataNode;</code></p><p><code>import</code> <code>javax.imageio.stream.ImageOutputStream;</code></p><p><code>/**</code></p><p> <code>* PNG图片的实现类</code></p><p> <code>* @author jffan</code></p><p> <code>*</code></p><p> <code>*/</code></p><p><code>public</code> <code>class</code> <code>PngDPIProcessor</code> <code>implements</code> <code>ImageDPIProcessor &#123;</code></p><p>    <code>/**</code></p><p>     <code>* 1英寸是2.54里面</code></p><p>     <code>*/</code></p><p>    <code>private</code> <code>static</code> <code>final</code> <code>double</code> <code>INCH_2_CM =</code> <code>2``.54d;</code></p><p>    <code>/**</code></p><p>     <code>* 根据文件后缀扩展名判断是否能进行处理</code></p><p>     <code>* @param fileName</code></p><p>     <code>* @return</code></p><p>     <code>*/</code></p><p>    <code>@Override</code></p><p>    <code>public</code> <code>boolean</code> <code>canHandle(String fileName) &#123;</code></p><p>        <code>assert</code> <code>fileName !=</code> <code>null</code> <code>:</code> <code>&quot;fileName should not be null&quot;``;</code></p><p>        <code>return</code> <code>fileName.endsWith(``&quot;png&quot;``) || fileName.endsWith(``&quot;PNG&quot;``);</code></p><p>    <code>&#125;</code></p><p>    <code>/**</code></p><p>     <code>* 处理图片，设置图片DPI值</code></p><p>     <code>* @param path</code></p><p>     <code>* @param dpi dot per inch</code></p><p>     <code>* @return</code></p><p>     <code>* @throws IOException</code></p><p>     <code>*/</code></p><p>    <code>@Override</code></p><p>    <code>public</code> <code>byte``[] process(BufferedImage image,</code> <code>int</code> <code>dpi)</code> <code>throws</code> <code>MalformedURLException, IOException &#123;</code></p><p>        <code>for</code> <code>(Iterator&lt;ImageWriter&gt; iw = ImageIO.getImageWritersByFormatName(``&quot;png&quot;``); iw.hasNext();) &#123;</code></p><p>            <code>ImageWriter writer = iw.next();</code></p><p>            <code>ImageWriteParam writeParam = writer.getDefaultWriteParam();</code></p><p>            <code>ImageTypeSpecifier typeSpecifier = ImageTypeSpecifier.createFromBufferedImageType(BufferedImage.TYPE_INT_RGB);</code></p><p>            <code>IIOMetadata metadata = writer.getDefaultImageMetadata(typeSpecifier, writeParam);</code></p><p>            <code>if</code> <code>(metadata.isReadOnly() || !metadata.isStandardMetadataFormatSupported()) &#123;</code></p><p>                <code>continue``;</code></p><p>            <code>&#125;</code></p><p>            <code>ByteArrayOutputStream output =</code> <code>new</code> <code>ByteArrayOutputStream();</code></p><p>            <code>ImageOutputStream stream =</code> <code>null``;</code></p><p>            <code>try</code> <code>&#123;</code></p><p>                <code>setDPI(metadata, dpi);</code></p><p>                <code>stream = ImageIO.createImageOutputStream(output);</code></p><p>                <code>writer.setOutput(stream);</code></p><p>                <code>writer.write(metadata,</code> <code>new</code> <code>IIOImage(image,</code> <code>null``, metadata), writeParam);</code></p><p>            <code>&#125;</code> <code>finally</code> <code>&#123;</code></p><p>                <code>try</code> <code>&#123;</code></p><p>                    <code>stream.close();</code></p><p>                <code>&#125;</code> <code>catch</code> <code>(IOException e) &#123;</code></p><p>                <code>&#125;</code></p><p>            <code>&#125;</code></p><p>            <code>return</code> <code>output.toByteArray();</code></p><p>        <code>&#125;</code></p><p>        <code>return</code> <code>null``;</code></p><p>    <code>&#125;</code></p><p>    <code>/**</code></p><p>     <code>* 设置图片的DPI值</code></p><p>     <code>* @param metadata</code></p><p>     <code>* @param dpi</code></p><p>     <code>* @throws IIOInvalidTreeException</code></p><p>     <code>* @author 范继峰</code></p><p>     <code>* @date 2019年7月30日上午10:53:18</code></p><p>     <code>* @return void</code></p><p>     <code>*/</code></p><p>    <code>private</code> <code>void</code> <code>setDPI(IIOMetadata metadata,</code> <code>int</code> <code>dpi)</code> <code>throws</code> <code>IIOInvalidTreeException &#123;</code></p><p>        <code>double</code> <code>dotsPerMilli =</code> <code>1.0</code> <code>* dpi /</code> <code>10</code> <code>/ INCH_2_CM;</code></p><p>        <code>IIOMetadataNode horiz =</code> <code>new</code> <code>IIOMetadataNode(``&quot;HorizontalPixelSize&quot;``);</code></p><p>        <code>horiz.setAttribute(``&quot;value&quot;``, Double.toString(dotsPerMilli));</code></p><p>        <code>IIOMetadataNode vert =</code> <code>new</code> <code>IIOMetadataNode(``&quot;VerticalPixelSize&quot;``);</code></p><p>        <code>vert.setAttribute(``&quot;value&quot;``, Double.toString(dotsPerMilli));</code></p><p>        <code>IIOMetadataNode dim =</code> <code>new</code> <code>IIOMetadataNode(``&quot;Dimension&quot;``);</code></p><p>        <code>dim.appendChild(horiz);</code></p><p>        <code>dim.appendChild(vert);</code></p><p>        <code>IIOMetadataNode root =</code> <code>new</code> <code>IIOMetadataNode(``&quot;javax_imageio_1.0&quot;``);</code></p><p>        <code>root.appendChild(dim);</code></p><p>        <code>metadata.mergeTree(``&quot;javax_imageio_1.0&quot;``, root);</code></p><p>    <code>&#125;</code></p><p><code>&#125;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>dpi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Java 把 RGB 转为 CMYK</title>
    <link href="/2025/02/13/%E4%BD%BF%E7%94%A8-Java-%E6%8A%8A-RGB-%E8%BD%AC%E4%B8%BA-CMYK/"/>
    <url>/2025/02/13/%E4%BD%BF%E7%94%A8-Java-%E6%8A%8A-RGB-%E8%BD%AC%E4%B8%BA-CMYK/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Java-把-RGB-转为-CMYK-酸辣土豆丝-iCS"><a href="#使用-Java-把-RGB-转为-CMYK-酸辣土豆丝-iCS" class="headerlink" title="使用 Java 把 RGB 转为 CMYK | 酸辣土豆丝 iCS"></a>使用 Java 把 RGB 转为 CMYK | 酸辣土豆丝 iCS</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>使用 JAI 把 RGB 转为 CMYK.</p></blockquote><hr><h2 id="00-前言"><a href="#00-前言" class="headerlink" title="00 前言"></a>00 前言</h2><p>最近接到了一个需求，要把 RGB 的图片转为 CMYK 的颜色模式，用于印刷。</p><p>网上对于 RGB 转为 CMYK 的资料较少，Java 也没有内置的方法。主流方法有两种，一种是手搓强转，另一种则是借助 ICC 文件来转换。</p><p>该需求对于分辨率、物理尺寸有一定的要求，且原途径就是通过 PS 处理的，正好用同样的 ICC 文件转换，能达到相对一致的颜色要求。</p><h2 id="01-色彩空间转换"><a href="#01-色彩空间转换" class="headerlink" title="01 色彩空间转换"></a>01 色彩空间转换</h2><h3 id="1-1-关键概念"><a href="#1-1-关键概念" class="headerlink" title="1.1 关键概念"></a>1.1 关键概念</h3><p><strong>RGB 模式</strong>是以色光三原色为基础建立的色彩模式，<strong>红、绿、蓝</strong>，是电脑、手机、投影仪、电视等屏幕显示的最佳颜色模式。</p><p><strong>CMYK</strong>（青色、品红色、黄色、黑色）是印刷材料的色彩空间。CMY 是 3 种印刷油墨名称的首字母：<strong>青色 Cyan、洋红色 Magenta、黄色 Yellow</strong>，由于目前制造工艺还不能造出高纯度的油墨，CMY 相加实际得到的是深灰色或深褐色，故加入纯黑色。</p><p><strong>ICC Profile 色彩特性文件</strong>，是一组用来描述色彩空间的特性的数据集合，因由国际色彩联盟（ICC）主持制定其规范而得名。RGB 转为 CMYK 就是把 RGB 值转为 CMYK 值。</p><p><strong>像素</strong>（Pixel）是指构成图片的小色点。 <strong>分辨率</strong>（单位 DPI）是指每英寸（Inch）上的<strong>像素</strong>数量，++1 英寸 &#x3D; 2.54 厘米++。 像素相同时，分辨率越高则像素<strong>密度</strong>越大，实际打印尺寸越小，图像也越细腻。</p><h3 id="1-2-转换步骤"><a href="#1-2-转换步骤" class="headerlink" title="1.2 转换步骤"></a>1.2 转换步骤</h3><p>首先，引入 JAI（Java Advanced Imaging），最新版 1.1.3，这个库好几年没更新了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.media.jai<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>com.springsource.javax.media.jai.codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-comment">&lt;!-- 这个库只用到了 TIFF 的静态变量，可以不引入 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.jai-imageio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jai-imageio-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后，加载 ICC 文件，这里选择 <code>JapanColor2001Coated.icc</code>（按需选择即可），安装 PS 就有，在 <code>C:\Program Files (x86)\Common Files\Adobe\Color\Profiles\Recommended</code> 目录下，路径不一样找不到的搜一下就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readICCProfile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123; <span class="hljs-keyword">if</span> (cmykColorSpace == <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">synchronized</span> (CMYKUtil.class) &#123; <span class="hljs-keyword">if</span> (cmykColorSpace == <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> CMYKUtil.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;icc/JapanColor2001Coated.icc&quot;</span>)) &#123; <span class="hljs-type">ICC_Profile</span> <span class="hljs-variable">cmykProfile</span> <span class="hljs-operator">=</span> ICC_Profile.getInstance(inputStream); <span class="hljs-comment">// 如果是读取外部文件，把文件的绝对路径传入即可 cmykColorSpace = new ICC_ColorSpace(cmykProfile); &#125; &#125; &#125; &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，这里我是从 <code>resources</code> 直接加载的配置文件，需要额外配置 Maven，否则编译时 ICC 文件会被 Maven 修改，报错 <code>Invalid ICC Profile Data</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- pom.xml --&gt; &lt;build&gt; &lt;resources&gt; &lt;!-- 保留其他文件的处理方式 --&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;filtering&gt;<span class="hljs-literal">true</span>&lt;/filtering&gt; &lt;includes&gt; &lt;include&gt;**<span class="hljs-comment">/*.xml&lt;/include&gt; &lt;include&gt;**/</span>*.properties&lt;/include&gt; &lt;include&gt;**<span class="hljs-comment">/*.y*ml&lt;/include&gt; &lt;include&gt;banner.txt&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;!-- 禁止编译时修改 ICC 文件 --&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;!-- 默认会替换文件中的占位符属性，导致文件被修改 --&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;includes&gt; &lt;include&gt;**/</span>*.icc&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;!-- ... --&gt; &lt;/build&gt;<br></code></pre></td></tr></table></figure><p>如果不想修改项目配置，只能通过读取外部文件，把 ICC 文件放到指定目录去读取即可。</p><p>然后, 准备需要的编码参数，用来调整图片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TIFFEncodeParam <span class="hljs-title function_">prepareEncodeParams</span><span class="hljs-params">(<span class="hljs-type">int</span> dpi)</span> &#123; <span class="hljs-type">TIFFEncodeParam</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TIFFEncodeParam</span>(); <span class="hljs-comment">// 加点压缩, 不然图片太大了 // params.setCompression(TIFFEncodeParam.COMPRESSION_LZW); // 不支持 params.setCompression(TIFFEncodeParam.COMPRESSION_DEFLATE); // 分辨率 DPI // doc: https://download.java.net/media/jai-imageio/javadoc/1.1/constant-values.html params.setExtraFields(new TIFFField[]&#123; // DIP，x y 统一，不统一图片会被拉伸或压缩 new TIFFField(BaselineTIFFTagSet.TAG_X_RESOLUTION, // 282 TIFFField.TIFF_RATIONAL, 1, new long[][]&#123;&#123;dpi, 1&#125;&#125;), new TIFFField(BaselineTIFFTagSet.TAG_Y_RESOLUTION, // 283 TIFFField.TIFF_RATIONAL, 1, new long[][]&#123;&#123;dpi, 1&#125;&#125;), // 分辨率单位 2 (inch) new TIFFField(BaselineTIFFTagSet.TAG_RESOLUTION_UNIT, // 296 TIFFField.TIFF_SHORT, 1, new char[]&#123;BaselineTIFFTagSet.RESOLUTION_UNIT_INCH&#125;), // 位深度 8*4 (无效) // new TIFFField(BaselineTIFFTagSet.TAG_BITS_PER_SAMPLE, // TIFFField.TIFF_SHORT, 1, new char[]&#123;8&#125;) &#125;); return params; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>由于需求是要打印固定的尺寸的图片，但是图片的分辨率不固定，所以每次都要计算 DPI。</li><li>其他特殊需求, 需要自己去查去摸索了，参考 <code>BaselineTIFFTagSet</code> 内的代码，内部有些许说明。</li></ul><p>到这里，可以封装一个转换方法了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteArrayOutputStream <span class="hljs-title function_">rgb2Cmyk</span><span class="hljs-params">(BufferedImage rgbImage, <span class="hljs-type">int</span> dpi)</span> <span class="hljs-keyword">throws</span> IOException &#123; <span class="hljs-comment">// 加载 ICC 配置文件 readICCProfile(); // 准备编码的各种参数 TIFFEncodeParam params = prepareEncodeParams(dpi); // 创建颜色转换实体：从源色彩空间转到 cmyk 色彩空间 ColorConvertOp op = new ColorConvertOp( rgbImage.getColorModel().getColorSpace(), cmykColorSpace, null); // 转换, 第二个是目标图像源, 为空则自动创建合适的 BufferedImage cmykImage = op.filter(rgbImage, null); // 用指定的参数转换为 CMYK, 放到 ByteArrayOutputStream 只是为了返回给其他地方使用 // 如果不需要可以直接写入文件等即可 ByteArrayOutputStream baoStream = new ByteArrayOutputStream(); ImageEncoder encoder2 = ImageCodec.createImageEncoder(&quot;TIFF&quot;, baoStream, params); // 编码为 TIFF encoder2.encode(cmykImage); return baoStream; &#125;</span><br></code></pre></td></tr></table></figure><p>最后，可以把转换好的图片写入文件（或者其他具体操作）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeImage</span><span class="hljs-params">(ByteArrayOutputStream outputStream, String filepath)</span> &#123; <span class="hljs-keyword">try</span> (<span class="hljs-type">FileImageOutputStream</span> <span class="hljs-variable">fo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileImageOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filepath))) &#123; fo.write(outputStream.toByteArray()); &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123; log.error(<span class="hljs-string">&quot;写入文件失败, &#123;&#125;, &#123;&#125;&quot;</span>, filepath, e.getMessage(), e); &#125; &#125;<br></code></pre></td></tr></table></figure><p>封装好后，使用步骤很简单了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_rgb2Cmyk</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123; <span class="hljs-comment">// 读取图片 BufferedImage rgbImage = ImageIO.read(new File(&quot;D:\\image\\rgb.png&quot;)); // 计算 DPI, 取宽/高最大值, 如果取小的那边偏差较多 // 分辨率越高偏差越大, 固定 DPI 或不在乎物理尺寸的可以忽略 int dpi = CMYKUtil.getDpi(rgbImage.getWidth(), 100); // 像素, 厘米 ByteArrayOutputStream bs = CMYKUtil.rgb2Cmyk(rgbImage, dpi); CMYKUtil.writeImage(bs, &quot;D:\\image\\cmyk.tif&quot;); &#125;</span><br></code></pre></td></tr></table></figure><h2 id="03-总结"><a href="#03-总结" class="headerlink" title="03 总结"></a>03 总结</h2><p>要把 RGB 图片转为 CMYK 等其他色彩空间的图片，使用 ICC 是比较方便的。但是 JAI 许久未更新了，有些功能还不支持，好几个参数试了没效果，如果有其他更详细的需求，未必能够用它来实现。</p><p>总结一下转换的步骤：</p><ol><li>引入 JAI 依赖，读取 ICC 配置文件（把 ICC 放到项目 Resources 下的需要注意过滤）。</li><li>为转换准备相应的参数。</li><li>初始化源色彩空间（ColorConvertOp op），转换原图为目标格式（op.filter）。</li><li>使用准备的参数编码转换后的图像。</li><li>对转换好多图片进行自定义处理。</li></ol><p>注意，同时压缩太多图片的话，建议压缩（优先使用 TIFFEncodeParam 配置），否则很容易内存不足。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fun.springx.image.utils; <span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil; <span class="hljs-keyword">import</span> com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet; <span class="hljs-keyword">import</span> com.sun.media.jai.codec.ImageCodec; <span class="hljs-keyword">import</span> com.sun.media.jai.codec.ImageEncoder; <span class="hljs-keyword">import</span> com.sun.media.jai.codec.TIFFEncodeParam; <span class="hljs-keyword">import</span> com.sun.media.jai.codec.TIFFField; <span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j; <span class="hljs-keyword">import</span> javax.imageio.stream.FileImageOutputStream; <span class="hljs-keyword">import</span> java.awt.color.ColorSpace; <span class="hljs-keyword">import</span> java.awt.color.ICC_ColorSpace; <span class="hljs-keyword">import</span> java.awt.color.ICC_Profile; <span class="hljs-keyword">import</span> java.awt.image.BufferedImage; <span class="hljs-keyword">import</span> java.awt.image.ColorConvertOp; <span class="hljs-keyword">import</span> java.io.*; <span class="hljs-comment">/** * CMYK 工具类 * * <span class="hljs-doctag">@author</span> Spring * <span class="hljs-doctag">@since</span> 2024-07-25 */</span> <span class="hljs-meta">@Slf4j</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CMYKUtil</span> &#123; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">INCH_2_CM</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.54d</span>; <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">ColorSpace</span> <span class="hljs-variable">cmykColorSpace</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readICCProfile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123; <span class="hljs-keyword">if</span> (cmykColorSpace == <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">synchronized</span> (CMYKUtil.class) &#123; <span class="hljs-keyword">if</span> (cmykColorSpace == <span class="hljs-literal">null</span>) &#123; <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> CMYKUtil.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;icc/JapanColor2001Coated.icc&quot;</span>)) &#123; <span class="hljs-type">ICC_Profile</span> <span class="hljs-variable">cmykProfile</span> <span class="hljs-operator">=</span> ICC_Profile.getInstance(inputStream); cmykColorSpace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ICC_ColorSpace</span>(cmykProfile); &#125; &#125; &#125; &#125; &#125; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TIFFEncodeParam <span class="hljs-title function_">prepareEncodeParams</span><span class="hljs-params">(<span class="hljs-type">int</span> dpi)</span> &#123; <span class="hljs-type">TIFFEncodeParam</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TIFFEncodeParam</span>(); <span class="hljs-comment">// 加点压缩, 不然图片太大了 // params.setCompression(TIFFEncodeParam.COMPRESSION_LZW); // 不支持 params.setCompression(TIFFEncodeParam.COMPRESSION_DEFLATE); // 分辨率 DPI // doc: https://download.java.net/media/jai-imageio/javadoc/1.1/constant-values.html params.setExtraFields(new TIFFField[]&#123; new TIFFField(BaselineTIFFTagSet.TAG_X_RESOLUTION, // 282 TIFFField.TIFF_RATIONAL, 1, new long[][]&#123;&#123;dpi, 1&#125;&#125;), new TIFFField(BaselineTIFFTagSet.TAG_Y_RESOLUTION, // 283 TIFFField.TIFF_RATIONAL, 1, new long[][]&#123;&#123;dpi, 1&#125;&#125;), new TIFFField(BaselineTIFFTagSet.TAG_RESOLUTION_UNIT, // 296 TIFFField.TIFF_SHORT, 1, new char[]&#123;BaselineTIFFTagSet.RESOLUTION_UNIT_INCH&#125;), // 分辨率单位 2 (inch) // new TIFFField(BaselineTIFFTagSet.TAG_BITS_PER_SAMPLE, // TIFFField.TIFF_SHORT, 1, new char[]&#123;8&#125;) // 位深度 8*4 (无效) &#125;); return params; &#125; public static ByteArrayOutputStream rgb2Cmyk(BufferedImage rgbImage, int dpi) throws IOException &#123; // 加载 ICC 配置文件 readICCProfile(); // 准备编码的各种参数 TIFFEncodeParam params = prepareEncodeParams(dpi); // 创建颜色转换实体：从源色彩空间转到 cmyk 色彩空间 ColorConvertOp op = new ColorConvertOp( rgbImage.getColorModel().getColorSpace(), cmykColorSpace, null); // 转换, 第二个是目标图像源, 为空则自动创建合适的 BufferedImage cmykImage = op.filter(rgbImage, null); // 用指定的参数转换为 CMYK, 放到 ByteArrayOutputStream 只是为了返回给其他地方使用 // 如果不需要可以直接写入文件等即可 ByteArrayOutputStream baoStream = new ByteArrayOutputStream(); ImageEncoder encoder2 = ImageCodec.createImageEncoder(&quot;TIFF&quot;, baoStream, params); // 编码为 TIFF encoder2.encode(cmykImage); return baoStream; &#125; public static int getDpi(int pixel, int cm) &#123; double d = pixel / (cm / INCH_2_CM); log.info(&quot;Pixel=&#123;&#125;, cm=&#123;&#125;, DPI=&#123;&#125;&quot;, pixel, cm, d); // 四舍五入偏差比较小 return Double.valueOf(Math.round(d)).intValue(); &#125; public static void writeImage(ByteArrayOutputStream outputStream, String filepath) &#123; try (FileImageOutputStream fo = new FileImageOutputStream(new File(filepath))) &#123; fo.write(outputStream.toByteArray()); &#125; catch (IOException e) &#123; log.error(&quot;写入文件失败, &#123;&#125;, &#123;&#125;&quot;, filepath, e.getMessage(), e); &#125; &#125; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] 艺海拾贝Design. RGB 和 CMYK 色彩模式的区别与用途. <a href="https://www.shejidaren.com/rgb-cmyk-qu-bie-yu-yong-tu.html">https://www.shejidaren.com/rgb-cmyk-qu-bie-yu-yong-tu.html</a> .<br>[2] SMILE嘻嘻. Maven 编译后资源文件发生改变问题. <a href="https://blog.csdn.net/zt_16KK/article/details/72459160">https://blog.csdn.net/zt_16KK&#x2F;article&#x2F;details&#x2F;72459160</a> , 2017-05-18.<br>[3] whyMyHelloWorld. java 多张jpg合成tif后避免tif文件过大的方法. <a href="https://blog.csdn.net/sinat_29048381/article/details/80006951">https://blog.csdn.net/sinat_29048381&#x2F;article&#x2F;details&#x2F;80006951</a> , 2018-04-19.</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>CMYK</tag>
      
      <tag>RGB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速理解DPI和PPI，不再傻傻分不清！</title>
    <link href="/2025/02/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3DPI%E5%92%8CPPI%EF%BC%8C%E4%B8%8D%E5%86%8D%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%81%20-%20Hurshi%20Blog/"/>
    <url>/2025/02/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3DPI%E5%92%8CPPI%EF%BC%8C%E4%B8%8D%E5%86%8D%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%81%20-%20Hurshi%20Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="快速理解DPI和PPI，不再傻傻分不清！-Hurshi-Blog"><a href="#快速理解DPI和PPI，不再傻傻分不清！-Hurshi-Blog" class="headerlink" title="快速理解DPI和PPI，不再傻傻分不清！ - Hurshi Blog"></a>快速理解DPI和PPI，不再傻傻分不清！ - Hurshi Blog</h1><blockquote><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p>原文出自[卡米雷特的小站(kamilet.cn)]，原文链接: <a href="http://www.kamilet.cn/dpi-and-ppi-ultimate/">http://www.kamilet.cn/dpi-and-ppi-ultimate/</a></p></blockquote><hr><blockquote><p>原文出自[卡米雷特的小站(kamilet.cn)]，原文链接: <a href="http://www.kamilet.cn/dpi-and-ppi-ultimate/">http://www.kamilet.cn/dpi-and-ppi-ultimate/</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言<a href="https://hurshi.github.io/2019/08/09/android_dpi_ppi/#%E5%89%8D%E8%A8%80"></a></h3><blockquote><p>72DPI 的图片拿去打印会糊吗？ 手机拍出来的照片是多少 DPI ？ PS 里显示72 PPI 为什么另存为JPG就变成96 DPI 了？</p></blockquote><p>类似的问题层出不穷。本站很多篇文章都讲到了 DPI 和 PPI 的问题，但似乎还是不能很好地解释。这里我们以“一次性将这个问题说清楚”为目的，来好好聊聊 DPI 和 PPI 。</p><p><img src="/2025/02/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3DPI%E5%92%8CPPI%EF%BC%8C%E4%B8%8D%E5%86%8D%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%81%20-%20Hurshi%20Blog/dpi_and_ppi_kamilet_cn-1.jpg"></p><h3 id="概念问题"><a href="#概念问题" class="headerlink" title="概念问题"></a>概念问题<a href="https://hurshi.github.io/2019/08/09/android_dpi_ppi/#%E6%A6%82%E5%BF%B5%E9%97%AE%E9%A2%98"></a></h3><p>不论是 DPI 还是 PPI，实际都是一种换算的概念，即将图片承载的信息换算为现实中的图片（即人眼能实际看到的图像）。DPI 和 PPI 的区别在于换算的途径不同，DPI 面向的是印刷受体，而 PPI 面向的是荧幕。</p><ol><li><p><strong>PPI</strong></p><p>PPI 是英文 Pixels Per Inch 的缩写，意为像素每英寸。英寸是常用的长度单位，大约相当于2.54厘米。而像素是专用于荧幕的概念，指的是荧幕可以解析的最小的点。因此，PPI 值得是像素在荧幕上的密度，PPI 越高图像就越清晰。</p><p><img src="/2025/02/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3DPI%E5%92%8CPPI%EF%BC%8C%E4%B8%8D%E5%86%8D%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%81%20-%20Hurshi%20Blog/dpi_and_ppi_kamilet_cn-3.jpg"></p><p>举例来说，如果电脑屏幕是2K分辨率，即 1920×1080 像素，它的图像宽为1920像素。而如果这个电脑屏幕的物理宽度是19.2英寸，电脑屏幕是分辨率就是1920&#x2F;19.2&#x3D;100 PPI。</p></li><li><p><strong>DPI</strong></p><p>DPI 是英文 Dots Per Inch 的缩写，意为点每英寸。应粗你还是那个英寸，但是点的意义有很多。一般来讲，你可以把 Dot 理解为取样点，即物理设备可以解析的最小单位。在印刷时，它就可以作为印刷网点，而在鼠标等电子设备上，可以理解为最小操作阈值（即设备会把多么远的两个点当作一个点来处理）。</p><p><img src="/2025/02/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3DPI%E5%92%8CPPI%EF%BC%8C%E4%B8%8D%E5%86%8D%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%81%20-%20Hurshi%20Blog/dpi_and_ppi_kamilet_cn-4.jpg"></p><p>我们仍然拿 1920×1080 像素的图片来举例子，如果印刷设备的解析能力刚好是100 DPI，而且你要印制的纸张尺寸刚好是19.2英寸，那么印刷设备就可以刚好把一个像素作为一个取样点，印刷完成后图片的保真度是百分之百（也就是图片所有的视觉信息都被印刷出来了）。在大多数情况下，这几个数值都不那么整好，因此保真度会产生损失。</p></li></ol><h3 id="作用原理"><a href="#作用原理" class="headerlink" title="作用原理"></a>作用原理<a href="https://hurshi.github.io/2019/08/09/android_dpi_ppi/#%E4%BD%9C%E7%94%A8%E5%8E%9F%E7%90%86"></a></h3><p>正如前文所说，DPI 和 PPI 是链接图片信息和视觉的窗口，那么它们是如何产生作用的呢？</p><ol><li><p><strong>图片内置的 DPI 和 PPI</strong></p><p>图片在计算机（或其他设备）里是一系列代表视觉信息的数据，它的单位是像素。因此，真正能定义图片尺寸的是分辨率，比如前面提到的 1920×1080 像素。</p><p>而很多格式的图片会内置 DPI 或 PPI 这个属性，它的唯一作用是作为图形处理软件的参考值。比如，一张图片的PPI是300，那么置入 Illustrator 的时候就会直接是 300PPI 下的尺寸。DPI 是完全相同的道理。换言之，<strong>不论图片的 DPI 和 PPI 如何变化，如果分辨率不变，那么图片承载的信息量就不会变化</strong>，在实际意义上图片的“大小”都是相同的。</p></li><li><p><strong>设备的 DPI 和 PPI</strong></p><p>我们之前提到了印刷设备的解析能力这个问题。其实每个荧幕和每个印刷设备都有自己 PPI 或 DPI 参数。我们拿荧幕来说，荧幕的 PPI 就决定了荧幕的解析能力（注意，并非最大解析能力，而是绝对解析能力）。</p><p>如你把某个图片的尺寸在屏幕上放大缩小，它的物理尺寸在改变，因此对信息量来说 PPI 也在改变。然而，荧幕会按照它自己的 PPI 显示能力来重新解析这张图片，最终形成你肉眼看到的结果。这个过程，我们可以称为“栅格处理” 。</p></li><li><p><strong>栅格处理时使用的 DPI 和 PPI</strong></p><p>栅格处理，实际就是将图片<strong>在物理尺寸不变的情况下，对 DPI 或 PPI 进行调整</strong>，图片的信息量会受到影响。图像为何需要进行栅格处理？因为任何设备都有固定的解析能力，比如很多荧幕的解析能力是 72 PPI，这时一张全屏后（即在屏幕的物理尺寸下）从信息量上来说有 300 PPI 的图片显然超过了荧幕的解析能力，因此对荧幕来说这么大的图片是没必要的，把图片在荧幕的物理尺寸下处理为 72 PPI 就刚好了。</p><p>从上面的例子中，你也可以看出，栅格处理无处不在。你在解析能力为 72 PPI 的电脑荧幕上查看一张图片时，不论你如何放大缩小图片，<strong>肉眼看到的都是 72 PPI 的图像</strong>。即便图片可能被放大到模糊，你看到的仍是 72 PPI，因为电脑荧幕会将任何图像栅格处理到 72 PPI。</p><p>然而在栅格处理的过程中，处理结果的质量和原图质量有很大的关系。比如，一张在改物理尺寸下，信息量可以达到 300 PPI 的图片，被设备栅格到 150 PPI，它仍然会是清晰的。而如果原信息量只有 72 PPI，栅格到 150 PPI 就会看起来模糊。</p><p><img src="/2025/02/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3DPI%E5%92%8CPPI%EF%BC%8C%E4%B8%8D%E5%86%8D%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%81%20-%20Hurshi%20Blog/dpi_and_ppi_kamilet_cn-5.jpg"></p><p>对于印刷设备来说也是一样的，现代印刷机的解析能力一般是300，因此在图片的物理尺寸和预想印刷完成后的物理尺寸相同时，如果信息量达不到 300 DPI，那么在印刷时就会被印刷设备栅格处理到 300 DPI，结果就会是模糊的。但上述两者都不能算绝对，毕竟人眼的识别能力也是有限的，比如 220 DPI 的图像被从 300 DPI 的设备中印刷出来，肉眼也基本看不出模糊。</p></li><li><p><strong>简单理解栅格</strong></p><p>栅格处理有非常多种算法，在 Photoshop 中，在缩放图片的时候你可以看到类似“两次立方”、“两次线性”、“临近”这样的选项，指的就是栅格处理的计算方式。</p><p><img src="/2025/02/13/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3DPI%E5%92%8CPPI%EF%BC%8C%E4%B8%8D%E5%86%8D%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%81%20-%20Hurshi%20Blog/dpi_and_ppi_kamilet_cn-2.jpg"></p><p>几乎所有的栅格都是有损处理，除了某些算法中的整数倍放大。这很容易理解，毕竟栅格相当于一种缩放。试想，你将5×5像素的图片栅格成4×4像素会发生什么？由于像素完全无法一一对应，4×4像素的图片中，每个像素都需要根据原图中的9个像素来计算新的色值，因此原图的信息受到了不可逆的破坏。</p></li></ol><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用<a href="https://hurshi.github.io/2019/08/09/android_dpi_ppi/#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8"></a></h3><p>原理说了不少，那么应用的时候我们应该注意什么？</p><ol><li><p><strong>在条件允许的情况下，图片分辨率越高越好</strong></p><p>我们可能不会有精力去关心图片信息量的 DPI 是多少，印刷设备的 DPI 又是多少这种细节的问题。但有一点是可以确定的，那就是图片只要足够大，印刷就会清晰。</p></li><li><p><strong>如果有可能，使用准确的数值</strong></p><p>许多软件可以帮助你了解图片实际尺寸下的 PPI，比如使用 Photoshop，在 300 PPI 下创建 A4 的文件（尺寸21×29.7厘米，对应分辨率 2480×3508 像素）并做出图片，那么大多数情况下都可以完美印刷。正如前文所述，大多印刷设备的解析能力是 300 DPI，因此在该图片的信息量下，1个像素刚好对应1个点，甚至不需要栅格处理。而如果你强行使用 400 PPI 来创建A4尺寸的文件，拿到 300 DPI 的设备上会被栅格，说不定还不如 300 DPI 的质量好（毕竟是有损处理，但这种差别未必能看得出来）。</p></li><li><p><strong>这些文章可以辅助理解</strong></p><ol><li><a href="http://www.kamilet.cn/how-to-print-a-poster/">海报是如何印成的？专业设计师教你印刷海报</a></li><li><a href="http://www.kamilet.cn/design-terms-getting-wrong/">15组常被混淆或翻译错误的设计概念，你认得清吗？</a></li><li><a href="http://www.kamilet.cn/dpi-vs-pixels-usage/">像素和分辨率究竟是什么玩意？应该怎么用？</a></li><li><a href="http://www.kamilet.cn/vector-vs-raster/">矢量图VS像素图，我该如何选择？</a></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DPI</tag>
      
      <tag>PPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
